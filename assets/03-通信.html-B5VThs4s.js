import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as e,o as c,c as i,b as n,e as s,d as t,a as p}from"./app-oXp7PBbS.js";const l={},u=p(`<h2 id="网络通信基本原理" tabindex="-1"><a class="header-anchor" href="#网络通信基本原理"><span>网络通信基本原理</span></a></h2><figure><img src="https://raw.githubusercontent.com/GodX-18/picBed/main/image-20230828105524242.png" alt="image-20230828105524242" tabindex="0" loading="lazy"><figcaption>image-20230828105524242</figcaption></figure><ul><li>主机之间需要有传输介质： <ul><li>传输介质是指用于连接不同主机的物理或逻辑媒体，它可以传递电磁信号或光信号。</li><li>常见的传输介质有双绞线、同轴电缆、光纤、无线电波等。</li></ul></li><li>主机上必须要有网卡设备： <ul><li>网卡设备是指安装在主机上的用于发送和接收数据的硬件设备，它可以将主机内部的数字信号转换为适合传输介质的模拟信号，或者反之。</li><li>常见的网卡设备有以太网卡、无线网卡、光纤网卡等。</li></ul></li><li>主机之间需要协商网络速率： <ul><li>网络速率是指在单位时间内通过网络传输的数据量，它决定了网络通信的效率和质量。</li><li>不同的传输介质和网卡设备支持不同的网络速率，因此主机之间需要通过一定的协议和算法来协商和匹配合适的网络速率，以避免数据丢失或错误。</li></ul></li></ul><h2 id="网络通讯方式" tabindex="-1"><a class="header-anchor" href="#网络通讯方式"><span>网络通讯方式</span></a></h2><h3 id="常见通讯方式" tabindex="-1"><a class="header-anchor" href="#常见通讯方式"><span>常见通讯方式</span></a></h3><ul><li>交换机通讯</li><li>路由器通讯</li></ul><h3 id="如何建立多台主机互连" tabindex="-1"><a class="header-anchor" href="#如何建立多台主机互连"><span>如何建立多台主机互连？</span></a></h3><figure><img src="https://raw.githubusercontent.com/GodX-18/picBed/main/image-20230828110840453.png" alt="image-20230828110840453" tabindex="0" loading="lazy"><figcaption>image-20230828110840453</figcaption></figure><h3 id="如何定位局域网中的其他主机" tabindex="-1"><a class="header-anchor" href="#如何定位局域网中的其他主机"><span>如何定位局域网中的其他主机？</span></a></h3><p>通过 Mac 地址来唯一表示一台主机</p><h3 id="交换机的接口数量有上限" tabindex="-1"><a class="header-anchor" href="#交换机的接口数量有上限"><span>交换机的接口数量有上限</span></a></h3><ul><li>交换机的接口数量是由其硬件设计和制造决定的，一般有8、16、24、48等不同的规格。</li><li>交换机的接口数量决定了它可以连接的主机数量，如果需要扩展网络规模，可以通过级联多台交换机来增加接口数量。</li></ul><h3 id="局域网存在大量主机会造成广播风暴" tabindex="-1"><a class="header-anchor" href="#局域网存在大量主机会造成广播风暴"><span>局域网存在大量主机会造成广播风暴</span></a></h3><p>局域网中的广播数据包是指目的地址为全1的数据包，它会被所有在同一个广播域内的主机接收和处理。如果局域网中存在大量的主机，那么每个主机都会收到大量的广播数据包，这会占用网络带宽和设备资源，影响正常的数据传输，甚至导致网络瘫痪，这就是广播风暴。为了避免广播风暴，可以通过划分子网、使用VLAN、使用交换机等方法来减少广播域的大小和数量。</p><div class="hint-container tip"><p class="hint-container-title">什么是广播风暴？</p><p>广播风暴是指当网络中存在大量的广播数据包，导致网络资源被占用，正常的数据传输受到影响，甚至导致网络瘫痪的现象。广播风暴的原因有多种，例如：</p><ul><li>网络设备的故障或配置错误，如使用集线器代替交换机，或者在交换机之间形成环路。</li><li>网络病毒或黑客软件的攻击，如利用ARP欺骗或蠕虫病毒发送大量的广播包。</li><li>网络划分不合理，如将过多的主机放在同一个广播域内，或者使用不必要的广播协议。</li><li>网络视频或其他应用的不当设置，如使用UDP协议以广播方式发送数据包。</li></ul><p>广播风暴的危害有以下几点：</p><ul><li>降低网络性能，消耗网络带宽，增加网络延迟和丢包率。</li><li>占用设备资源，导致交换机或路由器的CPU利用率过高，缓冲区溢出，甚至崩溃。</li><li>影响正常业务，导致网络服务中断，用户无法访问网络资源或应用。</li></ul></div><h3 id="网络通信过程中携带的信息" tabindex="-1"><a class="header-anchor" href="#网络通信过程中携带的信息"><span>网络通信过程中携带的信息</span></a></h3><figure><img src="https://raw.githubusercontent.com/GodX-18/picBed/main/image-20230828111707406.png" alt="image-20230828111707406" tabindex="0" loading="lazy"><figcaption>image-20230828111707406</figcaption></figure><ul><li>物理层：物理层是指用于传输数据的物理介质和设备，如电缆、光纤、无线电波等。物理层不会携带任何信息，只是负责将上层的数据转换为二进制的电信号或光信号，并在物理介质上进行传输。</li><li>数据链路层：数据链路层是指用于连接相邻节点的协议和设备，如以太网卡、交换机、MAC地址等。数据链路层会携带以下信息： <ul><li>帧头：包含了发送方和接收方的MAC地址（物理地址），以及数据类型和长度等信息。</li><li>数据：包含了上层（网络层）传递下来的数据，如IP数据报等。</li><li>帧尾：包含了校验码，用于检测数据是否在传输过程中出错或被篡改。</li></ul></li><li>网络层：网络层是指用于实现不同网络之间的互联和路由选择的协议和设备，如IP协议、路由器、IP地址等。网络层会携带以下信息： <ul><li>IP头：包含了发送方和接收方的IP地址（逻辑地址），以及数据报的版本、长度、标识、分片、生存时间、协议类型、首部校验和等信息。</li><li>数据：包含了上层（传输层）传递下来的数据，如TCP段或UDP报文等。</li></ul></li><li>传输层：传输层是指用于提供端到端的可靠或不可靠的数据传输服务的协议，如TCP协议和UDP协议等。传输层会携带以下信息： <ul><li>TCP头或UDP头：包含了发送方和接收方的端口号（应用程序标识），以及数据段或报文的序号、确认号、长度、校验和等信息。TCP头还包含了控制位，用于实现连接的建立、维护和终止，以及流量控制和拥塞控制等功能。</li><li>数据：包含了上层（应用层）传递下来的数据，如HTTP请求或响应等。</li></ul></li><li>应用层：应用层是指用于提供各种具体应用程序的网络服务的协议，如HTTP协议、FTP协议、DNS协议等。应用层会携带以下信息： <ul><li>应用头：包含了应用程序之间交换的控制信息，如请求方法、状态码、内容类型、内容长度等。</li><li>数据：包含了应用程序之间交换的具体内容，如网页文本、图片、文件等。</li></ul></li></ul><h2 id="网络层次模型" tabindex="-1"><a class="header-anchor" href="#网络层次模型"><span>网络层次模型</span></a></h2><h3 id="osi-七层模型" tabindex="-1"><a class="header-anchor" href="#osi-七层模型"><span>OSI 七层模型</span></a></h3><figure><img src="https://raw.githubusercontent.com/GodX-18/picBed/main/image-20230828141631903.png" alt="image-20230828141631903" tabindex="0" loading="lazy"><figcaption>image-20230828141631903</figcaption></figure><ul><li>应用层：用户与网络的接口</li><li>表示层：数据加密、转换、压缩</li><li>会话层：控制网络连接建立与终止</li><li>传输层：控制数据传输可靠性</li><li>网络层：确定目标网络</li><li>数据链路层：确定目标主机</li><li>物理层：各物理设备和标准</li></ul><h3 id="tcp-ip-模型" tabindex="-1"><a class="header-anchor" href="#tcp-ip-模型"><span>TCP/IP 模型</span></a></h3><p>TCP/IP是一组协议的代名词，它包括许多协议，组成了TCP/IP协议簇。它是把OSI七层模型简化成了五层模型。每一层都呼叫它的下一层所提供的网络来完成自己的需求</p><figure><img src="https://raw.githubusercontent.com/GodX-18/picBed/main/image-20230828141804341.png" alt="image-20230828141804341" tabindex="0" loading="lazy"><figcaption>image-20230828141804341</figcaption></figure><h3 id="数据封装解封装" tabindex="-1"><a class="header-anchor" href="#数据封装解封装"><span>数据封装解封装</span></a></h3><p>应用层产生的数据叫上层数据，往下走，在传输层加上TCP头部，打包后在网络层再加上IP头部，打包后在数据链路层再加上MAC头部，打包后在物理层封装成信号发出去。</p><p>传输到了目标主机，目标主机通过网口接收到信号，再进行解封装，一步一步的去掉相应的头部，最后得到上层数据即有效的数据。</p><p>发送方完成封装过程，接收方完成解封装过程。</p><p><strong>封装</strong></p><figure><img src="https://raw.githubusercontent.com/GodX-18/picBed/main/image-20230828134908785.png" alt="image-20230828134908785" tabindex="0" loading="lazy"><figcaption>image-20230828134908785</figcaption></figure><p><strong>解封装</strong></p><figure><img src="https://raw.githubusercontent.com/GodX-18/picBed/main/image-20230828135012873.png" alt="image-20230828135012873" tabindex="0" loading="lazy"><figcaption>image-20230828135012873</figcaption></figure><h2 id="tcp-三次握手与四次挥手" tabindex="-1"><a class="header-anchor" href="#tcp-三次握手与四次挥手"><span>TCP 三次握手与四次挥手</span></a></h2><h3 id="tcp-协议" tabindex="-1"><a class="header-anchor" href="#tcp-协议"><span>TCP 协议</span></a></h3><ul><li>TCP 属于传输层协议，基于端口，面向连接</li><li>主机之间想要通信需要先建立双向数据通道</li><li>TCP 用于处理实时通信</li><li>TCP 的握手和挥手本质上都是四次</li></ul><figure><img src="https://raw.githubusercontent.com/GodX-18/picBed/main/image-20230828143609635.png" alt="image-20230828143609635" tabindex="0" loading="lazy"><figcaption>image-20230828143609635</figcaption></figure><h3 id="常见控制字段" tabindex="-1"><a class="header-anchor" href="#常见控制字段"><span>常见控制字段</span></a></h3><ul><li>SYN = 1 表示请求建立连接</li><li>FIN = 1 表示请求断开连接</li><li>ACK = 1 表示数据信息确认</li></ul><h3 id="三次握手" tabindex="-1"><a class="header-anchor" href="#三次握手"><span>三次握手</span></a></h3><figure><img src="https://raw.githubusercontent.com/GodX-18/picBed/main/image-20230829092047496.png" alt="image-20230829092047496" tabindex="0" loading="lazy"><figcaption>image-20230829092047496</figcaption></figure><blockquote><p><strong>服务端向客户端发送消息时，会将确认和请求信息合并成一次发送，所以变成三次握手</strong></p></blockquote><figure><img src="https://raw.githubusercontent.com/GodX-18/picBed/main/image-20230829092111084.png" alt="image-20230829092111084" tabindex="0" loading="lazy"><figcaption>image-20230829092111084</figcaption></figure><h3 id="四次挥手" tabindex="-1"><a class="header-anchor" href="#四次挥手"><span>四次挥手</span></a></h3><figure><img src="https://raw.githubusercontent.com/GodX-18/picBed/main/image-20230829093424971.png" alt="image-20230829093424971" tabindex="0" loading="lazy"><figcaption>image-20230829093424971</figcaption></figure><div class="hint-container tip"><p class="hint-container-title">为什么不是三次挥手？</p><ul><li>一方面，四次挥手是为了保证数据的完整传输。在TCP协议中，数据的传输是双向的，即每个方向都需要发送和接收数据。因此，当一方（通常是客户端）要关闭连接时，它只能表示自己不再发送数据，但还需要接收对方（通常是服务器端）的数据。而对方可能还有数据需要处理和发送，因此不能立即同意关闭连接，而是先回复一个ACK报文，表示已经收到关闭请求。当对方发送完数据后，才能发送一个FIN报文，表示同意关闭连接，并请求对方确认。这样就保证了双方的数据都能完整地传输到对方 。</li><li>另一方面，四次挥手是为了防止连接的半开状态。在TCP协议中，如果只用三次挥手来终止连接，那么可能会出现一种情况：当一方发送FIN报文后，对方回复ACK报文并同时发送FIN报文，但这两个报文都在网络中丢失了。这样，一方就会认为对方已经同意关闭连接，并进入CLOSED状态，而对方则会认为一方还没有收到自己的FIN报文，并一直等待对方的回复，进入CLOSE_WAIT状态。这就导致了连接的半开状态，即一方认为连接已经关闭，而另一方认为连接还没有关闭 。为了避免这种情况，TCP协议规定了四次挥手的过程：当一方收到对方的FIN报文后，不会立即关闭连接，而是进入TIME_WAIT状态，并等待一段时间（约2MSL）后再关闭连接。这样就可以确保对方收到自己的ACK报文，并正常关闭连接 。</li></ul></div><h2 id="创建-tcp-通信" tabindex="-1"><a class="header-anchor" href="#创建-tcp-通信"><span>创建 TCP 通信</span></a></h2><p><strong>Net 模块实现了底层通信接口</strong></p><h3 id="通信过程" tabindex="-1"><a class="header-anchor" href="#通信过程"><span>通信过程</span></a></h3><ul><li>创建服务端：接收和回写客户端数据</li><li>创建客户端：发送和接收服务端数据</li><li>数据传输：内置服务事件和方法读写数据</li></ul><h3 id="通信事件-方法" tabindex="-1"><a class="header-anchor" href="#通信事件-方法"><span>通信事件&amp;方法</span></a></h3><ul><li>listening 事件：调用 server.listen 方法之后触发</li><li>connection 事件：新的连接建立时触发</li><li>close 事件：当 server 关闭时触发</li><li>error 事件：当错误出现的时候触发</li><li>data事件：当接收到数据的时触发该事件</li><li>write方法：在 socket 上发送数据，默认是 UT8 编码</li><li>end操作：当 socket 的一端发送 FIN 包时触发，结束可读端</li></ul><h3 id="服务端示例" tabindex="-1"><a class="header-anchor" href="#服务端示例"><span>服务端示例</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> net <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;net&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 创建服务端实例</span>
<span class="token keyword">const</span> server <span class="token operator">=</span> net<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">c</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;client connected&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  c<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;end&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;client disconnected&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  c<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;hello\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  c<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token constant">PORT</span> <span class="token operator">=</span> <span class="token number">8888</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">HOST</span> <span class="token operator">=</span> <span class="token string">&quot;localhost&quot;</span><span class="token punctuation">;</span>

server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token constant">PORT</span><span class="token punctuation">,</span> <span class="token constant">HOST</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;listening&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">GodX------&gt;log服务端已开启在</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">HOST</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">PORT</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 接收消息，回写消息</span>
server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;connection&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">socket</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  socket<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;data&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">chunk</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> msg <span class="token operator">=</span> chunk<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;GodX------&gt;log&quot;</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 回数据</span>
    socket<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;您好&quot;</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;close&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;GodX------&gt;log服务端关闭了&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;error&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token string">&quot;EADDRINUSE&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;GodX------&gt;log地址正在被使用&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;GodX------&gt;log&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="客户端示例" tabindex="-1"><a class="header-anchor" href="#客户端示例"><span>客户端示例</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> net <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;net&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> client <span class="token operator">=</span> net<span class="token punctuation">.</span><span class="token function">createConnection</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token number">8888</span><span class="token punctuation">,</span>
  <span class="token literal-property property">host</span><span class="token operator">:</span> <span class="token string">&quot;127.0.0.1&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

client<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;connect&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  client<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;拉勾教育&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

client<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;data&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">chunk</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  client<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>chunk<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

client<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;error&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;GodX------&gt;logerr&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

client<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;close&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;GodX------&gt;log客户端断开连接&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="tcp-粘包及解决" tabindex="-1"><a class="header-anchor" href="#tcp-粘包及解决"><span>TCP 粘包及解决</span></a></h2><h3 id="什么是-tcp-粘包" tabindex="-1"><a class="header-anchor" href="#什么是-tcp-粘包"><span>什么是 TCP 粘包</span></a></h3><p>因为TCP是面向流，没有边界，而操作系统在发送TCP数据时，会通过缓冲区来进行优化，例如缓冲区为1024个字节大小。</p><p>如果一次请求发送的数据量比较小，没达到缓冲区大小，TCP则会将多个请求合并为同一个请求进行发送，这就形成了粘包问题。</p><p><strong>案例</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 服务端</span>
<span class="token keyword">const</span> net <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;net&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 创建服务端实例</span>
<span class="token keyword">const</span> server <span class="token operator">=</span> net<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">socket</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">//监听data事件</span>
  socket<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;data&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> msg <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//打印数据</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;接收到数据：&quot;</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token constant">PORT</span> <span class="token operator">=</span> <span class="token number">8888</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">HOST</span> <span class="token operator">=</span> <span class="token string">&quot;localhost&quot;</span><span class="token punctuation">;</span>

server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token constant">PORT</span><span class="token punctuation">,</span> <span class="token constant">HOST</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;listening&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">GodX------&gt;log服务端已开启在</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">HOST</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">PORT</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;close&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;GodX------&gt;log服务端关闭了&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;error&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token string">&quot;EADDRINUSE&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;GodX------&gt;log地址正在被使用&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;GodX------&gt;log&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 客户端</span>
<span class="token keyword">const</span> net <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;net&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> client <span class="token operator">=</span> net<span class="token punctuation">.</span><span class="token function">createConnection</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token number">8888</span><span class="token punctuation">,</span>
  <span class="token literal-property property">host</span><span class="token operator">:</span> <span class="token string">&quot;127.0.0.1&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> dataArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;拉勾教育1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;拉勾教育2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;拉勾教育3&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;拉勾教育4&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

client<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;connect&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  client<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;拉勾教育1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  client<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;拉勾教育2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  client<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;拉勾教育3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  client<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;拉勾教育4&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

client<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;data&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">chunk</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  client<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>chunk<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

client<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;error&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;GodX------&gt;logerr&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

client<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;close&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;GodX------&gt;log客户端断开连接&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>期望打印</p><figure><img src="https://raw.githubusercontent.com/GodX-18/picBed/main/image-20230901155056485.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>实际上</p><figure><img src="https://raw.githubusercontent.com/GodX-18/picBed/main/image-20230901155142825.png" alt="image-20230901155142825" tabindex="0" loading="lazy"><figcaption>image-20230901155142825</figcaption></figure><h3 id="tcp-拥塞机制" tabindex="-1"><a class="header-anchor" href="#tcp-拥塞机制"><span>TCP 拥塞机制</span></a></h3><p>TCP拥塞机制是一种在网络中发生拥塞时，减少向网络中发送数据的速率，防止造成恶性循环；同时在网络空闲时，提高发送数据的速率，最大限度地利用网络资源的方法。</p><p>TCP拥塞机制主要由四个核心算法组成：“慢启动”（Slow Start）、“拥塞避免”（Congestion Avoidance）、“快速重传”（Fast Retransmit）、“快速恢复”（Fast Recovery）。</p><ul><li>慢启动：TCP建立连接后，开始以较小的拥塞窗口（cwnd）发送数据，每收到一个确认报文，就将cwnd加一，这样每个往返时间（RTT）内，cwnd就会翻倍，发送速率呈指数增长²。当cwnd达到一个慢启动阈值（ssthresh）时，就进入拥塞避免阶段³。</li><li>拥塞避免：TCP在这个阶段，每收到一个确认报文，就将cwnd加上一个常数，这样每个RTT内，cwnd就会线性增长，发送速率呈线性增长²。当发生超时重传或者快速重传时，就进入快速恢复阶段³。</li><li>快速重传：TCP在这个阶段，如果收到对同一个数据段的三次冗余确认（也就是四次确认），就认为这条数据段的下一条已经丢失，于是不管计时器是否超时，都直接重传这条数据段的下一条²。同时将ssthresh设置为当前cwnd的一半，并将cwnd设置为ssthresh加上三个MSS（最大报文段长度），然后进入快速恢复阶段³。</li><li>快速恢复：TCP在这个阶段，如果收到新的确认报文，则将cwnd设置为ssthresh，并回到拥塞避免阶段；如果收到冗余确认报文，则将cwnd加上一个MSS；如果发生超时重传，则将ssthresh设置为当前cwnd的一半，并将cwnd设置为一个MSS，并回到慢启动阶段³。</li></ul><p><strong>参考链接</strong></p>`,72),r={href:"https://www.cnblogs.com/tuyang1129/p/12439862.html",target:"_blank",rel:"noopener noreferrer"},k={href:"https://zhuanlan.zhihu.com/p/144273871.",target:"_blank",rel:"noopener noreferrer"},d={href:"https://zhuanlan.zhihu.com/p/431349472",target:"_blank",rel:"noopener noreferrer"},v=p(`<h3 id="数据的封包与拆包" tabindex="-1"><a class="header-anchor" href="#数据的封包与拆包"><span>数据的封包与拆包</span></a></h3><p>如果一次请求发送的数据量比较大，超过了缓冲区大小，TCP就会将其拆分为多次发送，这就是拆包。</p><figure><img src="https://raw.githubusercontent.com/GodX-18/picBed/main/image-20230901150047996.png" alt="image-20230901150047996" tabindex="0" loading="lazy"><figcaption>image-20230901150047996</figcaption></figure><h3 id="数据传输过程" tabindex="-1"><a class="header-anchor" href="#数据传输过程"><span>数据传输过程</span></a></h3><ul><li>进行数据编码，获取二进制数据包</li><li>按规则拆解数据，获取指定长度的数据</li></ul><h3 id="buffer-数据读写" tabindex="-1"><a class="header-anchor" href="#buffer-数据读写"><span>Buffer 数据读写</span></a></h3><ul><li>writelnt16BE：将 value 从指定位置写入</li><li>readint16BE：从指定位置开始读取数据</li></ul><h3 id="代码实现" tabindex="-1"><a class="header-anchor" href="#代码实现"><span>代码实现</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 定义一个名为 MyTransformCode 的类</span>
<span class="token keyword">class</span> <span class="token class-name">MyTransformCode</span> <span class="token punctuation">{</span>
  <span class="token comment">// 构造函数，用于初始化类的实例</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>packageHeaderLen <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment">// 消息头长度，单位是字节</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>serialNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 序列号，用于标识不同的数据包</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>serialLen <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 序列号占用的字节数</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 编码方法，用于将数据编码为一个 Buffer 对象</span>
  <span class="token function">encode</span><span class="token punctuation">(</span><span class="token parameter">data<span class="token punctuation">,</span> serialNum</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 统一格式，将数据转换为一个 Buffer 对象</span>
    <span class="token keyword">const</span> body <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 申请一片指定长度的内存空间，作为消息头</span>
    <span class="token keyword">const</span> headerBuf <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">alloc</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>packageHeaderLen<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 在消息头中写入序列号和数据长度，分别占用两个字节</span>
    headerBuf<span class="token punctuation">.</span><span class="token function">writeInt16BE</span><span class="token punctuation">(</span>serialNum <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span>serialNum<span class="token punctuation">)</span><span class="token punctuation">;</span>
    headerBuf<span class="token punctuation">.</span><span class="token function">writeInt16BE</span><span class="token punctuation">(</span>body<span class="token punctuation">.</span>length<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>serialLen<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 如果没有提供序列号，就使用 this.serialNum 的值，并且自增 1</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>serialNum <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      serialNum<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 将消息头和数据拼接起来，返回一个新的 Buffer 对象</span>
    <span class="token keyword">return</span> Buffer<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span>headerBuf<span class="token punctuation">,</span> body<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 解码方法，用于将一个 Buffer 对象解码为一个对象</span>
  <span class="token function">decode</span><span class="token punctuation">(</span><span class="token parameter">buffer</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 截取 Buffer 对象的前四个字节，作为消息头</span>
    <span class="token keyword">const</span> headerBuf <span class="token operator">=</span> buffer<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>packageHeaderLen<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 截取 Buffer 对象的剩余部分，作为数据</span>
    <span class="token keyword">const</span> bodyBuf <span class="token operator">=</span> buffer<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>packageHeaderLen<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 返回一个包含三个属性的对象：序列号、数据长度和数据内容</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">serialNum</span><span class="token operator">:</span> headerBuf<span class="token punctuation">.</span><span class="token function">readInt16BE</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token literal-property property">bodyLength</span><span class="token operator">:</span> headerBuf<span class="token punctuation">.</span><span class="token function">readInt16BE</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>serialLen<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token literal-property property">body</span><span class="token operator">:</span> bodyBuf<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 获取当前数据包长度的方法</span>
  <span class="token function">getPackageLen</span><span class="token punctuation">(</span><span class="token parameter">buffer</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 判断 Buffer 对象的长度是否小于消息头的长度</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>buffer<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>packageHeaderLen<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token comment">// 返回消息头的长度加上从消息头中读取的数据长度</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>packageHeaderLen <span class="token operator">+</span> buffer<span class="token punctuation">.</span><span class="token function">readInt16BE</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>serialLen<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 将这个类导出为一个模块，以便在其他文件中引用</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> MyTransformCode<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>测试</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> MyTransform <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;./myTransform.js&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> ts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyTransform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> str1 <span class="token operator">=</span> <span class="token string">&quot;生而无畏&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// console.log(&quot;GodX------&gt;log&quot;, Buffer.from(str1));</span>
<span class="token comment">// console.log(&quot;GodX------&gt;log&quot;, ts.encode(str1, 1));</span>

<span class="token keyword">let</span> encodeBuf <span class="token operator">=</span> ts<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// let a = ts.decode(encodeBuf);</span>
<span class="token comment">// console.log(&quot;GodX------&gt;log&quot;, a);</span>

<span class="token keyword">let</span> len <span class="token operator">=</span> ts<span class="token punctuation">.</span><span class="token function">getPackageLen</span><span class="token punctuation">(</span>encodeBuf<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;GodX------&gt;log&quot;</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4 + 12 = 16</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11),m={class:"hint-container tip"},b=n("p",{class:"hint-container-title"},"提示",-1),g={href:"https://www.bing.com/ck/a?!&&p=e2c8479356b891eeJmltdHM9MTY5MzU1NDc0OA&ptn=3&hsh=3&fclid=7f8ca0d5-489c-11ee-8291-ee135b11fa87&u=a1aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8zODcyNTY3MTM&ntb=1&bc=1&key=psc-underside&usparams=cvid%3a51D%7CBingProd%7CEC405307969D20915F78A81DE41337B8B6F1D2869E7F7A6E96F184541814CB28%5Ertone%3aCreative",target:"_blank",rel:"noopener noreferrer"},h={href:"https://www.bing.com/ck/a?!&&p=e2c8479356b891eeJmltdHM9MTY5MzU1NDc0OA&ptn=3&hsh=3&fclid=7f8ca0d5-489c-11ee-8291-ee135b11fa87&u=a1aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8zODcyNTY3MTM&ntb=1&bc=1&key=psc-underside&usparams=cvid%3a51D%7CBingProd%7CEC405307969D20915F78A81DE41337B8B6F1D2869E7F7A6E96F184541814CB28%5Ertone%3aCreative",target:"_blank",rel:"noopener noreferrer"},f=n("strong",null,"包头 + 包体",-1),q=n("p",null,"因此，这个代码能够解决数据粘包的问题，只要发送方和接收方都遵循这个类定义的协议格式。当然，这也要求发送方和接收方都使用相同的编码和解码方法，否则可能会出现乱码或者错误的结果。",-1),y=p(`<h3 id="利用封包解决粘包" tabindex="-1"><a class="header-anchor" href="#利用封包解决粘包"><span>利用封包解决粘包</span></a></h3><p><strong>服务端</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 引入net模块，用于创建TCP服务器和客户端</span>
<span class="token keyword">const</span> net <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;net&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 引入MyTransfrom模块，用于处理二进制数据包的编码和解码</span>
<span class="token keyword">const</span> MyTransfrom <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;./myTransform&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 定义一个变量，用于存储上次接收到的数据中剩余的部分</span>
<span class="token keyword">let</span> overageBuffer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token comment">// 创建一个MyTransfrom实例，用于调用其方法</span>
<span class="token keyword">let</span> ts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyTransfrom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 创建服务端实例</span>
<span class="token keyword">const</span> server <span class="token operator">=</span> net<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">socket</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">//监听data事件</span>
  socket<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;data&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 如果存在剩余数据，将其与本次接收到的数据拼接起来</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>overageBuffer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      data <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span>overageBuffer<span class="token punctuation">,</span> data<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 定义一个变量，用于存储数据包的长度</span>
    <span class="token keyword">let</span> packageLen <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">// 使用一个循环语句，不断获取数据包的长度，直到没有完整的数据包可以处理为止</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>packageLen <span class="token operator">=</span> ts<span class="token punctuation">.</span><span class="token function">getPackageLen</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 根据数据包的长度截取出一个完整的数据包</span>
      <span class="token keyword">const</span> packageCon <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> packageLen<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 将已经截取出来的数据包从原始数据流中删除</span>
      data <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>packageLen<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 对截取出来的数据包进行解码，并返回一个对象，该对象包含两个属性：body和serialNum</span>
      <span class="token keyword">const</span> ret <span class="token operator">=</span> ts<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>packageCon<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 打印出解码后的对象</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 对解码后的对象进行编码，并将编码后的数据包发送给客户端</span>
      socket<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>ts<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>ret<span class="token punctuation">.</span>body<span class="token punctuation">,</span> ret<span class="token punctuation">.</span>serialNum<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 将剩余的数据赋值给overageBuffer变量，等待下次接收更多的数据</span>
    overageBuffer <span class="token operator">=</span> data<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 定义服务器监听的端口号和主机名</span>
<span class="token keyword">const</span> <span class="token constant">PORT</span> <span class="token operator">=</span> <span class="token number">8888</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">HOST</span> <span class="token operator">=</span> <span class="token string">&quot;localhost&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 让服务器开始监听指定的端口和主机名</span>
server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token constant">PORT</span><span class="token punctuation">,</span> <span class="token constant">HOST</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 监听listening事件，该事件在服务器开始监听时触发</span>
server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;listening&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 打印出一条日志信息，表示服务器已经开启</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">GodX------&gt;log服务端已开启在</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">HOST</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">PORT</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="http-协议" tabindex="-1"><a class="header-anchor" href="#http-协议"><span>HTTP 协议</span></a></h2><h3 id="与-net-模块的区别" tabindex="-1"><a class="header-anchor" href="#与-net-模块的区别"><span>与 net 模块的区别</span></a></h3><p><strong>net对应传输层，http对应应用层。而且http依赖net。</strong></p><ul><li>net模块是基于TCP协议的，它提供了创建TCP服务器和客户端的方法，可以用于传输二进制数据流。net模块也支持IPC（进程间通信）。</li><li>http模块是基于HTTP协议的，它提供了创建HTTP服务器和客户端的方法，可以用于传输文本或JSON格式的数据。http模块也支持HTTPS（安全的HTTP）。</li><li>http模块实际上是继承了net模块，它在net模块的基础上封装了HTTP协议的解析和处理。http模块使用net模块创建TCP连接，然后使用httpParser解析HTTP请求和响应，并触发相应的事件。</li><li>net模块和http模块都使用stream（流）来处理数据，stream是nodejs中处理数据的一种抽象接口，它可以将数据分成多个片段进行读写 。stream有四种类型：Readable（可读），Writable（可写），Duplex（双向），Transform（转换）。</li></ul><h3 id="获取-http-请求信息" tabindex="-1"><a class="header-anchor" href="#获取-http-请求信息"><span>获取 http 请求信息</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;http&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;url&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">//   console.log(&quot;GodX------&gt;log请求进来了&quot;);</span>

  <span class="token comment">// 请求路径</span>
  <span class="token keyword">let</span> <span class="token punctuation">{</span> pathname<span class="token punctuation">,</span> query <span class="token punctuation">}</span> <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;GodX------&gt;log&quot;</span><span class="token punctuation">,</span> pathname<span class="token punctuation">,</span> query<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 请求方式</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;GodX------&gt;log&quot;</span><span class="token punctuation">,</span> req<span class="token punctuation">.</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 版本号</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;GodX------&gt;log&quot;</span><span class="token punctuation">,</span> req<span class="token punctuation">.</span>httpVersion<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 请求头</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;GodX------&gt;log&quot;</span><span class="token punctuation">,</span> req<span class="token punctuation">.</span>headers<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 请求体数据获取（post）</span>
  <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  req<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;data&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  req<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;end&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;GodX------&gt;log&quot;</span><span class="token punctuation">,</span> Buffer<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8888</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;GodX------&gt;log服务器启动了&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="设置-http-响应" tabindex="-1"><a class="header-anchor" href="#设置-http-响应"><span>设置 http 响应</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;http&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;GodX------&gt;log请求进来了&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// res 是可写流</span>
  <span class="token comment">// res.write(&quot;ok11&quot;);</span>
  <span class="token comment">// res.end();</span>
  <span class="token comment">// res.end(&quot;test ok &quot;);</span>
  res<span class="token punctuation">.</span>statusCode <span class="token operator">=</span> <span class="token number">200</span>
  res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Content-type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;text/html;charset=utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&quot;生而无畏&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8888</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;GodX------&gt;log服务器已启动。。。。。&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="客户端代理" tabindex="-1"><a class="header-anchor" href="#客户端代理"><span>客户端代理</span></a></h3><p><strong>post 请求获取 json 和 form格式数据</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 服务端</span>
<span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;http&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 引入http模块</span>
<span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;url&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 引入url模块</span>
<span class="token keyword">const</span> querystring <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;querystring&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 创建一个http服务器</span>
<span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 解析请求的url，得到路径名和查询字符串对象</span>
  <span class="token keyword">let</span> <span class="token punctuation">{</span> pathname<span class="token punctuation">,</span> query <span class="token punctuation">}</span> <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 在控制台打印路径名和查询字符串</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;GodX------&gt;log&quot;</span><span class="token punctuation">,</span> pathname<span class="token punctuation">,</span> query<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// post请求处理</span>
  <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 创建一个数组，用于存储请求数据</span>
  <span class="token comment">// 监听请求的data事件，将数据片段添加到数组中</span>
  req<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;data&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 监听请求的end事件，表示数据接收完毕</span>
  req<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;end&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 将数组中的数据片段合并为一个字符串</span>
    <span class="token keyword">let</span> obj <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 判断请求的内容类型是否为application/json</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">&quot;content-type&quot;</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&quot;application/json&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 将字符串解析为JSON对象</span>
      <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 给JSON对象添加一个属性add，值为&quot;zxnb&quot;</span>
      a<span class="token punctuation">.</span>add <span class="token operator">=</span> <span class="token string">&quot;zxnb&quot;</span><span class="token punctuation">;</span>
      <span class="token comment">// 将JSON对象转换为字符串，并作为响应数据发送给客户端</span>
      res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">&quot;content-type&quot;</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&quot;application/x-www-form-urlencoded&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> ret <span class="token operator">=</span> querystring<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
      res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 监听8888端口，启动服务器</span>
server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8888</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 在控制台打印服务器运行的信息</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;GodX------&gt;logserver is running&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 客户端</span>
<span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;http&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//* get 请求</span>
<span class="token comment">// http.get(</span>
<span class="token comment">//   {</span>
<span class="token comment">//     host: &quot;localhost&quot;,</span>
<span class="token comment">//     port: 8888,</span>
<span class="token comment">//     path: &quot;/home?a=1&quot;</span>
<span class="token comment">//   },</span>
<span class="token comment">//   (res) =&gt; {}</span>
<span class="token comment">// );</span>

<span class="token comment">//* post 请求</span>
<span class="token keyword">let</span> options <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">host</span><span class="token operator">:</span> <span class="token string">&quot;localhost&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token number">8888</span><span class="token punctuation">,</span>
  <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&quot;/home?a=1&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&quot;POST&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;Content-Type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;application/json&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> req <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>options<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  res<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;data&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  res<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;end&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;GodX------&gt;log11&quot;</span><span class="token punctuation">,</span> Buffer<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// req.end(&quot;生而无畏&quot;);</span>
req<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;zx&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
req<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&quot;a=1&amp;b=2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="代理客户端解决跨域" tabindex="-1"><a class="header-anchor" href="#代理客户端解决跨域"><span>代理客户端解决跨域</span></a></h3><p><strong>服务端和服务端之间不会产生跨域</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 外部服务器</span>
<span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;http&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">//   console.log(&quot;GodX------&gt;log请求进来了&quot;);</span>
  <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  req<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;data&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  req<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;end&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;GodX------&gt;log&quot;</span><span class="token punctuation">,</span> Buffer<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&quot;拿到了客户端的数据&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8888</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;GodX------&gt;log外部服务已启动。。。&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 通过代理服务器转发</span>
<span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;http&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> options <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">host</span><span class="token operator">:</span> <span class="token string">&quot;localhost&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token number">8888</span><span class="token punctuation">,</span>
  <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&quot;POST&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span> response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;GodX------&gt;log请求进来了&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> req <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>options<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    res<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;data&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    res<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;end&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> ret <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;text/html;charset=utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  req<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&quot;生而无畏&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">1234</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;GodX------&gt;log代理服务端启动&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="http-静态服务" tabindex="-1"><a class="header-anchor" href="#http-静态服务"><span>Http 静态服务</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 引入http, url, path, fs, mime模块</span>
<span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;http&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;url&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;path&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;fs&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> mime <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;mime&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 引入mime模块，用于获取文件的MIME类型</span>

<span class="token comment">// 创建一个http服务器</span>
<span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">//* 路径处理</span>
  <span class="token comment">// 解析请求的url，得到pathname和query对象</span>
  <span class="token keyword">let</span> <span class="token punctuation">{</span> pathname<span class="token punctuation">,</span> query <span class="token punctuation">}</span> <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 解码路径，防止中文乱码</span>
  pathname <span class="token operator">=</span> <span class="token function">decodeURIComponent</span><span class="token punctuation">(</span>pathname<span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token comment">// 使用path.join方法拼接绝对路径</span>
  <span class="token keyword">let</span> absPath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> pathname<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 在控制台打印绝对路径</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;GodX------&gt;log&quot;</span><span class="token punctuation">,</span> absPath<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">//* 目标资源状态处理</span>
  <span class="token comment">// 使用fs.stat方法获取目标资源的状态对象</span>
  fs<span class="token punctuation">.</span><span class="token function">stat</span><span class="token punctuation">(</span>absPath<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> statObj</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 如果出错，说明目标资源不存在，返回404状态码和Not Found信息</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      res<span class="token punctuation">.</span>statusCode <span class="token operator">=</span> <span class="token number">404</span><span class="token punctuation">;</span>
      res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&quot;Not Found&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 如果目标资源是一个文件，使用fs.readFile方法读取文件内容，并设置响应头和响应体</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>statObj<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>absPath<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// 使用mime.getType方法获取文件的MIME类型，并设置响应头的Content-Type字段</span>
        res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> mime<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span>absPath<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;; charset=utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token comment">// 如果目标资源是一个目录，尝试读取该目录下的index.html文件，并设置响应头和响应体</span>
      fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>absPath<span class="token punctuation">,</span> <span class="token string">&quot;index.html&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// 使用mime.getType方法获取目录的MIME类型，并设置响应头的Content-Type字段</span>
        res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> mime<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span>absPath<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;; charset=utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 监听8888端口，启动服务器，并在控制台打印服务器启动了的信息</span>
server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8888</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;GodX------&gt;log服务器启动了。。。&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="静态服务工具" tabindex="-1"><a class="header-anchor" href="#静态服务工具"><span>静态服务工具</span></a></h3><ol><li><p>初始化项目：<code>npm init --yes</code></p></li><li><p>修改 package.json</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;lgserver&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1.0.0&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;description&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;main&quot;</span><span class="token operator">:</span> <span class="token string">&quot;main.js&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;bin&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;lgserver&quot;</span><span class="token operator">:</span> <span class="token string">&quot;bin/www.js&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;test&quot;</span><span class="token operator">:</span> <span class="token string">&quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;keywords&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;author&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;license&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ISC&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;dependencies&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;commander&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^11.0.0&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>编写 <code>www.js</code>,安装 commander 依赖 处理命令行参数</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token hashbang comment">#! /usr/bin/env node</span>

<span class="token keyword">const</span> <span class="token punctuation">{</span> program <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;commander&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 引入commander模块，用于处理命令行参数</span>

<span class="token comment">// program.option(&quot;-p --port&quot;, &quot;set server port&quot;);</span>

<span class="token comment">// 配置信息</span>
<span class="token keyword">let</span> options <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token string-property property">&quot;-p --port &lt;dir&gt;&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">description</span><span class="token operator">:</span> <span class="token string">&quot;init server port&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 设置服务器端口的描述</span>
    <span class="token literal-property property">example</span><span class="token operator">:</span> <span class="token string">&quot;lgserver -p 3366&quot;</span> <span class="token comment">// 设置服务器端口的示例</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;-d --directory &lt;dir&gt;&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">description</span><span class="token operator">:</span> <span class="token string">&quot;init server directory&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 设置服务器目录的描述</span>
    <span class="token literal-property property">example</span><span class="token operator">:</span> <span class="token string">&quot;lgserver -d c:&quot;</span> <span class="token comment">// 设置服务器目录的示例</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">formatConfig</span><span class="token punctuation">(</span><span class="token parameter">configs<span class="token punctuation">,</span> cb</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>configs<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>key<span class="token punctuation">,</span> val<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">cb</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 遍历配置对象，执行回调函数</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">formatConfig</span><span class="token punctuation">(</span>options<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">cmd<span class="token punctuation">,</span> val</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  program<span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> val<span class="token punctuation">.</span>description<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 根据配置对象，添加命令行选项</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

program<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;--help&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Example: &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 当用户输入--help时，打印示例信息</span>
  <span class="token function">formatConfig</span><span class="token punctuation">(</span>options<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">cmd<span class="token punctuation">,</span> val</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>val<span class="token punctuation">.</span>example<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 打印每个选项的示例</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

program<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">&quot;lgserve&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 设置程序的名称</span>

<span class="token keyword">let</span> version <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;../package.json&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>version<span class="token punctuation">;</span> <span class="token comment">// 获取程序的版本号</span>
program<span class="token punctuation">.</span><span class="token function">version</span><span class="token punctuation">(</span>version<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 设置程序的版本号</span>

<span class="token keyword">let</span> cmdConfig <span class="token operator">=</span> program<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 解析命令行参数，返回一个对象</span>

<span class="token comment">// console.log(&quot;GodX------&gt;log&quot;, cmdConfig); // 打印解析后的对象</span>

<span class="token keyword">let</span> Server <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;../main.js&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">new</span> <span class="token class-name">Server</span><span class="token punctuation">(</span>cmdConfig<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>完善main.js ，启动 web 服务</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 引入http模块，用于创建服务器和处理请求</span>
<span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;http&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 引入url模块，用于解析请求的url</span>
<span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;url&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 引入path模块，用于处理文件路径</span>
<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;path&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 引入fs模块，用于操作文件系统，使用promises版本</span>
<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;fs&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>promises<span class="token punctuation">;</span>
<span class="token comment">// 引入fs模块的createReadStream方法，用于创建可读流</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> createReadStream <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;fs&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 引入mime模块，用于获取文件的mime类型</span>
<span class="token keyword">const</span> mime <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;mime&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 引入ejs模块，用于渲染模板文件</span>
<span class="token keyword">const</span> ejs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;ejs&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 引入util模块的promisify方法，用于将回调函数转换为promise对象</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> promisify <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;util&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 定义一个函数，用于合并默认配置和用户配置</span>
<span class="token keyword">function</span> <span class="token function">mergeConfig</span><span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token number">8888</span><span class="token punctuation">,</span> <span class="token comment">// 默认端口号为8888</span>
    <span class="token literal-property property">directory</span><span class="token operator">:</span> process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 默认目录为当前工作目录</span>
    <span class="token operator">...</span>config <span class="token comment">// 合并用户配置</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 定义一个类，表示服务器对象</span>
<span class="token keyword">class</span> <span class="token class-name">Server</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>config <span class="token operator">=</span> <span class="token function">mergeConfig</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用合并配置函数，获取最终配置</span>
    <span class="token comment">// console.log(&quot;GodX------&gt;log&quot;, this.config);</span>
  <span class="token punctuation">}</span>

  <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 创建一个http服务器，并传入一个处理请求的函数，绑定this指向</span>
    <span class="token keyword">let</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">serveHandle</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 监听配置中的端口号，并在启动后打印一条日志信息</span>
    server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>config<span class="token punctuation">.</span>port<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;GodX------&gt;log服务端已经启动了了....&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 定义一个异步函数，用于处理请求和响应</span>
  <span class="token keyword">async</span> <span class="token function">serveHandle</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 解析请求的url，并获取路径名</span>
    <span class="token keyword">let</span> <span class="token punctuation">{</span> pathname <span class="token punctuation">}</span> <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 处理中文路径，将其解码为正常字符</span>
    pathname <span class="token operator">=</span> <span class="token function">decodeURIComponent</span><span class="token punctuation">(</span>pathname<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 将路径名和配置中的目录拼接，得到绝对路径</span>
    <span class="token keyword">let</span> abspath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>config<span class="token punctuation">.</span>directory<span class="token punctuation">,</span> pathname<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token comment">// 使用fs模块的stat方法，获取文件或目录的状态对象</span>
      <span class="token keyword">let</span> statObj <span class="token operator">=</span> <span class="token keyword">await</span> fs<span class="token punctuation">.</span><span class="token function">stat</span><span class="token punctuation">(</span>abspath<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>statObj<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 如果是文件，则调用文件处理函数</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">fileHandle</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> abspath<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// 如果是目录，则调用fs模块的readdir方法，获取目录下的所有文件名或目录名</span>
        <span class="token keyword">let</span> dirs <span class="token operator">=</span> <span class="token keyword">await</span> fs<span class="token punctuation">.</span><span class="token function">readdir</span><span class="token punctuation">(</span>abspath<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 将文件名或目录名映射为一个对象数组，包含相对路径和名称属性</span>
        dirs <span class="token operator">=</span> dirs<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>pathname<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token literal-property property">dirs</span><span class="token operator">:</span> item
          <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 使用promisify方法，将ejs模块的renderFile方法转换为返回promise对象的函数</span>
        <span class="token keyword">let</span> renderFile <span class="token operator">=</span> <span class="token function">promisify</span><span class="token punctuation">(</span>ejs<span class="token punctuation">.</span>renderFile<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 获取当前路径的父路径</span>
        <span class="token keyword">let</span> parentpath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">dirname</span><span class="token punctuation">(</span>pathname<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 调用renderFile方法，传入模板文件的绝对路径和数据对象，得到渲染后的html字符串</span>
        <span class="token keyword">let</span> ret <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">renderFile</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;template.html&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">arr</span><span class="token operator">:</span> dirs<span class="token punctuation">,</span> <span class="token literal-property property">parent</span><span class="token operator">:</span> pathname <span class="token operator">!=</span> <span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> parentpath<span class="token punctuation">,</span> <span class="token literal-property property">title</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">basename</span><span class="token punctuation">(</span>abspath<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 将html字符串作为响应内容发送给客户端</span>
        res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 如果发生错误，则调用错误处理函数</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">errHandle</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 定义一个错误处理函数，接收请求、响应和错误对象作为参数</span>
  <span class="token function">errHandle</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;GodX------&gt;log&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 打印错误信息到控制台</span>
    res<span class="token punctuation">.</span>statusCode <span class="token operator">=</span> <span class="token number">404</span><span class="token punctuation">;</span> <span class="token comment">// 设置响应状态码为404</span>
    res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Content-type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;text/html;charset=utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 设置响应头的内容类型为html</span>
    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&quot;Not Found&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 设置响应内容为&quot;Not Found&quot;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 定义一个文件处理函数，接收请求、响应和文件绝对路径作为参数</span>
  <span class="token function">fileHandle</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> abspath</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    res<span class="token punctuation">.</span>statusCode <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span> <span class="token comment">// 设置响应状态码为200</span>
    <span class="token comment">// 设置响应头的内容类型为文件的mime类型，使用mime模块的getType方法获取</span>
    res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Content-type&quot;</span><span class="token punctuation">,</span> mime<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span>abspath<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;;charset=utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 创建一个可读流，传入文件绝对路径，将其与响应对象连接，实现文件的传输</span>
    <span class="token function">createReadStream</span><span class="token punctuation">(</span>abspath<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 将Server类导出，供其他模块使用</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> Server<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol>`,23);function w(T,j){const a=e("ExternalLinkIcon");return c(),i("div",null,[u,n("ul",null,[n("li",null,[n("a",r,[s("计算机网络——TCP的拥塞控制（超详细） - 特务依昂 - 博客园"),t(a)])]),n("li",null,[n("a",k,[s("万字详文：TCP 拥塞控制详解 - 知乎 - 知乎专栏"),t(a)])]),n("li",null,[n("a",d,[s("深入理解 TCP 拥塞控制 - 知乎 - 知乎专栏"),t(a)])])]),v,n("div",m,[b,n("p",null,[n("a",g,[s("数据粘包的问题是指在使用 TCP 协议进行网络通信时，发送方发送的多个数据包在接收方被合并为一个数据包的现象"),t(a)]),s("。这会导致接收方无法正确地区分数据包的边界，从而影响数据的解析和处理。")]),n("p",null,[n("a",h,[s("这个代码是一个用于对数据进行编码和解码的类，它使用了"),f,s("的格式"),t(a)]),s("。这种格式的优点是可以在包头中指定包体的大小，从而让接收方知道每个数据包的长度。这样，即使发送方连续发送多个数据包，接收方也可以根据包头中的信息来分割数据包，避免粘包的问题。")]),q]),y])}const x=o(l,[["render",w],["__file","03-通信.html.vue"]]),B=JSON.parse('{"path":"/%E5%A4%A7%E5%89%8D%E7%AB%AF/Nodejs%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/03-%E9%80%9A%E4%BF%A1.html","title":"通信","lang":"zh-CN","frontmatter":{"title":"通信","icon":"rss","order":3,"category":["前端"],"tag":["nodejs"],"description":"网络通信基本原理 image-20230828105524242image-20230828105524242 主机之间需要有传输介质： 传输介质是指用于连接不同主机的物理或逻辑媒体，它可以传递电磁信号或光信号。 常见的传输介质有双绞线、同轴电缆、光纤、无线电波等。 主机上必须要有网卡设备： 网卡设备是指安装在主机上的用于发送和接收数据的硬件设备，它可...","head":[["meta",{"property":"og:url","content":"https://godx-18.github.io/%E5%A4%A7%E5%89%8D%E7%AB%AF/Nodejs%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/03-%E9%80%9A%E4%BF%A1.html"}],["meta",{"property":"og:site_name","content":"烜"}],["meta",{"property":"og:title","content":"通信"}],["meta",{"property":"og:description","content":"网络通信基本原理 image-20230828105524242image-20230828105524242 主机之间需要有传输介质： 传输介质是指用于连接不同主机的物理或逻辑媒体，它可以传递电磁信号或光信号。 常见的传输介质有双绞线、同轴电缆、光纤、无线电波等。 主机上必须要有网卡设备： 网卡设备是指安装在主机上的用于发送和接收数据的硬件设备，它可..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.githubusercontent.com/GodX-18/picBed/main/image-20230828105524242.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-09-27T09:56:32.000Z"}],["meta",{"property":"article:author","content":"GodX"}],["meta",{"property":"article:tag","content":"nodejs"}],["meta",{"property":"article:modified_time","content":"2023-09-27T09:56:32.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"通信\\",\\"image\\":[\\"https://raw.githubusercontent.com/GodX-18/picBed/main/image-20230828105524242.png\\",\\"https://raw.githubusercontent.com/GodX-18/picBed/main/image-20230828110840453.png\\",\\"https://raw.githubusercontent.com/GodX-18/picBed/main/image-20230828111707406.png\\",\\"https://raw.githubusercontent.com/GodX-18/picBed/main/image-20230828141631903.png\\",\\"https://raw.githubusercontent.com/GodX-18/picBed/main/image-20230828141804341.png\\",\\"https://raw.githubusercontent.com/GodX-18/picBed/main/image-20230828134908785.png\\",\\"https://raw.githubusercontent.com/GodX-18/picBed/main/image-20230828135012873.png\\",\\"https://raw.githubusercontent.com/GodX-18/picBed/main/image-20230828143609635.png\\",\\"https://raw.githubusercontent.com/GodX-18/picBed/main/image-20230829092047496.png\\",\\"https://raw.githubusercontent.com/GodX-18/picBed/main/image-20230829092111084.png\\",\\"https://raw.githubusercontent.com/GodX-18/picBed/main/image-20230829093424971.png\\",\\"https://raw.githubusercontent.com/GodX-18/picBed/main/image-20230901155056485.png\\",\\"https://raw.githubusercontent.com/GodX-18/picBed/main/image-20230901155142825.png\\",\\"https://raw.githubusercontent.com/GodX-18/picBed/main/image-20230901150047996.png\\"],\\"dateModified\\":\\"2023-09-27T09:56:32.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"GodX\\",\\"url\\":\\"https://github.com/GodX-18\\"}]}"]]},"headers":[{"level":2,"title":"网络通信基本原理","slug":"网络通信基本原理","link":"#网络通信基本原理","children":[]},{"level":2,"title":"网络通讯方式","slug":"网络通讯方式","link":"#网络通讯方式","children":[{"level":3,"title":"常见通讯方式","slug":"常见通讯方式","link":"#常见通讯方式","children":[]},{"level":3,"title":"如何建立多台主机互连？","slug":"如何建立多台主机互连","link":"#如何建立多台主机互连","children":[]},{"level":3,"title":"如何定位局域网中的其他主机？","slug":"如何定位局域网中的其他主机","link":"#如何定位局域网中的其他主机","children":[]},{"level":3,"title":"交换机的接口数量有上限","slug":"交换机的接口数量有上限","link":"#交换机的接口数量有上限","children":[]},{"level":3,"title":"局域网存在大量主机会造成广播风暴","slug":"局域网存在大量主机会造成广播风暴","link":"#局域网存在大量主机会造成广播风暴","children":[]},{"level":3,"title":"网络通信过程中携带的信息","slug":"网络通信过程中携带的信息","link":"#网络通信过程中携带的信息","children":[]}]},{"level":2,"title":"网络层次模型","slug":"网络层次模型","link":"#网络层次模型","children":[{"level":3,"title":"OSI 七层模型","slug":"osi-七层模型","link":"#osi-七层模型","children":[]},{"level":3,"title":"TCP/IP 模型","slug":"tcp-ip-模型","link":"#tcp-ip-模型","children":[]},{"level":3,"title":"数据封装解封装","slug":"数据封装解封装","link":"#数据封装解封装","children":[]}]},{"level":2,"title":"TCP 三次握手与四次挥手","slug":"tcp-三次握手与四次挥手","link":"#tcp-三次握手与四次挥手","children":[{"level":3,"title":"TCP 协议","slug":"tcp-协议","link":"#tcp-协议","children":[]},{"level":3,"title":"常见控制字段","slug":"常见控制字段","link":"#常见控制字段","children":[]},{"level":3,"title":"三次握手","slug":"三次握手","link":"#三次握手","children":[]},{"level":3,"title":"四次挥手","slug":"四次挥手","link":"#四次挥手","children":[]}]},{"level":2,"title":"创建 TCP 通信","slug":"创建-tcp-通信","link":"#创建-tcp-通信","children":[{"level":3,"title":"通信过程","slug":"通信过程","link":"#通信过程","children":[]},{"level":3,"title":"通信事件&方法","slug":"通信事件-方法","link":"#通信事件-方法","children":[]},{"level":3,"title":"服务端示例","slug":"服务端示例","link":"#服务端示例","children":[]},{"level":3,"title":"客户端示例","slug":"客户端示例","link":"#客户端示例","children":[]}]},{"level":2,"title":"TCP 粘包及解决","slug":"tcp-粘包及解决","link":"#tcp-粘包及解决","children":[{"level":3,"title":"什么是 TCP 粘包","slug":"什么是-tcp-粘包","link":"#什么是-tcp-粘包","children":[]},{"level":3,"title":"TCP 拥塞机制","slug":"tcp-拥塞机制","link":"#tcp-拥塞机制","children":[]},{"level":3,"title":"数据的封包与拆包","slug":"数据的封包与拆包","link":"#数据的封包与拆包","children":[]},{"level":3,"title":"数据传输过程","slug":"数据传输过程","link":"#数据传输过程","children":[]},{"level":3,"title":"Buffer 数据读写","slug":"buffer-数据读写","link":"#buffer-数据读写","children":[]},{"level":3,"title":"代码实现","slug":"代码实现","link":"#代码实现","children":[]},{"level":3,"title":"利用封包解决粘包","slug":"利用封包解决粘包","link":"#利用封包解决粘包","children":[]}]},{"level":2,"title":"HTTP 协议","slug":"http-协议","link":"#http-协议","children":[{"level":3,"title":"与 net 模块的区别","slug":"与-net-模块的区别","link":"#与-net-模块的区别","children":[]},{"level":3,"title":"获取 http 请求信息","slug":"获取-http-请求信息","link":"#获取-http-请求信息","children":[]},{"level":3,"title":"设置 http 响应","slug":"设置-http-响应","link":"#设置-http-响应","children":[]},{"level":3,"title":"客户端代理","slug":"客户端代理","link":"#客户端代理","children":[]},{"level":3,"title":"代理客户端解决跨域","slug":"代理客户端解决跨域","link":"#代理客户端解决跨域","children":[]},{"level":3,"title":"Http 静态服务","slug":"http-静态服务","link":"#http-静态服务","children":[]},{"level":3,"title":"静态服务工具","slug":"静态服务工具","link":"#静态服务工具","children":[]}]}],"git":{"createdTime":1695808592000,"updatedTime":1695808592000,"contributors":[{"name":"GodX","email":"1046529973@qq.com","commits":1}]},"readingTime":{"minutes":25.81,"words":7744},"filePathRelative":"大前端/Nodejs全栈开发/03-通信.md","localizedDate":"2023年9月27日","excerpt":"<h2>网络通信基本原理</h2>\\n<figure><img src=\\"https://raw.githubusercontent.com/GodX-18/picBed/main/image-20230828105524242.png\\" alt=\\"image-20230828105524242\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>image-20230828105524242</figcaption></figure>\\n<ul>\\n<li>主机之间需要有传输介质：\\n<ul>\\n<li>传输介质是指用于连接不同主机的物理或逻辑媒体，它可以传递电磁信号或光信号。</li>\\n<li>常见的传输介质有双绞线、同轴电缆、光纤、无线电波等。</li>\\n</ul>\\n</li>\\n<li>主机上必须要有网卡设备：\\n<ul>\\n<li>网卡设备是指安装在主机上的用于发送和接收数据的硬件设备，它可以将主机内部的数字信号转换为适合传输介质的模拟信号，或者反之。</li>\\n<li>常见的网卡设备有以太网卡、无线网卡、光纤网卡等。</li>\\n</ul>\\n</li>\\n<li>主机之间需要协商网络速率：\\n<ul>\\n<li>网络速率是指在单位时间内通过网络传输的数据量，它决定了网络通信的效率和质量。</li>\\n<li>不同的传输介质和网卡设备支持不同的网络速率，因此主机之间需要通过一定的协议和算法来协商和匹配合适的网络速率，以避免数据丢失或错误。</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}');export{x as comp,B as data};
