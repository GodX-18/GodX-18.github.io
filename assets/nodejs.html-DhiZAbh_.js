import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as l,c as i,b as n,e as s,d as e,a as t}from"./app-oXp7PBbS.js";const c={},r=n("h2",{id:"v8-javascript-引擎",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#v8-javascript-引擎"},[n("span",null,"V8 - JavaScript 引擎")])],-1),u=n("ul",null,[n("li",null,"V8 是驱动 Google Chrome 的 JavaScript 引擎的名称"),n("li",null,"V8 提供了 JavaScript 执行的运行时环境"),n("li",null,"JavaScript 引擎独立于它所在的浏览器，这个关键特性促成了 Node.js 的兴起"),n("li",null,"Node.js 生态系统非常庞大，这要归功于 V8，它还支持桌面应用程序，例如 Electron 等项目")],-1),d=n("h3",{id:"其他-js-引擎",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#其他-js-引擎"},[n("span",null,"其他 JS 引擎")])],-1),k={href:"https://spidermonkey.dev/",target:"_blank",rel:"noopener noreferrer"},v=n("strong",null,"SpiderMonkey",-1),m={href:"https://developer.apple.com/documentation/javascriptcore",target:"_blank",rel:"noopener noreferrer"},h=n("strong",null,"JavaScriptCore",-1),g={href:"https://github.com/Microsoft/ChakraCore",target:"_blank",rel:"noopener noreferrer"},b=n("strong",null,"Chakra",-1),j={href:"https://support.microsoft.com/en-us/help/4501095/download-the-new-microsoft-edge-based-on-chromium",target:"_blank",rel:"noopener noreferrer"},f=t(`<h3 id="最求性能" tabindex="-1"><a class="header-anchor" href="#最求性能"><span>最求性能</span></a></h3><ul><li>V8 是用 C++ 编写的，并且在不断改进。</li><li>它是可移植的，可以在 Mac、Windows、Linux 和其他几个系统上运行。</li></ul><h2 id="如何退出-node-js-程序" tabindex="-1"><a class="header-anchor" href="#如何退出-node-js-程序"><span>如何退出 Node.js 程序</span></a></h2><hr><ul><li>当在控制台中运行程序时，可以用 <code>ctrl-C</code> 关闭它</li><li><code>process</code> 核心模块提供了一种方便的方法，允许您以编程方式退出 Node.js 程序：<code>process.exit()</code></li></ul><h2 id="如何从-nodejs-读取环境变量" tabindex="-1"><a class="header-anchor" href="#如何从-nodejs-读取环境变量"><span>如何从 Nodejs 读取环境变量</span></a></h2><hr><ul><li><p>Node.js 的 <code>process</code> 核心模块提供了 <code>env</code> 属性，该属性承载了在启动进程时设置的所有环境变量</p></li><li><p>这是访问 NODE_ENV 环境变量的示例，该环境变量默认情况下被设置为 <code>development</code></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token comment">// &quot;development&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p><em>注意：</em><code>process</code> <em>不需要 &quot;require&quot;，它是自动可用的。</em></p></blockquote></li><li><p>在脚本运行之前将其设置为 &quot;production&quot;，则可告诉 Node.js 这是生产环境</p></li><li><p>可以用相同的方式访问设置的任何自定义的环境变量</p></li></ul><h2 id="如何使用nodejs-repl" tabindex="-1"><a class="header-anchor" href="#如何使用nodejs-repl"><span>如何使用Nodejs REPL</span></a></h2><hr><ul><li>直接在终端中输入<code>node</code>，开启 REPL</li></ul><blockquote><p>注意：REPL 也被称为运行评估打印循环，是一种编程语言环境（主要是控制台窗口），它使用单个表达式作为用户输入，并在执行后将结果返回到控制台。</p></blockquote><ul><li><p>输入 JavaScript 类的名称，例如 <code>Number</code>，添加一个点号并按下 <code>tab</code>，可以查看该类的所有属性和方法<br><img src="https://raw.githubusercontent.com/GodX-18/picBed/main/image-20220907220328023.png" alt="image-20220907220328023" loading="lazy"></p></li><li><p>通过输入 <code>global.</code> 并按下 <code>tab</code>，可以检查可以访问的全局变量<br><img src="https://raw.githubusercontent.com/GodX-18/picBed/main/image-20220907220542983.png" alt="image-20220907220542983" loading="lazy"></p></li><li><p>点命令</p><ul><li><code>.help</code>: 显示点命令的帮助。</li><li><code>.editor</code>: 启用编辑器模式，可以轻松地编写多行 JavaScript 代码。当处于此模式时，按下 ctrl-D 可以运行编写的代码。</li><li><code>.break</code>: 当输入多行的表达式时，输入 <code>.break</code> 命令可以中止进一步的输入。相当于按下 ctrl-C。</li><li><code>.clear</code>: 将 REPL 上下文重置为空对象，并清除当前正在输入的任何多行的表达式。</li><li><code>.load</code>: 加载 JavaScript 文件（相对于当前工作目录）。</li><li><code>.save</code>: 将在 REPL 会话中输入的所有内容保存到文件（需指定文件名）。</li><li><code>.exit</code>: 退出 REPL（相当于按下两次 ctrl-C）</li></ul></li></ul><h2 id="nodejs-从命令行接收参数" tabindex="-1"><a class="header-anchor" href="#nodejs-从命令行接收参数"><span>Nodejs 从命令行接收参数</span></a></h2><h3 id="传参" tabindex="-1"><a class="header-anchor" href="#传参"><span>传参</span></a></h3><hr><p><strong>参数可以是独立的，也可以具有健和值</strong></p><p>示例</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>// 独立参数
<span class="token function">node</span> app.js zx

//带有键值的参数
<span class="token function">node</span> app.js <span class="token assign-left variable">name</span><span class="token operator">=</span>zx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="获取参数" tabindex="-1"><a class="header-anchor" href="#获取参数"><span>获取参数</span></a></h3><hr><p><strong>通过 Node.js 中内置的 <code>process</code> 对象的 argv 属性获取</strong></p><ul><li>第一个参数是 <code>node</code> 命令的完整路径。</li><li>第二个参数是正被执行的文件的完整路径。</li><li>所有其他的参数从第三个位置开始。</li></ul><p><strong>使用循环迭代所有的参数（包括 node 路径和文件路径）</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>process<span class="token punctuation">.</span>argv<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">val<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>index<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>val<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>创建一个排除了前两个参数的新数组来仅获取其他的参数</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> args <span class="token operator">=</span> process<span class="token punctuation">.</span>argv<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>如果参数没有键值可以直接访问</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,29),x=n("code",null,"args[0]",-1),_=n("code",null,"name=joe",-1),y={href:"https://www.npmjs.com/package/minimist",target:"_blank",rel:"noopener noreferrer"},q=n("code",null,"minimist",-1),w=t(`<div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 传参</span>
node app<span class="token punctuation">.</span>js <span class="token operator">--</span>name<span class="token operator">=</span>zx
<span class="token comment">// 取参</span>
<span class="token keyword">const</span> args <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;minimist&#39;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>argv<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
args<span class="token punctuation">[</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">]</span> <span class="token comment">//zx</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="使用-nodejs-到命令行接收输入" tabindex="-1"><a class="header-anchor" href="#使用-nodejs-到命令行接收输入"><span>使用 Nodejs 到命令行接收输入</span></a></h2><hr>`,3),S={href:"http://nodejs.cn/api/readline.html",target:"_blank",rel:"noopener noreferrer"},E=n("code",null,"readline",-1),N=n("code",null,"process.stdin",-1),T=t(`<ul><li>node 内置 readline 模块</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> readline <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;readline&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createInterface</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">input</span><span class="token operator">:</span> process<span class="token punctuation">.</span>stdin<span class="token punctuation">,</span>
    <span class="token literal-property property">output</span><span class="token operator">:</span> process<span class="token punctuation">.</span>stdout
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

readline<span class="token punctuation">.</span><span class="token function">question</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">你叫什么名字?</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">你好 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">!</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    readline<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),J={href:"https://github.com/SBoudrias/Inquirer.js",target:"_blank",rel:"noopener noreferrer"},I=t(`<p>可以使用 <code>npm install inquirer</code> 进行安装，然后复用上面的代码如下：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> inquirer <span class="token keyword">from</span> <span class="token string">&quot;inquirer&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> questions <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;input&quot;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&quot;你叫什么名字?&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;input&quot;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;age&quot;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&quot;年龄?&quot;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>

inquirer<span class="token punctuation">.</span><span class="token function">prompt</span><span class="token punctuation">(</span>questions<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">answers</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">你好 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>answers<span class="token punctuation">[</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">!</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>Inquirer.js 可以执行许多操作，例如询问多项选择、展示单选按钮、确认等。</p></li><li><p>所有的可选方案都值得了解，尤其是 Node.js 提供的内置方案，但是如果打算将 CLI 输入提升到更高的水平，则 Inquirer.js 是更优的选择。</p></li></ul>`,3),P=t(`<h2 id="使用-exports-从-nodejs-文件中公开功能" tabindex="-1"><a class="header-anchor" href="#使用-exports-从-nodejs-文件中公开功能"><span>使用 exports 从 Nodejs 文件中公开功能</span></a></h2><hr><p><strong>可以通过以下两种方式公开</strong></p><ol><li><p>exports</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 公开</span>
<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;zx&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">19</span>
<span class="token punctuation">}</span>
exports<span class="token punctuation">.</span>person <span class="token operator">=</span> a<span class="token punctuation">;</span>

<span class="token comment">// 获取</span>
onst <span class="token punctuation">{</span>person<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./a&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;GodX------&gt;log&#39;</span><span class="token punctuation">,</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>module.exports</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 公开</span>
<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;zx&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">19</span>
<span class="token punctuation">}</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> a<span class="token punctuation">;</span>

<span class="token comment">// 获取</span>
<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./a&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;GodX------&gt;log&#39;</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="npm-包管理器" tabindex="-1"><a class="header-anchor" href="#npm-包管理器"><span>npm 包管理器</span></a></h2><hr><ul><li><code>npm</code> 是 Node.js 标准的软件包管理器</li><li>npm 可以管理依赖的下载</li><li>它起初是作为下载和管理 Node.js 包依赖的方式，但其现在也已成为前端 JavaScript 中使用的工具</li></ul><p><strong>开发依赖和生产依赖</strong></p><ul><li><code>--save</code> 安装并添加条目到 <code>package.json</code> 文件的 dependencies。</li><li><code>--save-dev</code> 安装并添加条目到 <code>package.json</code> 文件的 devDependencies。</li><li>如果不指定，则默认安装到生产依赖</li></ul><blockquote><p>区别主要是，<code>devDependencies</code> 通常是开发的工具（例如测试的库），而 <code>dependencies</code> 则是与生产环境中的应用程序相关。</p></blockquote><p><strong>更新软件包</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 更新所有依赖包</span>
npm update
<span class="token comment">// 更新单个依赖包</span>
npm update <span class="token operator">&lt;</span><span class="token keyword">package</span><span class="token operator">-</span>name<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="npm-将软件包安装到哪里" tabindex="-1"><a class="header-anchor" href="#npm-将软件包安装到哪里"><span>npm 将软件包安装到哪里</span></a></h2><hr><p><strong>本地安装</strong></p><ul><li>软件包会被安装到当前文件树中的 <code>node_modules</code> 子文件夹下</li><li>在这种情况下，<code>npm</code> 还会在当前文件夹中存在的 <code>package.json</code> 文件的 <code>dependencies</code> 属性中添加 <code>lodash</code> 条目</li></ul><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>npm install lodash
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>全局安装</strong></p><ul><li>使用 <code>-g</code> 标志可以执行全局安装</li><li>在这种情况下，<code>npm</code> 不会将软件包安装到本地文件夹下，而是使用全局的位置</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>npm install <span class="token operator">-</span>g lodash
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>全局的位置</strong></p><ul><li><code>npm root -g</code> 命令会告知其在计算机上的确切</li></ul><h2 id="如何使用或执行-npm-安装的软件包" tabindex="-1"><a class="header-anchor" href="#如何使用或执行-npm-安装的软件包"><span>如何使用或执行 npm 安装的软件包</span></a></h2><hr><p><strong>我们用 cowsay 来做示例</strong></p><blockquote><p>cowsay 软件包提供了一个命令行程序，可以执行该程序以使母牛说些话（以及其他动物也可以说话）</p></blockquote><p><strong>可执行文件安装到哪里</strong></p><p>有一个隐藏的 .bin 文件夹，其中包含指向 cowsay 二进制文件的符号链接</p><p><strong>如何执行</strong></p><ul><li><p>可以输入 <code>./node_modules/.bin/cowsay</code> 来运行它</p></li><li><p>但是最新版本的 npm（自 5.2 起）中包含的 npx 是更好的选择。只需运行：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>npx cowsay wow
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>npx 会帮你找到程序包的位置</p></li><li><p>修改 page.json 文件</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;node&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1.0.0&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;description&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;main&quot;</span><span class="token operator">:</span> <span class="token string">&quot;index.js&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;test&quot;</span><span class="token operator">:</span> <span class="token string">&quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;wow&quot;</span><span class="token operator">:</span> <span class="token string">&quot;cowsay wow&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;author&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;license&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ISC&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;dependencies&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;cowsay&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^1.5.0&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;inquirer&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^9.1.1&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;lodash&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^4.17.21&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;progress&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^2.0.3&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="package-json-指南" tabindex="-1"><a class="header-anchor" href="#package-json-指南"><span>Package.json 指南</span></a></h2><hr><ul><li><code>version</code> 表明了当前的版本。</li><li><code>name</code> 设置了应用程序/软件包的名称。</li><li><code>description</code> 是应用程序/软件包的简短描述。</li><li><code>main</code> 设置了应用程序的入口点。</li><li><code>private</code> 如果设置为 <code>true</code>，则可以防止应用程序/软件包被意外地发布到 <code>npm</code>。</li><li><code>scripts</code> 定义了一组可以运行的 node 脚本。</li><li><code>dependencies</code> 设置了作为依赖安装的 <code>npm</code> 软件包的列表。</li><li><code>devDependencies</code> 设置了作为开发依赖安装的 <code>npm</code> 软件包的列表。</li><li><code>engines</code> 设置了此软件包/应用程序在哪个版本的 Node.js 上运行。</li><li><code>browserslist</code> 用于告知要支持哪些浏览器（及其版本）。</li></ul>`,33),C={href:"http://nodejs.cn/learn/the-package-json-guide",target:"_blank",rel:"noopener noreferrer"},L=t(`<h2 id="package-lock-json-文件" tabindex="-1"><a class="header-anchor" href="#package-lock-json-文件"><span>Package-lock.json 文件</span></a></h2><hr><p><strong>该文件旨在跟踪被安装的每个软件包的确切版本，以便产品可以以相同的方式被 100％ 复制（即使软件包的维护者更新了软件包）。</strong></p><ul><li>无需将 node_modules 文件夹（该文件夹通常很大）提交到 Git</li><li><code>package-lock.json</code> 文件需要被提交到 Git 仓库，以便被其他人获取</li><li>当运行 <code>npm update</code> 时，<code>package-lock.json</code> 文件中的依赖的版本会被更新</li></ul><h2 id="查看-npm-包安装的版本" tabindex="-1"><a class="header-anchor" href="#查看-npm-包安装的版本"><span>查看 npm 包安装的版本</span></a></h2><hr><p><strong>查看查看所有已安装的 npm 软件包（包括它们的依赖包）的最新版本</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> list
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>查看全局安装的软件包</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> list <span class="token parameter variable">-g</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>查看顶层的软件包（不包括依赖包）</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> list <span class="token parameter variable">--depth</span><span class="token operator">=</span><span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>通过指定名称来获取特定软件包的版本</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> list <span class="token punctuation">[</span>package_name<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>查看软件包在 npm 仓库上最新的可用版本</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> view <span class="token punctuation">[</span>package_name<span class="token punctuation">]</span> version
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="安装-npm-包的旧版本" tabindex="-1"><a class="header-anchor" href="#安装-npm-包的旧版本"><span>安装 npm 包的旧版本</span></a></h2><hr><p><strong>可以使用 <code>@</code> 语法来安装 npm 软件包的旧版本</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> <span class="token operator">&lt;</span>package<span class="token operator">&gt;</span>@<span class="token operator">&lt;</span>version<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>列出软件包所有的以前的版本</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> view <span class="token operator">&lt;</span>package<span class="token operator">&gt;</span> versions
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="将所有-nodejs-依赖更新到最新版本" tabindex="-1"><a class="header-anchor" href="#将所有-nodejs-依赖更新到最新版本"><span>将所有 Nodejs 依赖更新到最新版本</span></a></h2><hr><p><strong>发觉软件包的新版本</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> outdated
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>更新所有非主版本依赖</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> update
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>将所有软件包更新到新的主版本</strong></p><ol><li><p>全局安装<code>npm-check-updates</code> 软件包</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> npm-check-updates
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>运行以下代码</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">## 这会升级 package.json 文件的 dependencies 和 devDependencies 中的所有版本，以便 npm 可以安装新的主版本</span>
ncu <span class="token parameter variable">-u</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>运行更新</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> update
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><h2 id="使用-npm-的语义版本控制" tabindex="-1"><a class="header-anchor" href="#使用-npm-的语义版本控制"><span>使用 npm 的语义版本控制</span></a></h2><hr><p><strong>语义版本控制的概念很简单：所有的版本都有 3 个数字：<code>x.y.z</code></strong></p><ul><li>第一个数字是主版本。</li><li>第二个数字是次版本。</li><li>第三个数字是补丁版本。</li></ul><p><strong>当发布新的版本时，不仅仅是随心所欲地增加数字，还要遵循以下规则：</strong></p><ul><li>当进行不兼容的 API 更改时，则升级主版本。</li><li>当以向后兼容的方式添加功能时，则升级次版本。</li><li>当进行向后兼容的缺陷修复时，则升级补丁版本。</li></ul><p><strong>规则详情</strong></p><ul><li><code>^</code>: 只会执行不更改最左边非零数字的更新。 如果写入的是 <code>^0.13.0</code>，则当运行 <code>npm update</code> 时，可以更新到 <code>0.13.1</code>、<code>0.13.2</code> 等，但不能更新到 <code>0.14.0</code> 或更高版本。 如果写入的是 <code>^1.13.0</code>，则当运行 <code>npm update</code> 时，可以更新到 <code>1.13.1</code>、<code>1.14.0</code> 等，但不能更新到 <code>2.0.0</code> 或更高版本。</li><li><code>~</code>: 如果写入的是 <code>〜0.13.0</code>，则当运行 <code>npm update</code> 时，会更新到补丁版本：即 <code>0.13.1</code> 可以，但 <code>0.14.0</code> 不可以。</li><li><code>&gt;</code>: 接受高于指定版本的任何版本。</li><li><code>&gt;=</code>: 接受等于或高于指定版本的任何版本。</li><li><code>&lt;=</code>: 接受等于或低于指定版本的任何版本。</li><li><code>&lt;</code>: 接受低于指定版本的任何版本。</li><li><code>=</code>: 接受确切的版本。</li><li><code>-</code>: 接受一定范围的版本。例如：<code>2.1.0 - 2.6.2</code>。</li><li><code>||</code>: 组合集合。例如 <code>&lt; 2.1 || &gt; 2.6</code>。</li><li>无符号: 仅接受指定的特定版本（例如 <code>1.2.1</code>）。</li><li><code>latest</code>: 使用可用的最新版本。</li></ul><h2 id="nodejs-包运行器-npx" tabindex="-1"><a class="header-anchor" href="#nodejs-包运行器-npx"><span>Nodejs 包运行器 npx</span></a></h2><hr>`,40),V=n("li",null,[n("code",null,"npx"),s(" 是一个非常强大的命令，从 "),n("strong",null,"npm"),s(" 的 5.2 版本（发布于 2017 年 7 月）开始可用")],-1),A=n("em",null,"如果不想安装 npm，则可以",-1),G={href:"https://www.npmjs.com/package/npx",target:"_blank",rel:"noopener noreferrer"},B=n("li",null,[n("code",null,"npx"),s(" 可以运行使用 Node.js 构建并通过 npm 仓库发布的代码")],-1),D=t(`<h3 id="轻松地运行本地命令" tabindex="-1"><a class="header-anchor" href="#轻松地运行本地命令"><span>轻松地运行本地命令</span></a></h3><p>运行 <code>npx commandname</code> 会自动地在项目的 <code>node_modules</code> 文件夹中找到命令的正确引用，而无需知道确切的路径，也不需要在全局和用户路径中安装软件包</p><h3 id="无需安装的命令执行" tabindex="-1"><a class="header-anchor" href="#无需安装的命令执行"><span>无需安装的命令执行</span></a></h3><p><code>npx</code> 的另一个重要的特性是，无需先安装命令即可运行命令</p><p>例如：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">## npx 可以运行该 npm 命令，而无需在本地安装</span>
npx cowsay <span class="token string">&quot;你好&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>应用场景</strong></p><ul><li>运行 <code>vue</code> CLI 工具以创建新的应用程序并运行它们：<code>npx @vue/cli create my-vue-app</code>。</li><li>使用 <code>create-react-app</code> 创建新的 <code>React</code> 应用：<code>npx create-react-app my-react-app</code></li></ul><blockquote><p>当被下载完，则下载的代码会被擦除</p></blockquote><h3 id="使用不同的-node-js-版本运行代码" tabindex="-1"><a class="header-anchor" href="#使用不同的-node-js-版本运行代码"><span>使用不同的 Node.js 版本运行代码</span></a></h3>`,10),R=n("code",null,"@",-1),O={href:"https://www.npmjs.com/package/node",target:"_blank",rel:"noopener noreferrer"},z=n("code",null,"node",-1),F=t(`<div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>npx node@10 <span class="token parameter variable">-v</span> <span class="token comment">##v10.18.1</span>
npx node@12 <span class="token parameter variable">-v</span> <span class="token comment">##v12.14.1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>这有助于避免使用 <code>nvm</code> 之类的工具或其他 Node.js 版本管理工具</p></blockquote><h3 id="直接从-url-运行任意代码片段" tabindex="-1"><a class="header-anchor" href="#直接从-url-运行任意代码片段"><span>直接从 URL 运行任意代码片段</span></a></h3><ul><li><p><code>npx</code> 并不限制使用 npm 仓库上发布的软件包</p></li><li><p>可以运行位于 GitHub gist 中的代码，例如：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>npx https://gist.github.com/zkat/4bc19503fe9e9309e2bfaa2c58074d32
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><blockquote><p>当然，当运行不受控制的代码时，需要格外小心，因为强大的功能带来了巨大的责任</p></blockquote><h2 id="nodejs-事件循环" tabindex="-1"><a class="header-anchor" href="#nodejs-事件循环"><span>Nodejs 事件循环</span></a></h2><hr><ul><li>Node.js JavaScript 代码运行在单个线程上。 每次只处理一件事。</li><li>这个限制实际上非常有用，因为它大大简化了编程方式，而不必担心并发问题。</li><li>只需要注意如何编写代码，并避免任何可能阻塞线程的事情，例如同步的网络调用或无限的循环。</li><li>通常，在大多数浏览器中，每个浏览器选项卡都有一个事件循环，以使每个进程都隔离开，并避免使用无限的循环或繁重的处理来阻止整个浏览器的网页。</li></ul><h3 id="阻塞事件循环" tabindex="-1"><a class="header-anchor" href="#阻塞事件循环"><span>阻塞事件循环</span></a></h3><ul><li>任何花费太长时间才能将控制权返回给事件循环的 JavaScript 代码，都会阻塞页面中任何 JavaScript 代码的执行，甚至阻塞 UI 线程，并且用户无法单击浏览、滚动页面等。</li><li>JavaScript 中几乎所有的 I/O 基元都是非阻塞的。 网络请求、文件系统操作等。 被阻塞是个异常，这就是 JavaScript 如此之多基于回调（最近越来越多基于 promise 和 async/await）的原因。</li></ul><h3 id="调用堆栈" tabindex="-1"><a class="header-anchor" href="#调用堆栈"><span>调用堆栈</span></a></h3><ul><li>调用堆栈是一个 LIFO 队列（后进先出）</li><li>事件循环不断地检查调用堆栈，以查看是否需要运行任何函数</li><li>当执行时，它会将找到的所有函数调用添加到调用堆栈中，并按顺序执行每个函数</li></ul>`,12),X={href:"http://nodejs.cn/learn/the-nodejs-event-loop",target:"_blank",rel:"noopener noreferrer"},M=t(`<h3 id="消息队列" tabindex="-1"><a class="header-anchor" href="#消息队列"><span>消息队列</span></a></h3><ul><li>当调用 setTimeout() 时，浏览器或 Node.js 会启动定时器。 当定时器到期时（在此示例中会立即到期，因为将超时值设为 0），则回调函数会被放入“消息队列”中。</li><li>在消息队列中，用户触发的事件（如单击或键盘事件、或获取响应）也会在此排队，然后代码才有机会对其作出反应。 类似 <code>onLoad</code> 这样的 DOM 事件也如此。</li><li>事件循环会赋予调用堆栈优先级，它首先处理在调用堆栈中找到的所有东西，一旦其中没有任何东西，便开始处理消息队列中的东西</li><li>我们不必等待诸如 <code>setTimeout</code>、fetch、或其他的函数来完成它们自身的工作，因为它们是由浏览器提供的，并且位于它们自身的线程中。 例如，如果将 <code>setTimeout</code> 的超时设置为 2 秒，但不必等待 2 秒，等待发生在其他地方</li></ul><h3 id="es6作业队列" tabindex="-1"><a class="header-anchor" href="#es6作业队列"><span>ES6作业队列</span></a></h3><ul><li>ECMAScript 2015 引入了作业队列的概念，Promise 使用了该队列（也在 ES6/ES2015 中引入）。 这种方式会尽快地执行异步函数的结果，而不是放在调用堆栈的末尾</li><li>在当前函数结束之前 resolve 的 Promise 会在当前函数之后被立即执行</li><li>有个游乐园中过山车的比喻很好：消息队列将你排在队列的后面（在所有其他人的后面），你不得不等待你的回合，而工作队列则是快速通道票，这样你就可以在完成上一次乘车后立即乘坐另一趟车</li></ul><h2 id="了解-process-nexttick" tabindex="-1"><a class="header-anchor" href="#了解-process-nexttick"><span>了解 process.nextTick()</span></a></h2><hr><ul><li>每当事件循环进行一次完整的行程时，我们都将其称为一个滴答</li><li>当将一个函数传给 <code>process.nextTick()</code> 时，则指示引擎在当前操作结束（在下一个事件循环滴答开始之前）时调用此函数</li><li>事件循环正在忙于处理当前的函数代码,当该操作结束时，JS 引擎会运行在该操作期间传给 <code>nextTick</code> 调用的所有函数</li><li>这是可以告诉 JS 引擎异步地（在当前函数之后）处理函数的方式，但是尽快执行而不是将其排入队列</li><li>调用 <code>setTimeout(() =&gt; {}, 0)</code> 会在下一个滴答结束时执行该函数，比使用 <code>nextTick()</code>（其会优先执行该调用并在下一个滴答开始之前执行该函数）晚得多</li><li>当要确保在下一个事件循环迭代中代码已被执行，则使用 <code>nextTick()</code></li></ul><h2 id="了解-setimmediate" tabindex="-1"><a class="header-anchor" href="#了解-setimmediate"><span>了解 setImmediate（）</span></a></h2><hr><ul><li>setImmediate 可以作为 nextTick 的一个替代方案</li><li>作为 setImmediate() 参数传入的任何函数都是在事件循环的下一个迭代中执行的回调</li></ul><p><strong><code>setImmediate()</code> 与 <code>setTimeout(() =&gt; {}, 0)</code>（传入 0 毫秒的超时）、<code>process.nextTick()</code> 有何不同</strong></p><ul><li>传给 <code>process.nextTick()</code> 的函数会在事件循环的当前迭代中（当前操作结束之后）被执行。 这意味着它会始终在 <code>setTimeout</code> 和 <code>setImmediate</code> 之前执行</li><li>延迟 0 毫秒的 <code>setTimeout()</code> 回调与 <code>setImmediate()</code> 非常相似。 执行顺序取决于各种因素，但是它们都会在事件循环的下一个迭代中运行</li></ul><h2 id="探索-javascript-定时器" tabindex="-1"><a class="header-anchor" href="#探索-javascript-定时器"><span>探索 JavaScript 定时器</span></a></h2><hr><h3 id="settimeout" tabindex="-1"><a class="header-anchor" href="#settimeout"><span>setTimeout</span></a></h3><ul><li>当编写 JavaScript 代码时，可能希望延迟函数的执行。</li><li>这就是 setTimeout 的工作。 指定一个回调函数以供稍后执行，并指定希望它稍后运行的时间（以毫秒为单位）的值.</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 2 秒之后运行</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>

<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 50 毫秒之后运行</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="settimeout-传参" tabindex="-1"><a class="header-anchor" href="#settimeout-传参"><span>setTimeout 传参</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">myFunction</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">firstParam<span class="token punctuation">,</span> secondParam</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 做些事情</span>
<span class="token punctuation">}</span>

<span class="token comment">// 2 秒之后运行</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span>myFunction<span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">,</span> firstParam<span class="token punctuation">,</span> secondParam<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="清除定时器" tabindex="-1"><a class="header-anchor" href="#清除定时器"><span>清除定时器</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> id <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 应该在 2 秒之后运行</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>

<span class="token comment">// 改变主意了</span>
<span class="token function">clearTimeout</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="零延迟" tabindex="-1"><a class="header-anchor" href="#零延迟"><span>零延迟</span></a></h3><p>如果将超时延迟指定为 <code>0</code>，则回调函数会被尽快执行（但是是在当前函数执行之后）</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;后者 &#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39; 前者 &#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>会打印 <code>前者 后者</code>。</p>`,25),$=n("em",null,"某些浏览器（IE 和 Edge）实现的",-1),H=n("code",null,"setImmediate()",-1),U=n("em",null,"方法具有相同的确切功能，但是不是标准的，并且",-1),W={href:"https://caniuse.com/##feat=setimmediate",target:"_blank",rel:"noopener noreferrer"},Z=n("em",null,"。但是在 Node.js 中它是标准的函数。",-1),K=t(`<h3 id="setinterval" tabindex="-1"><a class="header-anchor" href="#setinterval"><span>setInterval</span></a></h3><p><code>setInterval</code> 是一个类似于 <code>setTimeout</code> 的函数，不同之处在于：它会在指定的特定时间间隔（以毫秒为单位）一直地运行回调函数，而不是只运行一次:</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 每 2 秒运行一次</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的函数每隔 2 秒运行一次，除非使用 <code>clearInterval</code> 告诉它停止（传入 <code>setInterval</code> 返回的间隔定时器 id）：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> id <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 每 2 秒运行一次</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>

<span class="token function">clearInterval</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通常在 <code>setInterval</code> 回调函数中调用 <code>clearInterval</code>，以使其自行判断是否应该再次运行或停止。 例如，此代码会运行某些事情，除非 <code>App.somethingIWait</code> 具有值 <code>arrived</code>：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> interval <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>App<span class="token punctuation">.</span>somethingIWait <span class="token operator">===</span> <span class="token string">&#39;arrived&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">clearInterval</span><span class="token punctuation">(</span>interval<span class="token punctuation">)</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 否则做些事情</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="递归的-settimeout" tabindex="-1"><a class="header-anchor" href="#递归的-settimeout"><span>递归的 setTimeout</span></a></h3><ol><li><p><code>setInterval</code> 每 n 毫秒启动一个函数，而无需考虑函数何时完成执行。</p></li><li><p>如果一个函数总是花费相同的时间，那就没问题</p></li><li><p>函数可能需要不同的执行时间，这具体取决于网络条件。</p></li><li><p>如果一个较长时间的执行会与下一次执行重叠</p></li><li><p>为了避免这种情况，可以在回调函数完成时安排要被调用的递归的 setTimeout：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">myFunction</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 做些事情</span>

  <span class="token function">setTimeout</span><span class="token punctuation">(</span>myFunction<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token function">setTimeout</span><span class="token punctuation">(</span>myFunction<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>Node.js 还提供 <code>setImmediate()</code>（相当于使用 <code>setTimeout(() =&gt; {}, 0)</code>），通常用于与 Node.js 事件循环配合使用。</p></blockquote></li></ol><h2 id="js-异步编程与回调" tabindex="-1"><a class="header-anchor" href="#js-异步编程与回调"><span>JS 异步编程与回调</span></a></h2><hr><h3 id="编程语言中的异步性" tabindex="-1"><a class="header-anchor" href="#编程语言中的异步性"><span>编程语言中的异步性</span></a></h3><ul><li>计算机在设计上是异步的。</li><li>在当前的用户计算机中，每个程序都运行于特定的时间段，然后停止执行，以让另一个程序继续执行。 这件事运行得如此之快，以至于无法察觉。</li><li>我们以为计算机可以同时运行许多程序，但这是一种错觉（在多处理器计算机上除外）。</li><li>程序在内部会使用中断，一种被发送到处理器以获取系统关注的信号。</li><li>程序是异步的且会暂停执行直到需要关注，这使得计算机可以同时执行其他操作。</li><li>当程序正在等待来自网络的响应时，则它无法在请求完成之前停止处理器。</li><li>通常，编程语言是同步的，有些会在语言或库中提供管理异步性的方法。</li><li>默认情况下，C、Java、C＃、PHP、Go、Ruby、Swift 和 Python 都是同步的。</li><li>其中一些语言通过使用线程（衍生新的进程）来处理异步操作。</li></ul><h3 id="javasript" tabindex="-1"><a class="header-anchor" href="#javasript"><span>JavaSript</span></a></h3><ul><li><p>JavaScript 默认情况下是同步的，并且是单线程的。 这意味着代码无法创建新的线程并且不能并行运行。</p></li><li><p>代码是依次执行的，例如：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token number">2</span>
<span class="token keyword">const</span> c <span class="token operator">=</span> a <span class="token operator">*</span> b
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>
<span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>但是 JavaScript 诞生于浏览器内部，一开始的主要工作是响应用户的操作，例如 <code>onClick</code>、<code>onMouseOver</code>、<code>onChange</code>、<code>onSubmit</code> 等。 使用同步的编程模型该如何做到这一点？</p><ul><li><p>答案就在于它的环境。 浏览器通过提供一组可以处理这种功能的 API 来提供了一种实现方式。</p></li><li><p>更近点，Node.js 引入了非阻塞的 I/O 环境，以将该概念扩展到文件访问、网络调用等。</p></li></ul></li></ul><h3 id="回调" tabindex="-1"><a class="header-anchor" href="#回调"><span>回调</span></a></h3><p>你不知道用户何时单击按钮。 因此，为点击事件定义了一个事件处理程序。 该事件处理程序会接受一个函数，该函数会在该事件被触发时被调用：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token constant">JS</span>
document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;button&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">//被点击</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这就是所谓的回调。</p><p>回调是一个简单的函数，会作为值被传给另一个函数，并且仅在事件发生时才被执行。 之所以这样做，是因为 JavaScript 具有顶级的函数，这些函数可以被分配给变量并传给其他函数（称为高阶函数）。</p><p>通常会将所有的客户端代码封装在 <code>window</code> 对象的 <code>load</code> 事件监听器中，其仅在页面准备就绪时才会运行回调函数：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token constant">JS</span>
window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;load&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">//window 已被加载。</span>
  <span class="token comment">//做需要做的。</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>回调无处不在，不仅在 DOM 事件中。</p><p>一个常见的示例是使用定时器：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token constant">JS</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 2 秒之后运行。</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>XHR 请求也接受回调，在此示例中，会将一个函数分配给一个属性，该属性会在发生特定事件（在该示例中，是请求状态的改变）时被调用：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token constant">JS</span>
<span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span> <span class="token operator">?</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span> <span class="token operator">:</span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;出错&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&#39;GET&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;http://nodejs.cn&#39;</span><span class="token punctuation">)</span>
xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="处理回调中的错误" tabindex="-1"><a class="header-anchor" href="#处理回调中的错误"><span>处理回调中的错误</span></a></h3><p>如何处理回调的错误？ 一种非常常见的策略是使用 Node.js 所采用的方式：任何回调函数中的第一个参数为错误对象（即错误优先的回调）。</p><p>如何处理回调的错误？ 一种非常常见的策略是使用 Node.js 所采用的方式：任何回调函数中的第一个参数为错误对象（即错误优先的回调）。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&#39;/文件.json&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>err <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//处理错误</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">}</span>

  <span class="token comment">//没有错误，则处理数据。</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="回调的问题" tabindex="-1"><a class="header-anchor" href="#回调的问题"><span>回调的问题</span></a></h3><p>回调适用于简单的场景！</p><p>但是，每个回调都可以添加嵌套的层级，并且当有很多回调时，代码就会很快变得非常复杂：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token constant">JS</span>
window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;load&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;button&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      items<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">//你的代码在这里。</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这只是一个简单的 4 个层级的代码，但还有更多层级的嵌套，这很不好。</p><p>该如何解决？</p><h3 id="回调的替代方法" tabindex="-1"><a class="header-anchor" href="#回调的替代方法"><span>回调的替代方法</span></a></h3><p>从 ES6 开始，JavaScript 引入了一些特性，可以帮助处理异步代码而不涉及使用回调：Promise（ES6）和 Async/Await（ES2017）。</p><h2 id="nodejs-事件触发器" tabindex="-1"><a class="header-anchor" href="#nodejs-事件触发器"><span>Nodejs 事件触发器</span></a></h2><hr><h3 id="基本使用" tabindex="-1"><a class="header-anchor" href="#基本使用"><span>基本使用</span></a></h3><p><strong>类似与 vue 中的 eventBus，对事件进行订阅和发布</strong></p><ol><li><p>初始化事件中心</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> EventEmitter <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;events&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> eventEmitter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventEmitter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>事件注册</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>eventEmitter<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;start&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;开始&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>触发注册的事件</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>eventEmitter<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;start&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><h3 id="带参数的事件" tabindex="-1"><a class="header-anchor" href="#带参数的事件"><span><strong>带参数的事件</strong></span></a></h3><p><strong>单个参数</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>eventEmitter<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;start&#39;</span><span class="token punctuation">,</span> <span class="token parameter">number</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">开始 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>number<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

eventEmitter<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;start&#39;</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>多个参数</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>eventEmitter<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;start&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">start<span class="token punctuation">,</span> end</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">从 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>start<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> 到 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>end<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

eventEmitter<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;start&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="其他方法" tabindex="-1"><a class="header-anchor" href="#其他方法"><span>其他方法</span></a></h3><p><strong>EventEmitter 对象还公开了其他几个与事件进行交互的方法，例如：</strong></p><ul><li><code>once()</code>: 添加单次监听器。</li><li><code>removeListener()</code> / <code>off()</code>: 从事件中移除事件监听器。</li><li><code>removeAllListeners()</code>: 移除事件的所有监听器。</li></ul>`,52),Q={href:"http://nodejs.cn/api/events.html",target:"_blank",rel:"noopener noreferrer"},Y=t(`<h2 id="搭建-http-服务器" tabindex="-1"><a class="header-anchor" href="#搭建-http-服务器"><span>搭建 HTTP 服务器</span></a></h2><hr><h3 id="基本用法" tabindex="-1"><a class="header-anchor" href="#基本用法"><span><strong>基本用法</strong></span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;http&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> port <span class="token operator">=</span> <span class="token number">3000</span>

<span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  res<span class="token punctuation">.</span>statusCode <span class="token operator">=</span> <span class="token number">200</span>
  res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&#39;Content-Type&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;text/plain;charset=utf8&#39;</span><span class="token punctuation">)</span>
  res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&#39;你好世界\\n&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">服务器运行在 http://localhost:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>port<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>简要分析一下</strong></p>`,5),nn={href:"http://nodejs.cn/api/http.html",target:"_blank",rel:"noopener noreferrer"},sn=n("code",null,"http",-1),an=n("li",null,[s("服务器被设置为在指定的 "),n("code",null,"3000"),s(" 端口上进行监听。 当服务器就绪时，则 "),n("code",null,"listen"),s(" 回调函数会被调用。")],-1),en={href:"http://nodejs.cn/api/http.html##http_event_request",target:"_blank",rel:"noopener noreferrer"},tn=n("code",null,"request",-1),pn={href:"http://nodejs.cn/api/http.html##http_class_http_incomingmessage",target:"_blank",rel:"noopener noreferrer"},on=n("code",null,"http.IncomingMessage",-1),ln={href:"http://nodejs.cn/api/http.html##http_class_http_serverresponse",target:"_blank",rel:"noopener noreferrer"},cn=n("code",null,"http.ServerResponse",-1),rn=n("ul",null,[n("li",null,[n("code",null,"request"),s(" 提供了请求的详细信息。 通过它可以访问请求头和请求的数据。")]),n("li",null,[n("code",null,"response"),s(" 用于构造要返回给客户端的数据。")])],-1),un=n("li",null,"设置 statusCode 属性为 200，以表明响应成功。",-1),dn=n("li",null,[s("最后结束并关闭响应，将内容作为参数添加到 "),n("code",null,"end()")],-1),kn=t(`<h2 id="使用-nodejs-发送-http-请求" tabindex="-1"><a class="header-anchor" href="#使用-nodejs-发送-http-请求"><span>使用 Nodejs 发送 http 请求</span></a></h2><hr><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token constant">JS</span>
<span class="token keyword">const</span> https <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;https&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">hostname</span><span class="token operator">:</span> <span class="token string">&#39;nodejs.cn&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token number">443</span><span class="token punctuation">,</span>
  <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;/todos&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;GET&#39;</span>
<span class="token punctuation">}</span>


<span class="token keyword">const</span> req <span class="token operator">=</span> https<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>options<span class="token punctuation">,</span> <span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">状态码: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>res<span class="token punctuation">.</span>statusCode<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>


  res<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">,</span> <span class="token parameter">d</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    process<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>


req<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span> <span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>


req<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="执行-post-请求" tabindex="-1"><a class="header-anchor" href="#执行-post-请求"><span>执行 POST 请求</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token constant">JS</span>
<span class="token keyword">const</span> https <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;https&#39;</span><span class="token punctuation">)</span>


<span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">todo</span><span class="token operator">:</span> <span class="token string">&#39;做点事情&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>


<span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">hostname</span><span class="token operator">:</span> <span class="token string">&#39;nodejs.cn&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token number">443</span><span class="token punctuation">,</span>
  <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;/todos&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;POST&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&#39;Content-Type&#39;</span><span class="token operator">:</span> <span class="token string">&#39;application/json&#39;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&#39;Content-Length&#39;</span><span class="token operator">:</span> data<span class="token punctuation">.</span>length
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token keyword">const</span> req <span class="token operator">=</span> https<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>options<span class="token punctuation">,</span> <span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">状态码: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>res<span class="token punctuation">.</span>statusCode<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>


  res<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">,</span> <span class="token parameter">d</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    process<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>


req<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span> <span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>


req<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
req<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="put-和-delete" tabindex="-1"><a class="header-anchor" href="#put-和-delete"><span>PUT 和 DELETE</span></a></h3><p>PUT 和 DELETE 请求使用相同的 POST 请求格式，只需更改 <code>options.method</code> 的值即可。</p>`,7);function vn(mn,hn){const a=o("ExternalLinkIcon");return l(),i("div",null,[r,u,d,n("ul",null,[n("li",null,[s("Firefox 具有 "),n("a",k,[v,e(a)])]),n("li",null,[s("Safari 具有 "),n("a",m,[h,e(a)]),s("（也称为 Nitro）")]),n("li",null,[s("Edge 最初基于 "),n("a",g,[b,e(a)]),s("，但最近"),n("a",j,[s("使用 Chromium 和 V8 引擎重建"),e(a)])])]),f,n("p",null,[n("strong",null,[s("如果参数带有键值则 "),x,s(" 是 "),_,s("，需要对其进行解析。 最好的方法是使用 "),n("a",y,[q,e(a)]),s(" 库，该库有助于处理参数,但是需要在每个参数名称之前使用双破折号：")])]),w,n("p",null,[n("strong",null,[s("从版本 7 开始，Node.js 提供了 "),n("a",S,[E,s(" 模块"),e(a)]),s("来执行以下操作：每次一行地从可读流（例如 "),N,s(" 流，在 Node.js 程序执行期间该流就是终端输入）获取输入")])]),T,n("ul",null,[n("li",null,[n("p",null,[n("a",J,[s("Inquirer.js 软件包"),e(a)]),s("则提供了更完整、更抽象的解决方案")]),I])]),P,n("blockquote",null,[n("p",null,[s("详见 "),n("a",C,[s("http://nodejs.cn/learn/the-package-json-guide"),e(a)])])]),L,n("ul",null,[V,n("li",null,[A,n("a",G,[s("安装 npx 为独立的软件包"),e(a)]),s("*")]),B]),D,n("p",null,[s("使用 "),R,s(" 指定版本，并将其与 "),n("a",O,[z,s(" npm 软件包"),e(a)]),s(" 结合使用：")]),F,n("blockquote",null,[n("p",null,[s("官网有个很好的例子阐释了事件循环的机制："),n("a",X,[s("http://nodejs.cn/learn/the-nodejs-event-loop"),e(a)])])]),M,n("blockquote",null,[n("p",null,[$,s(),H,s(),U,n("a",W,[s("在其他浏览器上不可用"),e(a)]),Z])]),K,n("p",null,[s("可以在事件模块的页面 "),n("a",Q,[s("http://nodejs.cn/api/events.html"),e(a)]),s(" 上阅读其所有详细信息。")]),Y,n("ul",null,[n("li",null,[s("首先，引入了 "),n("a",nn,[sn,s(" 模块"),e(a)]),s("，使用该模块来创建 HTTP 服务器")]),an,n("li",null,[s("传入的回调函数会在每次接收到请求时被执行。 每当接收到新的请求时，"),n("a",en,[tn,s(" 事件"),e(a)]),s("会被调用，并提供两个对象：一个请求（"),n("a",pn,[on,e(a)]),s(" 对象）和一个响应（"),n("a",ln,[cn,e(a)]),s(" 对象）。 "),rn]),un,dn]),kn])}const jn=p(c,[["render",vn],["__file","nodejs.html.vue"]]),fn=JSON.parse('{"path":"/%E5%A4%A7%E5%89%8D%E7%AB%AF/%E5%9F%BA%E7%A1%80/nodejs.html","title":"NodeJs","lang":"zh-CN","frontmatter":{"title":"NodeJs","icon":"nodeJS","order":2,"category":["前端"],"tag":["模块化","Parcel"],"description":"V8 - JavaScript 引擎 V8 是驱动 Google Chrome 的 JavaScript 引擎的名称 V8 提供了 JavaScript 执行的运行时环境 JavaScript 引擎独立于它所在的浏览器，这个关键特性促成了 Node.js 的兴起 Node.js 生态系统非常庞大，这要归功于 V8，它还支持桌面应用程序，例如 Elect...","head":[["meta",{"property":"og:url","content":"https://godx-18.github.io/%E5%A4%A7%E5%89%8D%E7%AB%AF/%E5%9F%BA%E7%A1%80/nodejs.html"}],["meta",{"property":"og:site_name","content":"烜"}],["meta",{"property":"og:title","content":"NodeJs"}],["meta",{"property":"og:description","content":"V8 - JavaScript 引擎 V8 是驱动 Google Chrome 的 JavaScript 引擎的名称 V8 提供了 JavaScript 执行的运行时环境 JavaScript 引擎独立于它所在的浏览器，这个关键特性促成了 Node.js 的兴起 Node.js 生态系统非常庞大，这要归功于 V8，它还支持桌面应用程序，例如 Elect..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.githubusercontent.com/GodX-18/picBed/main/image-20220907220328023.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-24T09:13:37.000Z"}],["meta",{"property":"article:author","content":"GodX"}],["meta",{"property":"article:tag","content":"模块化"}],["meta",{"property":"article:tag","content":"Parcel"}],["meta",{"property":"article:modified_time","content":"2023-03-24T09:13:37.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"NodeJs\\",\\"image\\":[\\"https://raw.githubusercontent.com/GodX-18/picBed/main/image-20220907220328023.png\\",\\"https://raw.githubusercontent.com/GodX-18/picBed/main/image-20220907220542983.png\\"],\\"dateModified\\":\\"2023-03-24T09:13:37.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"GodX\\",\\"url\\":\\"https://github.com/GodX-18\\"}]}"]]},"headers":[{"level":2,"title":"V8 - JavaScript 引擎","slug":"v8-javascript-引擎","link":"#v8-javascript-引擎","children":[{"level":3,"title":"其他 JS 引擎","slug":"其他-js-引擎","link":"#其他-js-引擎","children":[]},{"level":3,"title":"最求性能","slug":"最求性能","link":"#最求性能","children":[]}]},{"level":2,"title":"如何退出 Node.js 程序","slug":"如何退出-node-js-程序","link":"#如何退出-node-js-程序","children":[]},{"level":2,"title":"如何从 Nodejs 读取环境变量","slug":"如何从-nodejs-读取环境变量","link":"#如何从-nodejs-读取环境变量","children":[]},{"level":2,"title":"如何使用Nodejs REPL","slug":"如何使用nodejs-repl","link":"#如何使用nodejs-repl","children":[]},{"level":2,"title":"Nodejs 从命令行接收参数","slug":"nodejs-从命令行接收参数","link":"#nodejs-从命令行接收参数","children":[{"level":3,"title":"传参","slug":"传参","link":"#传参","children":[]},{"level":3,"title":"获取参数","slug":"获取参数","link":"#获取参数","children":[]}]},{"level":2,"title":"使用 Nodejs 到命令行接收输入","slug":"使用-nodejs-到命令行接收输入","link":"#使用-nodejs-到命令行接收输入","children":[]},{"level":2,"title":"使用 exports 从 Nodejs 文件中公开功能","slug":"使用-exports-从-nodejs-文件中公开功能","link":"#使用-exports-从-nodejs-文件中公开功能","children":[]},{"level":2,"title":"npm 包管理器","slug":"npm-包管理器","link":"#npm-包管理器","children":[]},{"level":2,"title":"npm 将软件包安装到哪里","slug":"npm-将软件包安装到哪里","link":"#npm-将软件包安装到哪里","children":[]},{"level":2,"title":"如何使用或执行 npm 安装的软件包","slug":"如何使用或执行-npm-安装的软件包","link":"#如何使用或执行-npm-安装的软件包","children":[]},{"level":2,"title":"Package.json 指南","slug":"package-json-指南","link":"#package-json-指南","children":[]},{"level":2,"title":"Package-lock.json 文件","slug":"package-lock-json-文件","link":"#package-lock-json-文件","children":[]},{"level":2,"title":"查看 npm 包安装的版本","slug":"查看-npm-包安装的版本","link":"#查看-npm-包安装的版本","children":[]},{"level":2,"title":"安装 npm 包的旧版本","slug":"安装-npm-包的旧版本","link":"#安装-npm-包的旧版本","children":[]},{"level":2,"title":"将所有 Nodejs 依赖更新到最新版本","slug":"将所有-nodejs-依赖更新到最新版本","link":"#将所有-nodejs-依赖更新到最新版本","children":[]},{"level":2,"title":"使用 npm 的语义版本控制","slug":"使用-npm-的语义版本控制","link":"#使用-npm-的语义版本控制","children":[]},{"level":2,"title":"Nodejs 包运行器 npx","slug":"nodejs-包运行器-npx","link":"#nodejs-包运行器-npx","children":[{"level":3,"title":"轻松地运行本地命令","slug":"轻松地运行本地命令","link":"#轻松地运行本地命令","children":[]},{"level":3,"title":"无需安装的命令执行","slug":"无需安装的命令执行","link":"#无需安装的命令执行","children":[]},{"level":3,"title":"使用不同的 Node.js 版本运行代码","slug":"使用不同的-node-js-版本运行代码","link":"#使用不同的-node-js-版本运行代码","children":[]},{"level":3,"title":"直接从 URL 运行任意代码片段","slug":"直接从-url-运行任意代码片段","link":"#直接从-url-运行任意代码片段","children":[]}]},{"level":2,"title":"Nodejs 事件循环","slug":"nodejs-事件循环","link":"#nodejs-事件循环","children":[{"level":3,"title":"阻塞事件循环","slug":"阻塞事件循环","link":"#阻塞事件循环","children":[]},{"level":3,"title":"调用堆栈","slug":"调用堆栈","link":"#调用堆栈","children":[]},{"level":3,"title":"消息队列","slug":"消息队列","link":"#消息队列","children":[]},{"level":3,"title":"ES6作业队列","slug":"es6作业队列","link":"#es6作业队列","children":[]}]},{"level":2,"title":"了解 process.nextTick()","slug":"了解-process-nexttick","link":"#了解-process-nexttick","children":[]},{"level":2,"title":"了解 setImmediate（）","slug":"了解-setimmediate","link":"#了解-setimmediate","children":[]},{"level":2,"title":"探索 JavaScript 定时器","slug":"探索-javascript-定时器","link":"#探索-javascript-定时器","children":[{"level":3,"title":"setTimeout","slug":"settimeout","link":"#settimeout","children":[]},{"level":3,"title":"setTimeout 传参","slug":"settimeout-传参","link":"#settimeout-传参","children":[]},{"level":3,"title":"清除定时器","slug":"清除定时器","link":"#清除定时器","children":[]},{"level":3,"title":"零延迟","slug":"零延迟","link":"#零延迟","children":[]},{"level":3,"title":"setInterval","slug":"setinterval","link":"#setinterval","children":[]},{"level":3,"title":"递归的 setTimeout","slug":"递归的-settimeout","link":"#递归的-settimeout","children":[]}]},{"level":2,"title":"JS 异步编程与回调","slug":"js-异步编程与回调","link":"#js-异步编程与回调","children":[{"level":3,"title":"编程语言中的异步性","slug":"编程语言中的异步性","link":"#编程语言中的异步性","children":[]},{"level":3,"title":"JavaSript","slug":"javasript","link":"#javasript","children":[]},{"level":3,"title":"回调","slug":"回调","link":"#回调","children":[]},{"level":3,"title":"处理回调中的错误","slug":"处理回调中的错误","link":"#处理回调中的错误","children":[]},{"level":3,"title":"回调的问题","slug":"回调的问题","link":"#回调的问题","children":[]},{"level":3,"title":"回调的替代方法","slug":"回调的替代方法","link":"#回调的替代方法","children":[]}]},{"level":2,"title":"Nodejs 事件触发器","slug":"nodejs-事件触发器","link":"#nodejs-事件触发器","children":[{"level":3,"title":"基本使用","slug":"基本使用","link":"#基本使用","children":[]},{"level":3,"title":"带参数的事件","slug":"带参数的事件","link":"#带参数的事件","children":[]},{"level":3,"title":"其他方法","slug":"其他方法","link":"#其他方法","children":[]}]},{"level":2,"title":"搭建 HTTP 服务器","slug":"搭建-http-服务器","link":"#搭建-http-服务器","children":[{"level":3,"title":"基本用法","slug":"基本用法","link":"#基本用法","children":[]}]},{"level":2,"title":"使用 Nodejs 发送 http 请求","slug":"使用-nodejs-发送-http-请求","link":"#使用-nodejs-发送-http-请求","children":[{"level":3,"title":"执行 POST 请求","slug":"执行-post-请求","link":"#执行-post-请求","children":[]},{"level":3,"title":"PUT 和 DELETE","slug":"put-和-delete","link":"#put-和-delete","children":[]}]}],"git":{"createdTime":1678348093000,"updatedTime":1679649217000,"contributors":[{"name":"GodX","email":"1046529973@qq.com","commits":2}]},"readingTime":{"minutes":22.14,"words":6643},"filePathRelative":"大前端/基础/nodejs.md","localizedDate":"2023年3月9日","excerpt":"<h2>V8 - JavaScript 引擎</h2>\\n<ul>\\n<li>V8 是驱动 Google Chrome 的 JavaScript 引擎的名称</li>\\n<li>V8 提供了 JavaScript 执行的运行时环境</li>\\n<li>JavaScript 引擎独立于它所在的浏览器，这个关键特性促成了 Node.js 的兴起</li>\\n<li>Node.js 生态系统非常庞大，这要归功于 V8，它还支持桌面应用程序，例如 Electron 等项目</li>\\n</ul>\\n<h3>其他 JS 引擎</h3>\\n<ul>\\n<li>Firefox 具有 <a href=\\"https://spidermonkey.dev/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><strong>SpiderMonkey</strong></a></li>\\n<li>Safari 具有 <a href=\\"https://developer.apple.com/documentation/javascriptcore\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><strong>JavaScriptCore</strong></a>（也称为 Nitro）</li>\\n<li>Edge 最初基于 <a href=\\"https://github.com/Microsoft/ChakraCore\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><strong>Chakra</strong></a>，但最近<a href=\\"https://support.microsoft.com/en-us/help/4501095/download-the-new-microsoft-edge-based-on-chromium\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">使用 Chromium 和 V8 引擎重建</a></li>\\n</ul>","autoDesc":true}');export{jn as comp,fn as data};
