import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as l,o as p,c as o,b as n,e as s,d as t,a}from"./app-oXp7PBbS.js";const r={},c=a(`<h2 id="什么是规范化标准" tabindex="-1"><a class="header-anchor" href="#什么是规范化标准"><span>什么是规范化标准</span></a></h2><p><strong>规范化是我们践行前端工程化中重要的一部分</strong></p><h2 id="规范化标准的意义" tabindex="-1"><a class="header-anchor" href="#规范化标准的意义"><span>规范化标准的意义</span></a></h2><ul><li>软件开发需要多人协同</li><li>不同开发者具有不同的编码习惯和喜好</li><li>不同的喜好增加项目维护成本</li><li>每个项目或者团队需要明确统一的标准</li></ul><h2 id="哪里需要规范化标准" tabindex="-1"><a class="header-anchor" href="#哪里需要规范化标准"><span>哪里需要规范化标准</span></a></h2><ul><li>代码、文档、甚至是提交日志</li><li>开发过程中认为编写的成果物</li><li>代码标准化规范最为重要</li></ul><h2 id="实施规范化标准的方法" tabindex="-1"><a class="header-anchor" href="#实施规范化标准的方法"><span>实施规范化标准的方法</span></a></h2><ul><li>编码前人为的标准约定（不可靠）</li><li>通过工具实现 Lint</li></ul><h2 id="常见的规范化实现方式" tabindex="-1"><a class="header-anchor" href="#常见的规范化实现方式"><span>常见的规范化实现方式</span></a></h2><ul><li>ESLint 工具使用</li><li>定制 ESLint 校验规则</li><li>ESLint 对 TypeScript 的支持</li><li>ESLint 结合自动化工具或者 Webpack</li><li>基于 ESLint 的衍生工具</li><li>Stylelint 工具的使用</li></ul><h2 id="eslint" tabindex="-1"><a class="header-anchor" href="#eslint"><span>ESLint</span></a></h2><h3 id="基本介绍" tabindex="-1"><a class="header-anchor" href="#基本介绍"><span>基本介绍</span></a></h3><ul><li>最为主流的 JavaScript Lint 工具 监测JS代码质量</li><li>ESLint很容易统一开发者的编码风格</li><li>ESLint 可以帮助开发者提升编码能力</li></ul><h3 id="安装" tabindex="-1"><a class="header-anchor" href="#安装"><span>安装</span></a></h3><ul><li><p>初始化项目</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">yarn</span> init <span class="token parameter variable">--yes</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>安装 ESLint 模块为开发依赖</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">yarn</span> <span class="token function">add</span> eslint <span class="token parameter variable">-D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>通过 CLI命令验证安装结果</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">yarn</span> eslint <span class="token parameter variable">--version</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><h3 id="快速上手" tabindex="-1"><a class="header-anchor" href="#快速上手"><span>快速上手</span></a></h3><ul><li><p>编写 “问题” 代码</p></li><li><p>完成 eslint 使用配置</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 初始化配置文件</span>
<span class="token function">yarn</span> eslint <span class="token parameter variable">--init</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>使用 eslint 执行检测</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">yarn</span> eslint  <span class="token operator">&lt;</span>需要检测的文件路径<span class="token operator">&gt;</span> <span class="token parameter variable">--fix</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>当代码中有语法问题时，eslint 是不能进行检查问题代码*（比如变量未定义、定义的变量未使用等等）*和代码风格的</p></div><h3 id="配置文件" tabindex="-1"><a class="header-anchor" href="#配置文件"><span>配置文件</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">env</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// 作用：根据所在环境判断全局成员是否可用</span>
    <span class="token literal-property property">browser</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 标记代码最终运行的环境，因为不同环境下存在不同的全局成员不同，比如在 node 环境中不能够使用 window 、document 等全局变量</span>
    <span class="token literal-property property">es2021</span><span class="token operator">:</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token keyword">extends</span><span class="token operator">:</span> <span class="token string">&#39;standard&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">overrides</span><span class="token operator">:</span> <span class="token punctuation">[</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">parserOptions</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">ecmaVersion</span><span class="token operator">:</span> <span class="token string">&#39;latest&#39;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>env的配置选项</strong></p><p>以下配置选项并不互斥，比如可以同时配置 node、browser 为 true</p><figure><img src="https://raw.githubusercontent.com/GodX-18/picBed/main/image-20221122111337969.png" alt="image-20221122111337969" tabindex="0" loading="lazy"><figcaption>image-20221122111337969</figcaption></figure><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>如果你使用了社区中的标准规范，比如 standards。其中的配置选项会合并到你的配置文件当中，可能会导致你的一些配置失效，比如 env 的 browser 选项</p></div><p><strong>rules</strong></p><p>规则配置，一般有三个选项：</p><ul><li>off / 0：不校验规则</li><li>warn / 1：打开规则作为警告（不影响退出代码）</li><li>error / 2：将规则作为错误打开（触发时退出代码为 1）</li></ul>`,27),d={href:"https://eslint.org/docs/latest/user-guide/configuring/rules",target:"_blank",rel:"noopener noreferrer"},u=a(`<p><strong>parserOptions</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code> <span class="token literal-property property">parserOptions</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// 语法解析器</span>
    <span class="token literal-property property">ecmaVersion</span><span class="token operator">:</span> <span class="token string">&#39;latest&#39;</span> <span class="token comment">// 指定 js 语法的版本</span>
 <span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>globals</strong></p><p>定义全局变量，定义后 eslint 将不会报为定义的错误</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code> <span class="token literal-property property">globals</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">jquery</span><span class="token operator">:</span> <span class="token string">&#39;readonly&#39;</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="配置注释" tabindex="-1"><a class="header-anchor" href="#配置注释"><span>配置注释</span></a></h3><p>通过注释的方式将校验配置写在脚本当中</p><p><strong>使用场景</strong></p><p>当前代码需要单独配置校验规则的场景</p><p><strong>案例</strong></p><p>当前行禁用校验</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">&quot;\${name} is a coder&quot;</span><span class="token punctuation">;</span> <span class="token comment">// eslint-disable-line</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="eslint-结合自动化工具-gulp" tabindex="-1"><a class="header-anchor" href="#eslint-结合自动化工具-gulp"><span>Eslint 结合自动化工具（Gulp）</span></a></h3><p><strong>原因</strong></p><ul><li>集成之后，ESLint 一定会工作</li><li>与项目统一，管理更加方便</li></ul><p><strong>前置工作</strong></p>`,16),g={href:"https://github.com/zce/zce-gulp-demo.git",target:"_blank",rel:"noopener noreferrer"},v=n("li",null,"完成相应的依赖安装",-1),m=n("li",null,"完成 eslint模块安装",-1),h=n("li",null,"完成 gulp-eslint模块安装",-1),k=n("li",null,"初始化 .eslintrc.js 配置文件",-1),b=a('<figure><img src="https://raw.githubusercontent.com/GodX-18/picBed/main/image-20221122142847872.png" alt="image-20221122142847872" tabindex="0" loading="lazy"><figcaption>image-20221122142847872</figcaption></figure><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>eslint 默认情况下，检测到错误是不会在控制台报错的。我们需要做额外的配置，才能正常工作</p></div><h3 id="eslint-结合-webpack" tabindex="-1"><a class="header-anchor" href="#eslint-结合-webpack"><span>Eslint 结合 webpack</span></a></h3><p>通过 loader 的形式集成到 webpack 中</p><p><strong>前置工作</strong></p>',5),y={href:"https://github.com/zce/zce-react-app.git",target:"_blank",rel:"noopener noreferrer"},f=n("li",null,"安装对应模块",-1),x=n("li",null,"安装 eslint 模块",-1),j=n("li",null,"安装 eslint-loader 模块",-1),E=n("li",null,"初始化 .eslintrc.js 配置文件",-1),_=a(`<p><strong>具体配置</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token literal-property property">test</span><span class="token operator">:</span><span class="token operator">/</span><span class="token punctuation">.</span>js$<span class="token operator">/</span>，
	<span class="token literal-property property">exclude</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">node_modules</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
	<span class="token literal-property property">use</span><span class="token operator">:</span><span class="token string">&#39;eslint-loader&#39;</span>
	<span class="token literal-property property">enfore</span><span class="token operator">:</span> <span class="token string">&#39;pre&#39;</span> <span class="token comment">// 优先加载</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>React 中需要做额外的配置</p><ul><li><p>安装插件</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">yarn</span> <span class="token function">add</span> eslint-plugin-react <span class="token parameter variable">-D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>修改配置文件</p><ul><li><p>单独配置，较复杂</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">&#39;react&#39;</span> <span class="token comment">// eslint 会自动去除 elsint-plugin 的前缀</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
   <span class="token comment">// 配置插件中的规则</span>
   <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">{</span>
     <span class="token string-property property">&#39;react/jsx-uses-react&#39;</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
      <span class="token string-property property">&#39;react/jsx-user-vars&#39;</span><span class="token operator">:</span> <span class="token number">2</span>
   <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>使用共享配置，降低使用成本</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token keyword">extends</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">&#39;standard&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;plugin:react/recommended&#39;</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><h3 id="现代化项目集成-eslint" tabindex="-1"><a class="header-anchor" href="#现代化项目集成-eslint"><span>现代化项目集成 ESLint</span></a></h3><p>这里以 vue 为例</p><figure><img src="https://raw.githubusercontent.com/GodX-18/picBed/main/image-20221122150410089.png" alt="image-20221122150410089" tabindex="0" loading="lazy"><figcaption>image-20221122150410089</figcaption></figure><ul><li>Lint on save<br> 在 webpack 构建时触发校验，并不是文件保存时促发校验</li><li>Lint and fix on commit<br> 在代码提交时触发代码校验和修复</li></ul><p><strong>以上两个选项建议都选</strong></p><h3 id="eslint-检查-typescript" tabindex="-1"><a class="header-anchor" href="#eslint-检查-typescript"><span>ESLint 检查 TypeScript</span></a></h3><p><strong>初始化配置文件的时候开启 ts 选项</strong></p><figure><img src="https://raw.githubusercontent.com/GodX-18/picBed/main/image-20221122151507745.png" alt="image-20221122151507745" tabindex="0" loading="lazy"><figcaption>image-20221122151507745</figcaption></figure><p><strong>安装相关依赖</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> --save-dev @typescript-eslint/parser @typescript-eslint/eslint-plugin eslint typescript
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>修改配置文件</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token keyword">extends</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;eslint:recommended&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;plugin:@typescript-eslint/recommended&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">parser</span><span class="token operator">:</span> <span class="token string">&#39;@typescript-eslint/parser&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 语法解析器</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;@typescript-eslint&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">root</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="stylelint" tabindex="-1"><a class="header-anchor" href="#stylelint"><span>StyleLint</span></a></h2><ul><li>css 代码的语法检测插件</li><li>提供默认的代码检查规则</li><li>提供 CLI工具，快速调用</li><li>通过插件支持 Sass Less PostCSS</li><li>支持 Gulp 或 Webpack 集成</li></ul><p><strong>安装</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">yarn</span> <span class="token function">add</span> stylelint stylelint-config-standard <span class="token parameter variable">-D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>因为 stylelint 没有内置共享配置，所以需要额外安装配置依赖</p></div><p><strong>使用</strong></p><p>新建 <code>stylelintrc.js</code>文件</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token keyword">extends</span><span class="token operator">:</span> <span class="token string">&quot;stylelint-config-standard&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行 cli 触发校验</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">yarn</span> stylelint index.css <span class="token parameter variable">--fix</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>stylelint 配合 sass</strong></p><ol><li><p>安装依赖</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">yarn</span> <span class="token function">add</span> stylelint-config-sass-guidelines <span class="token parameter variable">-D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>修改配置文件</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token keyword">extends</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;stylelint-config-standard&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;stylelint-config-sass-guidelines&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>使用</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>yarn stylelint index<span class="token punctuation">.</span>sass <span class="token operator">--</span>fix
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><h2 id="preitter" tabindex="-1"><a class="header-anchor" href="#preitter"><span>Preitter</span></a></h2><p><strong>前端代码格式化工具</strong></p><p><strong>安装</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">yarn</span> <span class="token function">add</span> prettire <span class="token parameter variable">-D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>使用</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">yarn</span> prettier style.css <span class="token parameter variable">--write</span> //覆盖原文件

<span class="token function">yarn</span> prettier <span class="token builtin class-name">.</span> <span class="token parameter variable">--write</span> // 格式化所有文件
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="git-hooks" tabindex="-1"><a class="header-anchor" href="#git-hooks"><span>Git Hooks</span></a></h2><p><strong>功能</strong></p><p>在代码提交前强制 lint，没有通过 lint 检查的代码不能提交到远程仓库</p><p><strong>基本介绍</strong></p><ul><li>Git Hook 也称之为 git 钩子，每个钩子都对应一个任务</li><li>通过 shell 脚本可以编写钩子任务触发时要具体执行的操作</li></ul><p><strong>工作机制</strong></p><ol><li>将 .git/hooks 下文件的后缀 .sample 删除，即可触发对应的钩子函数</li></ol><figure><img src="https://raw.githubusercontent.com/GodX-18/picBed/main/image-20221123094615795.png" alt="image-20221123094615795" tabindex="0" loading="lazy"><figcaption>image-20221123094615795</figcaption></figure><ol start="2"><li><p>我们在其中写入一些 shell 脚本进行测试</p><div class="language-she line-numbers-mode" data-ext="she" data-title="she"><pre class="language-she"><code>#!/bin/sh

echo &quot;before commit&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>现在就会在我们 commit 之前会执行上面的脚本文件了</p></li></ol><h2 id="eslint-结合-git-hooks" tabindex="-1"><a class="header-anchor" href="#eslint-结合-git-hooks"><span>ESLint 结合 Git Hooks</span></a></h2><p><strong>现状</strong></p><p>很多前端开发者并不擅长使用 shell，编写 shell 脚本</p><p><strong>解决方案</strong></p><p>Husky 可以在不编写 shell 脚本的情况下， 实现 Git Hooks 的使用需求</p><h3 id="husky" tabindex="-1"><a class="header-anchor" href="#husky"><span>Husky</span></a></h3><p><strong>安装</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>npx husky-init <span class="token operator">&amp;&amp;</span> <span class="token function">npm</span> <span class="token function">install</span>       <span class="token comment"># npm</span>
npx husky-init <span class="token operator">&amp;&amp;</span> <span class="token function">yarn</span>              <span class="token comment"># Yarn 1</span>
<span class="token function">yarn</span> dlx husky-init <span class="token parameter variable">--yarn2</span> <span class="token operator">&amp;&amp;</span> <span class="token function">yarn</span> <span class="token comment"># Yarn 2+</span>
<span class="token function">pnpm</span> dlx husky-init <span class="token operator">&amp;&amp;</span> <span class="token function">pnpm</span> <span class="token function">install</span> <span class="token comment"># pnpm</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>添加挂钩</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>npx husky <span class="token function">add</span> .husky/pre-commit <span class="token string">&#39;npm run test&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="lint-staged" tabindex="-1"><a class="header-anchor" href="#lint-staged"><span>Lint-staged</span></a></h3><p>只针对暂存区的文件做一些操作，不会影响到之前提交的代码</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>prettier 是一个很好的格式化代码的插件，但对已经有一定迭代完成度的代码不推荐使用。使用该插件后，它会将原有的代码也进行格式化，造成很多不可知的问题，我就是前车之鉴，使用 prettier 后，原本已经没有 eslint 问题的代码，又多出了更多的不知道什么原因的报错，只能将代码回退处理。</p><p>这也就是我们为什么在 <code>lint-staged</code> 中，执行 <code>prettier</code> 的原因</p></div><p><strong>安装</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">yarn</span> <span class="token function">add</span> lint-staged <span class="token parameter variable">-D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>配置</strong></p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
   <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;precommit&quot;</span><span class="token operator">:</span> <span class="token string">&quot;lint-staged&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;lint-staged&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;src/**/*.{js,vue}&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">&quot;prettier --write&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;eslint --cache --fix&quot;</span>
 	 <span class="token punctuation">]</span>
  <span class="token punctuation">}</span>  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>新版本的 lint-staged 会自动将修改过后的代码自动添加到暂存区内，无需配置</p></div>`,61);function w(L,S){const e=l("ExternalLinkIcon");return p(),o("div",null,[c,n("p",null,[s("详细见"),n("a",d,[s("官网"),t(e)])]),u,n("ul",null,[n("li",null,[n("a",g,[s("https://github.com/zce/zce-gulp-demo.git"),t(e)])]),v,m,h,k]),b,n("ul",null,[n("li",null,[n("a",y,[s("https://github.com/zce/zce-react-app.git"),t(e)])]),f,x,j,E]),_])}const A=i(r,[["render",w],["__file","规范化标准.html.vue"]]),B=JSON.parse('{"path":"/%E5%A4%A7%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96%E5%AE%9E%E6%88%98/%E8%A7%84%E8%8C%83%E5%8C%96%E6%A0%87%E5%87%86.html","title":"规范化标准","lang":"zh-CN","frontmatter":{"title":"规范化标准","icon":"state","order":8,"category":["前端"],"tag":["规范化","工程化"],"description":"什么是规范化标准 规范化是我们践行前端工程化中重要的一部分 规范化标准的意义 软件开发需要多人协同 不同开发者具有不同的编码习惯和喜好 不同的喜好增加项目维护成本 每个项目或者团队需要明确统一的标准 哪里需要规范化标准 代码、文档、甚至是提交日志 开发过程中认为编写的成果物 代码标准化规范最为重要 实施规范化标准的方法 编码前人为的标准约定（不可靠） ...","head":[["meta",{"property":"og:url","content":"https://godx-18.github.io/%E5%A4%A7%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96%E5%AE%9E%E6%88%98/%E8%A7%84%E8%8C%83%E5%8C%96%E6%A0%87%E5%87%86.html"}],["meta",{"property":"og:site_name","content":"烜"}],["meta",{"property":"og:title","content":"规范化标准"}],["meta",{"property":"og:description","content":"什么是规范化标准 规范化是我们践行前端工程化中重要的一部分 规范化标准的意义 软件开发需要多人协同 不同开发者具有不同的编码习惯和喜好 不同的喜好增加项目维护成本 每个项目或者团队需要明确统一的标准 哪里需要规范化标准 代码、文档、甚至是提交日志 开发过程中认为编写的成果物 代码标准化规范最为重要 实施规范化标准的方法 编码前人为的标准约定（不可靠） ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.githubusercontent.com/GodX-18/picBed/main/image-20221122111337969.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-24T09:13:37.000Z"}],["meta",{"property":"article:author","content":"GodX"}],["meta",{"property":"article:tag","content":"规范化"}],["meta",{"property":"article:tag","content":"工程化"}],["meta",{"property":"article:modified_time","content":"2023-03-24T09:13:37.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"规范化标准\\",\\"image\\":[\\"https://raw.githubusercontent.com/GodX-18/picBed/main/image-20221122111337969.png\\",\\"https://raw.githubusercontent.com/GodX-18/picBed/main/image-20221122142847872.png\\",\\"https://raw.githubusercontent.com/GodX-18/picBed/main/image-20221122150410089.png\\",\\"https://raw.githubusercontent.com/GodX-18/picBed/main/image-20221122151507745.png\\",\\"https://raw.githubusercontent.com/GodX-18/picBed/main/image-20221123094615795.png\\"],\\"dateModified\\":\\"2023-03-24T09:13:37.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"GodX\\",\\"url\\":\\"https://github.com/GodX-18\\"}]}"]]},"headers":[{"level":2,"title":"什么是规范化标准","slug":"什么是规范化标准","link":"#什么是规范化标准","children":[]},{"level":2,"title":"规范化标准的意义","slug":"规范化标准的意义","link":"#规范化标准的意义","children":[]},{"level":2,"title":"哪里需要规范化标准","slug":"哪里需要规范化标准","link":"#哪里需要规范化标准","children":[]},{"level":2,"title":"实施规范化标准的方法","slug":"实施规范化标准的方法","link":"#实施规范化标准的方法","children":[]},{"level":2,"title":"常见的规范化实现方式","slug":"常见的规范化实现方式","link":"#常见的规范化实现方式","children":[]},{"level":2,"title":"ESLint","slug":"eslint","link":"#eslint","children":[{"level":3,"title":"基本介绍","slug":"基本介绍","link":"#基本介绍","children":[]},{"level":3,"title":"安装","slug":"安装","link":"#安装","children":[]},{"level":3,"title":"快速上手","slug":"快速上手","link":"#快速上手","children":[]},{"level":3,"title":"配置文件","slug":"配置文件","link":"#配置文件","children":[]},{"level":3,"title":"配置注释","slug":"配置注释","link":"#配置注释","children":[]},{"level":3,"title":"Eslint 结合自动化工具（Gulp）","slug":"eslint-结合自动化工具-gulp","link":"#eslint-结合自动化工具-gulp","children":[]},{"level":3,"title":"Eslint 结合 webpack","slug":"eslint-结合-webpack","link":"#eslint-结合-webpack","children":[]},{"level":3,"title":"现代化项目集成 ESLint","slug":"现代化项目集成-eslint","link":"#现代化项目集成-eslint","children":[]},{"level":3,"title":"ESLint 检查 TypeScript","slug":"eslint-检查-typescript","link":"#eslint-检查-typescript","children":[]}]},{"level":2,"title":"StyleLint","slug":"stylelint","link":"#stylelint","children":[]},{"level":2,"title":"Preitter","slug":"preitter","link":"#preitter","children":[]},{"level":2,"title":"Git Hooks","slug":"git-hooks","link":"#git-hooks","children":[]},{"level":2,"title":"ESLint 结合 Git Hooks","slug":"eslint-结合-git-hooks","link":"#eslint-结合-git-hooks","children":[{"level":3,"title":"Husky","slug":"husky","link":"#husky","children":[]},{"level":3,"title":"Lint-staged","slug":"lint-staged","link":"#lint-staged","children":[]}]}],"git":{"createdTime":1678348093000,"updatedTime":1679649217000,"contributors":[{"name":"GodX","email":"1046529973@qq.com","commits":2}]},"readingTime":{"minutes":6.18,"words":1855},"filePathRelative":"大前端/前端工程化实战/规范化标准.md","localizedDate":"2023年3月9日","excerpt":"<h2>什么是规范化标准</h2>\\n<p><strong>规范化是我们践行前端工程化中重要的一部分</strong></p>\\n<h2>规范化标准的意义</h2>\\n<ul>\\n<li>软件开发需要多人协同</li>\\n<li>不同开发者具有不同的编码习惯和喜好</li>\\n<li>不同的喜好增加项目维护成本</li>\\n<li>每个项目或者团队需要明确统一的标准</li>\\n</ul>\\n<h2>哪里需要规范化标准</h2>\\n<ul>\\n<li>代码、文档、甚至是提交日志</li>\\n<li>开发过程中认为编写的成果物</li>\\n<li>代码标准化规范最为重要</li>\\n</ul>\\n<h2>实施规范化标准的方法</h2>","autoDesc":true}');export{A as comp,B as data};
