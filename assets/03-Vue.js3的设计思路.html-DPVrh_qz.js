import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,a as t}from"./app-oXp7PBbS.js";const e={},p=t(`<h2 id="声明式地描述-ui" tabindex="-1"><a class="header-anchor" href="#声明式地描述-ui"><span>声明式地描述 UI</span></a></h2><ul><li>Vue3 是一个声明式的框架，哪怕是事件都有与之对应的描述方式。用户不需要手写任何命令式代码 <ul><li>使用与 HTML 标签一致的方式来描述 DOM 元素，例如描述一个 div 标签时可以使用 <code>&lt;div&gt;&lt;/div&gt;</code></li><li>使用与 HTML 标签一致的方式来描述属性，例如<code>&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</code></li><li>使用 ：或者 v-bind 来描述动态绑定的属性</li><li>使用 @ 或者 v-on 来描述事件</li><li>使用与 HTML 标签一致的方式来描述层级结构</li></ul></li><li>h 函数是一个辅助创建虚拟 DOM 的工具函数，其作用就是让我们编写虚拟 DOM 变得更加轻松</li></ul><h2 id="初识渲染器" tabindex="-1"><a class="header-anchor" href="#初识渲染器"><span>初识渲染器</span></a></h2><p><strong>虚拟DOM如何变成真实DOM并渲染到浏览器页面中？</strong></p><p>通过渲染器</p><p><strong>渲染器内部实现原理</strong></p><p>渲染器的工作原理很简单，归根结底，都是使用一些我们熟悉的DOM操作 API 来完成渲染工作</p><ul><li>通过 document.createElement 创建元素</li><li>通过 addEventListtener 为元素添加事件</li><li>递归处理子节点（children）</li><li>挂载元素到目标节点上</li></ul><blockquote><p>对于渲染器来说，它需要精确地找到 vnode 对象的变更点并且只更新变更的内容，不需要每次都走一遍完整的创建元素流程，具体实现后面再分析。</p></blockquote><h2 id="组件的本质" tabindex="-1"><a class="header-anchor" href="#组件的本质"><span>组件的本质</span></a></h2><p><strong>组件就是一组 DOM 元素的封装</strong>，因为组件实际上也是由 DOM 元素组成的</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">MyComponent</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">tag</span><span class="token operator">:</span> <span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token function-variable function">onClick</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token string">&#39;click me&#39;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以定义用虚拟DOM 来描述组件</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> vnode <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">tag</span><span class="token operator">:</span> MyComponent
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看一下渲染器内部是如何处理组件的</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">mountComponent</span><span class="token punctuation">(</span><span class="token parameter">vnode<span class="token punctuation">,</span> cotainer</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> subtree <span class="token operator">=</span> vnode<span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token comment">// 递归调用 renderer 渲染 subtree</span>
  <span class="token function">renderer</span><span class="token punctuation">(</span>subtree<span class="token punctuation">,</span>cotainer<span class="token punctuation">)</span> 
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">renderer</span><span class="token punctuation">(</span><span class="token parameter">vnode<span class="token punctuation">,</span>container</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> vnode<span class="token punctuation">.</span>tag <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 普通标签元素</span>
    <span class="token function">mountElement</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span>container<span class="token punctuation">)</span> 
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> vnode<span class="token punctuation">.</span>tag <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 如果tag是一个函数，说明 vnode 的描述的是组件</span>
    <span class="token function">mountComponent</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> container<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="模版的工作原理" tabindex="-1"><a class="header-anchor" href="#模版的工作原理"><span>模版的工作原理</span></a></h2><p><strong>模版通过编译器工作</strong></p><p>编译器的作用其实就是将模版编译为渲染函数，例如给出如下模版：</p><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>handler<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    click me
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token function">handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token operator">...</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中 template 标签里的内容就是模版内容，编译器会把模版编译成渲染函数并添加到 script 标签块的组件对象上，所以最终在浏览器中运行的代码就是：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token operator">...</span>
    <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">onClick</span><span class="token operator">:</span> handler<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">&#39;click me&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>无论是使用模版还是直接手写渲染函数，对于一个组件来说，它要渲染的内容最终都是通过渲染函数产生的，然后渲染器再把渲染函数返回的虚拟 DO M 渲染为真实 DOM，这就是模版的工作原理，也就是 Vue.js 渲染页面的流程</p></div><h2 id="vue-js-是各个模块组成的有机整体" tabindex="-1"><a class="header-anchor" href="#vue-js-是各个模块组成的有机整体"><span>Vue.js 是各个模块组成的有机整体</span></a></h2><p>编译器、渲染器都是 Vue.js 的核心组成部分，它们共同构成一个有机的整体，不同模块之间互相配合，进一步提升框架性能。</p><p>例如，在编译器工作时能够识别出哪些是静态属性，哪些是动态属性，在生成代码的时候可以附带这些信息：</p><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>foo<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cls<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>告诉渲染器哪些是静态属性，哪些是动态属性，渲染器节省了寻找变更节点的工作量，从而提升了性能</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">tag</span><span class="token operator">:</span> <span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span>
      <span class="token keyword">class</span><span class="token operator">:</span> cls
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">patchFlags</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token comment">// 假设 1 代表 class 是动态的</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,29),o=[p];function i(l,c){return s(),a("div",null,o)}const d=n(e,[["render",i],["__file","03-Vue.js3的设计思路.html.vue"]]),k=JSON.parse('{"path":"/%E9%98%85%E8%AF%BB/Vuejs%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/03-Vue.js3%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%80%9D%E8%B7%AF.html","title":"Vue3.js 的设计思路","lang":"zh-CN","frontmatter":{"title":"Vue3.js 的设计思路","icon":"creative","order":3,"category":["前端"],"tag":["vue"],"description":"声明式地描述 UI Vue3 是一个声明式的框架，哪怕是事件都有与之对应的描述方式。用户不需要手写任何命令式代码 使用与 HTML 标签一致的方式来描述 DOM 元素，例如描述一个 div 标签时可以使用 <div></div> 使用与 HTML 标签一致的方式来描述属性，例如<div id=\\"app\\"></div> 使用 ：或者 v-bind 来描述...","head":[["meta",{"property":"og:url","content":"https://godx-18.github.io/%E9%98%85%E8%AF%BB/Vuejs%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/03-Vue.js3%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%80%9D%E8%B7%AF.html"}],["meta",{"property":"og:site_name","content":"烜"}],["meta",{"property":"og:title","content":"Vue3.js 的设计思路"}],["meta",{"property":"og:description","content":"声明式地描述 UI Vue3 是一个声明式的框架，哪怕是事件都有与之对应的描述方式。用户不需要手写任何命令式代码 使用与 HTML 标签一致的方式来描述 DOM 元素，例如描述一个 div 标签时可以使用 <div></div> 使用与 HTML 标签一致的方式来描述属性，例如<div id=\\"app\\"></div> 使用 ：或者 v-bind 来描述..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-08-07T03:00:15.000Z"}],["meta",{"property":"article:author","content":"GodX"}],["meta",{"property":"article:tag","content":"vue"}],["meta",{"property":"article:modified_time","content":"2023-08-07T03:00:15.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Vue3.js 的设计思路\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-08-07T03:00:15.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"GodX\\",\\"url\\":\\"https://github.com/GodX-18\\"}]}"]]},"headers":[{"level":2,"title":"声明式地描述 UI","slug":"声明式地描述-ui","link":"#声明式地描述-ui","children":[]},{"level":2,"title":"初识渲染器","slug":"初识渲染器","link":"#初识渲染器","children":[]},{"level":2,"title":"组件的本质","slug":"组件的本质","link":"#组件的本质","children":[]},{"level":2,"title":"模版的工作原理","slug":"模版的工作原理","link":"#模版的工作原理","children":[]},{"level":2,"title":"Vue.js 是各个模块组成的有机整体","slug":"vue-js-是各个模块组成的有机整体","link":"#vue-js-是各个模块组成的有机整体","children":[]}],"git":{"createdTime":1691377215000,"updatedTime":1691377215000,"contributors":[{"name":"GodX","email":"1046529973@qq.com","commits":1}]},"readingTime":{"minutes":3.08,"words":923},"filePathRelative":"阅读/Vuejs设计与实现/03-Vue.js3的设计思路.md","localizedDate":"2023年8月7日","excerpt":"<h2>声明式地描述 UI</h2>\\n<ul>\\n<li>Vue3 是一个声明式的框架，哪怕是事件都有与之对应的描述方式。用户不需要手写任何命令式代码\\n<ul>\\n<li>使用与 HTML 标签一致的方式来描述 DOM 元素，例如描述一个 div 标签时可以使用 <code>&lt;div&gt;&lt;/div&gt;</code></li>\\n<li>使用与 HTML 标签一致的方式来描述属性，例如<code>&lt;div id=\\"app\\"&gt;&lt;/div&gt;</code></li>\\n<li>使用 ：或者 v-bind 来描述动态绑定的属性</li>\\n<li>使用 @ 或者 v-on 来描述事件</li>\\n<li>使用与 HTML 标签一致的方式来描述层级结构</li>\\n</ul>\\n</li>\\n<li>h 函数是一个辅助创建虚拟 DOM 的工具函数，其作用就是让我们编写虚拟 DOM 变得更加轻松</li>\\n</ul>","autoDesc":true}');export{d as comp,k as data};
