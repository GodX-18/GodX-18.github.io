import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as l,o,c as i,b as s,e as n,d as p,a}from"./app-oXp7PBbS.js";const r={},c=a(`<h2 id="基本介绍" tabindex="-1"><a class="header-anchor" href="#基本介绍"><span>基本介绍</span></a></h2><ul><li>Rollup 更加小巧</li><li>仅仅是一款 ESM 打包器</li><li>Rollup 中并不支持类似 HMR 这种高级特性</li><li>诞生的目的： <ul><li>并不是要与 webpack 全面竞争</li><li>提供一个充分利用 ESM 各项特性的高效打包器</li></ul></li></ul><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>rollup.js 的开发本意，是打造一款简单易用的 ES 模块打包工具，不必配置，直接使用。这一点，它确实做到了。</p><p>后来经过不断发展，它也可以打包 CommonJS 模块。但是，这时需要经过复杂配置，实际上并没有比 Webpack 简单多少。</p><p>因此建议，<strong>只把 rollup.js 用于打包 ES 模块</strong>，这样才能充分发挥它的优势。下面你会看到，那是多么简单的一件事。</p><p>如果你的项目使用 CommonJS 模块，不推荐使用 rollup.js，优势不大。</p></div><h2 id="快速上手" tabindex="-1"><a class="header-anchor" href="#快速上手"><span>快速上手</span></a></h2><p><strong>安装</strong></p><ul><li><p>全局安装</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> i rollup <span class="token parameter variable">-g</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>项目内部安装</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">yarn</span> <span class="token function">add</span> rollup <span class="token parameter variable">-D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><p><strong>使用</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>rollup src<span class="token operator">/</span>main<span class="token punctuation">.</span>js <span class="token operator">--</span>file dist<span class="token operator">/</span>bundle<span class="token punctuation">.</span>js <span class="token operator">--</span>format iife
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">相关信息</p><ul><li>–file：指定文件的输出的目录</li><li>–format：将文件打包成指定的格式</li></ul></div><h2 id="配置文件" tabindex="-1"><a class="header-anchor" href="#配置文件"><span>配置文件</span></a></h2><p><strong>rollup.config.js</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">input</span><span class="token operator">:</span> <span class="token string">&#39;src/index.js&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 入口文件</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">file</span><span class="token operator">:</span> <span class="token string">&#39;dist/bundle.js&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 输出目录</span>
    <span class="token literal-property property">format</span><span class="token operator">:</span> <span class="token string">&#39;iife&#39;</span> <span class="token comment">// 打包格式</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>配置文件运行在 node 环境当中，不过 rollup 会额外处理这个文件，所以我们可以使用 ES Modules 的方式去编写</p></div><p><strong>使用配置文件</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>rollup <span class="token parameter variable">--config</span> rollup.config.js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="使用插件" tabindex="-1"><a class="header-anchor" href="#使用插件"><span>使用插件</span></a></h2><p><strong>使用场景</strong></p><ul><li>rollup 自身的功能就只是 ES Modules 模块的合并打包</li><li>如果有其他的需求就需要使用插件去完成。例如：加载其他类型的资源文件、导入 commonjs 模块、编译 ES6 新特性等等</li><li>插件是 rollup 唯一的扩展途径，不像 webpack 扩展了 loader 、plugins 和 minizier</li></ul><p><strong>案例</strong></p>`,19),u={href:"https://github.com/rollup/plugins/tree/master/packages/json",target:"_blank",rel:"noopener noreferrer"},d=a(`<div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 安装插件</span>
<span class="token function">yarn</span> <span class="token function">add</span> @rollup/plugin-json <span class="token parameter variable">-D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>修改配置文件</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// rollup.config.js</span>
<span class="token keyword">import</span> json <span class="token keyword">from</span> <span class="token string">&#39;@rollup/plugin-json&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">input</span><span class="token operator">:</span> <span class="token string">&#39;src/index.js&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">file</span><span class="token operator">:</span> <span class="token string">&#39;dist/bundle.js&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">format</span><span class="token operator">:</span> <span class="token string">&#39;cjs&#39;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置 npm scripts</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;build&quot;</span><span class="token operator">:</span> <span class="token string">&quot;rollup --config&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用</p><div class="language-bsh line-numbers-mode" data-ext="bsh" data-title="bsh"><pre class="language-bsh"><code>yarn build
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="加载-npm-模块" tabindex="-1"><a class="header-anchor" href="#加载-npm-模块"><span>加载 npm 模块</span></a></h2><p>有时候，您的项目可能需要依赖于一些 NPM 包。与 webpack 和 Browserify 等其他打包器不同，Rollup 并不能“开箱即用”地处理 NPM 包的依赖关系——我们需要添加一些配置。</p><p>**安装@rollup/plugin-node-resolve插件，该插件可以让 Rollup 查找到外部模块 **</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>npm install <span class="token operator">--</span>save<span class="token operator">-</span>dev @rollup<span class="token operator">/</span>plugin<span class="token operator">-</span>node<span class="token operator">-</span>resolve
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>修改配置文件</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// rollup.config.js</span>
<span class="token keyword">import</span> resolve <span class="token keyword">from</span> <span class="token string">&#39;@rollup/plugin-node-resolve&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">input</span><span class="token operator">:</span> <span class="token string">&#39;src/main.js&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">file</span><span class="token operator">:</span> <span class="token string">&#39;bundle.js&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">format</span><span class="token operator">:</span> <span class="token string">&#39;cjs&#39;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="加载-commonjs-模块" tabindex="-1"><a class="header-anchor" href="#加载-commonjs-模块"><span>加载 Commonjs 模块</span></a></h2><p>一些库暴露了可以按照原样导入的 ES 模块。但目前，大多数的 NPM 包暴露的都是 CommonJS 模块。在此更改之前，我们需要将 CommonJS 转换为 ES2015，这样 Rollup 才能处理它们。</p>`,15),v={href:"https://github.com/rollup/plugins/tree/master/packages/commonjs",target:"_blank",rel:"noopener noreferrer"},m=a(`<p><strong>安装</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">yarn</span> <span class="token function">add</span> @rollup/plugin-commonjs
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>修改配置文件</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> commonjs <span class="token keyword">from</span> <span class="token string">&#39;@rollup/plugin-commonjs&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">input</span><span class="token operator">:</span> <span class="token string">&#39;src/index.js&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">file</span><span class="token operator">:</span> <span class="token string">&#39;dist/bundle.js&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">format</span><span class="token operator">:</span> <span class="token string">&#39;iife&#39;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token function">commonjs</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>请注意，<code>@rollup/plugin-commonjs</code> 应该在其他插件 <em>之前</em> 使用——这是为了防止其他插件进行的更改破坏了 CommonJS 检测。</p><p>Rolluo 插件的执行顺序是从前往后的</p></div><h2 id="代码拆分-分包" tabindex="-1"><a class="header-anchor" href="#代码拆分-分包"><span>代码拆分（分包）</span></a></h2><p><strong>使用</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;./logger&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> log <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;code splitting~&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>修改配置文件</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">input</span><span class="token operator">:</span> <span class="token string">&#39;src/index.js&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">dir</span><span class="token operator">:</span> <span class="token string">&#39;dist&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">format</span><span class="token operator">:</span> <span class="token string">&#39;amd&#39;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>Iife 格式会将所有的模块合并到同一个函数当中，并不支持代码的分包。要想使用代码拆分，可以使用 amd 或者 cjs 等其他标准，浏览器只能使用 amd 或 es modules</p></div><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>file 是单个输入文件打包，不支持代码拆分。如果需要支持代码拆分，需要配置 dir 选项</p></div><h2 id="多入口打包" tabindex="-1"><a class="header-anchor" href="#多入口打包"><span>多入口打包</span></a></h2><p><strong>配置文件</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token comment">// input: [&#39;src/index.js&#39;, &#39;src/album.js&#39;],</span>
  <span class="token literal-property property">input</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// 文件重命名</span>
    <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token string">&#39;src/index.js&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">bar</span><span class="token operator">:</span> <span class="token string">&#39;src/album.js&#39;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">dir</span><span class="token operator">:</span> <span class="token string">&#39;dist&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">format</span><span class="token operator">:</span> <span class="token string">&#39;amd&#39;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>多入口打包时，rollup 内部会自动提取公用模块，会使用到代码拆分，所以不能够使用 iife 输出格式</p></div><div class="hint-container info"><p class="hint-container-title">相关信息</p><p><em>AMD 标准格式的输出 bundle 不能直接引用</em>，<em>需要 Require.js 这样的库辅助加载</em></p></div><h2 id="rollup-webpack-选用原则" tabindex="-1"><a class="header-anchor" href="#rollup-webpack-选用原则"><span>Rollup / Webpack 选用原则</span></a></h2><p><strong>Rollup 优势</strong></p><ul><li>输出结果更加扁平，执行效率更高</li><li>自动移除未引用代码</li><li>打包结果依然完全可读</li></ul><p><strong>Rollup 劣势</strong></p><ul><li>加载非 ESM 的第三方模块比较复杂</li><li>模块最终都被打包到一个函数中，无法实现 HMR</li><li>浏览器环境中，代码拆分功能依赖 AMD 库</li></ul><p><strong>建议</strong></p><ul><li>如果我们正在开发一个应用程序，建议使用 webpack</li><li>如果我们正在开发一个框架或者类库，建议使用 rollup</li><li>大多数知名框架 / 库都在使用 Rollup 作为模块打包器</li><li>社区种希望二者并存</li><li>Webpack 大而全，Rollup 小而美</li></ul>`,24);function k(g,b){const e=l("ExternalLinkIcon");return o(),i("div",null,[c,s("p",null,[n("我们将使用 "),s("a",u,[n("@rollup/plugin-json"),p(e)]),n(", 其允许 Rollup 从一个 JSON 文件中导入数据。")]),d,s("p",null,[s("a",v,[n("@rollup/plugin-commonjs"),p(e)]),n(" 可以做到这一点。")]),m])}const j=t(r,[["render",k],["__file","Rollup.html.vue"]]),f=JSON.parse('{"path":"/%E5%A4%A7%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96%E5%AE%9E%E6%88%98/Rollup.html","title":"Rollup","lang":"zh-CN","frontmatter":{"title":"Rollup","icon":"tree","order":6,"category":["前端"],"tag":["模块化","rollup"],"description":"基本介绍 Rollup 更加小巧 仅仅是一款 ESM 打包器 Rollup 中并不支持类似 HMR 这种高级特性 诞生的目的： 并不是要与 webpack 全面竞争 提供一个充分利用 ESM 各项特性的高效打包器 相关信息 rollup.js 的开发本意，是打造一款简单易用的 ES 模块打包工具，不必配置，直接使用。这一点，它确实做到了。 后来经过不断...","head":[["meta",{"property":"og:url","content":"https://godx-18.github.io/%E5%A4%A7%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96%E5%AE%9E%E6%88%98/Rollup.html"}],["meta",{"property":"og:site_name","content":"烜"}],["meta",{"property":"og:title","content":"Rollup"}],["meta",{"property":"og:description","content":"基本介绍 Rollup 更加小巧 仅仅是一款 ESM 打包器 Rollup 中并不支持类似 HMR 这种高级特性 诞生的目的： 并不是要与 webpack 全面竞争 提供一个充分利用 ESM 各项特性的高效打包器 相关信息 rollup.js 的开发本意，是打造一款简单易用的 ES 模块打包工具，不必配置，直接使用。这一点，它确实做到了。 后来经过不断..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-24T09:13:37.000Z"}],["meta",{"property":"article:author","content":"GodX"}],["meta",{"property":"article:tag","content":"模块化"}],["meta",{"property":"article:tag","content":"rollup"}],["meta",{"property":"article:modified_time","content":"2023-03-24T09:13:37.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Rollup\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-03-24T09:13:37.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"GodX\\",\\"url\\":\\"https://github.com/GodX-18\\"}]}"]]},"headers":[{"level":2,"title":"基本介绍","slug":"基本介绍","link":"#基本介绍","children":[]},{"level":2,"title":"快速上手","slug":"快速上手","link":"#快速上手","children":[]},{"level":2,"title":"配置文件","slug":"配置文件","link":"#配置文件","children":[]},{"level":2,"title":"使用插件","slug":"使用插件","link":"#使用插件","children":[]},{"level":2,"title":"加载 npm 模块","slug":"加载-npm-模块","link":"#加载-npm-模块","children":[]},{"level":2,"title":"加载 Commonjs 模块","slug":"加载-commonjs-模块","link":"#加载-commonjs-模块","children":[]},{"level":2,"title":"代码拆分（分包）","slug":"代码拆分-分包","link":"#代码拆分-分包","children":[]},{"level":2,"title":"多入口打包","slug":"多入口打包","link":"#多入口打包","children":[]},{"level":2,"title":"Rollup / Webpack 选用原则","slug":"rollup-webpack-选用原则","link":"#rollup-webpack-选用原则","children":[]}],"git":{"createdTime":1678348093000,"updatedTime":1679649217000,"contributors":[{"name":"GodX","email":"1046529973@qq.com","commits":2}]},"readingTime":{"minutes":4.03,"words":1210},"filePathRelative":"大前端/前端工程化实战/Rollup.md","localizedDate":"2023年3月9日","excerpt":"<h2>基本介绍</h2>\\n<ul>\\n<li>Rollup 更加小巧</li>\\n<li>仅仅是一款 ESM 打包器</li>\\n<li>Rollup 中并不支持类似 HMR 这种高级特性</li>\\n<li>诞生的目的：\\n<ul>\\n<li>并不是要与 webpack 全面竞争</li>\\n<li>提供一个充分利用 ESM 各项特性的高效打包器</li>\\n</ul>\\n</li>\\n</ul>\\n<div class=\\"hint-container info\\">\\n<p class=\\"hint-container-title\\">相关信息</p>\\n<p>rollup.js 的开发本意，是打造一款简单易用的 ES 模块打包工具，不必配置，直接使用。这一点，它确实做到了。</p>\\n<p>后来经过不断发展，它也可以打包 CommonJS 模块。但是，这时需要经过复杂配置，实际上并没有比 Webpack 简单多少。</p>\\n<p>因此建议，<strong>只把 rollup.js 用于打包 ES 模块</strong>，这样才能充分发挥它的优势。下面你会看到，那是多么简单的一件事。</p>\\n<p>如果你的项目使用 CommonJS 模块，不推荐使用 rollup.js，优势不大。</p>\\n</div>","autoDesc":true}');export{j as comp,f as data};
