import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,a as t}from"./app-oXp7PBbS.js";const p={},o=t(`<h2 id="nodejs-可以做什么" tabindex="-1"><a class="header-anchor" href="#nodejs-可以做什么"><span>Nodejs 可以做什么？</span></a></h2><ul><li>轻量级、高性能的 Web 服务</li><li>前后端 JS 同构开发</li><li>便捷高效的前端工程化</li></ul><h2 id="nodejs-架构" tabindex="-1"><a class="header-anchor" href="#nodejs-架构"><span>Nodejs 架构</span></a></h2><figure><img src="https://raw.githubusercontent.com/GodX-18/picBed/main/image-20221226104356196.png" alt="image-20221226104356196" tabindex="0" loading="lazy"><figcaption>image-20221226104356196</figcaption></figure><h3 id="natives-modules" tabindex="-1"><a class="header-anchor" href="#natives-modules"><span>Natives modules</span></a></h3><p>内置核心模块：暴露相应的 JS 功能接口，供开发者直接进行调用</p><ul><li>当前层内容由 JS 实现</li><li>提供应用程序可直接调用库，例如 fs 、path、http 等</li></ul><h3 id="builtin-modules" tabindex="-1"><a class="header-anchor" href="#builtin-modules"><span>Builtin modules</span></a></h3><p>胶水层：帮我们找到 C++ 对应的 modules 层，需要 v8 引擎配合实现</p><ul><li>当前层由 C / C++ 代码编写而成</li><li>该层表我们调用 C / C++ 函数</li></ul><h3 id="底层" tabindex="-1"><a class="header-anchor" href="#底层"><span>底层</span></a></h3><ul><li>V8：构建 Nodejs 的运行环境，执行 JS 代码，提供桥梁接口</li><li>Libuv：时间循环、事件队列、异步 IO</li><li>第三方模块：zlib 、 http 、 c-ares 等</li></ul><h2 id="为什么是-nodejs" tabindex="-1"><a class="header-anchor" href="#为什么是-nodejs"><span>为什么是 Nodejs</span></a></h2><p>Nodejs 慢慢演化为一门服务端“语言”</p><figure><img src="https://raw.githubusercontent.com/GodX-18/picBed/main/image-20221226115124046.png" alt="image-20221226115124046" tabindex="0" loading="lazy"><figcaption>image-20221226115124046</figcaption></figure><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>IO 是计算机操作过程中最缓慢的环节，Node 结合 Reactor 模式下实现异步 IO、事件驱动</p></div><h2 id="nodejs-异步-io" tabindex="-1"><a class="header-anchor" href="#nodejs-异步-io"><span>Nodejs 异步 IO</span></a></h2><ul><li><p>重复调用 IO 操作，判断 IO 是否结束（轮询）</p></li><li><p>常见的轮询技术：read、select、poll、kqueue、event potrts</p></li><li><p>期望实现无需主动判断的非阻塞 IO</p></li></ul><figure><img src="https://raw.githubusercontent.com/GodX-18/picBed/main/image-20221226154047982.png" alt="image-20221226154047982" tabindex="0" loading="lazy"><figcaption>image-20221226154047982</figcaption></figure><figure><img src="https://raw.githubusercontent.com/GodX-18/picBed/main/image-20221226154153310.png" alt="image-20221226154153310" tabindex="0" loading="lazy"><figcaption>image-20221226154153310</figcaption></figure><ul><li>IO 是应用程序的瓶颈所在</li><li>异步 IO 提高性能不在原地等待结果返回</li><li>IO 操作属于操作系统级别，平台都有对应实现</li><li>Node 单线程配合事件驱动架构及 libuv 实现了异步 IO</li></ul><h2 id="node-事件驱动架构" tabindex="-1"><a class="header-anchor" href="#node-事件驱动架构"><span>Node 事件驱动架构</span></a></h2><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> EventBus <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;events&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> myEvent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventBus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

myEvent<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;message&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;GodX------&gt;log&quot;</span><span class="token punctuation">,</span> <span class="token number">111</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

myEvent<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;message&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;GodX------&gt;log&quot;</span><span class="token punctuation">,</span> <span class="token number">222</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

myEvent<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&quot;message&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="nodejs-单线程" tabindex="-1"><a class="header-anchor" href="#nodejs-单线程"><span>Nodejs 单线程</span></a></h2><p>使用 JS 实现高效可伸缩的高性能 Web 服务</p><p><strong>单线程如何实现高并发？</strong></p><ul><li>异步非阻塞 IO 配合事件回调通知</li><li>Nodejs 主线程是单线程</li></ul><h2 id="node-应用场景" tabindex="-1"><a class="header-anchor" href="#node-应用场景"><span>Node 应用场景</span></a></h2><ul><li><p>适合于 IO 密集型高并发请求</p></li><li><p>Nodejs 做为中间层</p><figure><img src="https://raw.githubusercontent.com/GodX-18/picBed/main/image-20221226180224058.png" alt="image-20221226180224058" tabindex="0" loading="lazy"><figcaption>image-20221226180224058</figcaption></figure></li><li><p>操作数据库提供 API服务</p></li><li><p>实时聊天应用程序</p></li><li><p>不使用处理大量的业务逻辑</p></li></ul><h2 id="nodejs-实现-api服务" tabindex="-1"><a class="header-anchor" href="#nodejs-实现-api服务"><span>Nodejs 实现 API服务</span></a></h2><ol><li><p>安装依赖</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">yarn</span> <span class="token function">add</span> express ts-node 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>初始化 tsconfig文件</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>tsc <span class="token parameter variable">--init</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>编写 server.js 代码</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> express <span class="token keyword">from</span> <span class="token string">&quot;express&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Store <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./data&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/test&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span>Store<span class="token punctuation">.</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8888</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;GodX------&gt;log服务已启动。。。&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>Data.ts</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> list <span class="token keyword">from</span> <span class="token string">&quot;./list.json&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Store</span> <span class="token punctuation">{</span>
  <span class="token keyword">static</span> list <span class="token operator">=</span> list<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>List.json</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;zx&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;age&quot;</span><span class="token operator">:</span> <span class="token number">18</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;lisi&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;age&quot;</span><span class="token operator">:</span> <span class="token number">19</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">]</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>修改 tsconfig配置，支持引入 json 文件</p><figure><img src="https://raw.githubusercontent.com/GodX-18/picBed/main/image-20221227164940641.png" alt="image-20221227164940641" tabindex="0" loading="lazy"><figcaption>image-20221227164940641</figcaption></figure></li><li><p>启动服务，访问 localhost:8888/test</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">yarn</span> ts-node ./server.js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><h2 id="node-全局对象" tabindex="-1"><a class="header-anchor" href="#node-全局对象"><span>node 全局对象</span></a></h2><ul><li>Global 的根本作用就是做为宿主</li><li>全局对象可以看作是全局变量的宿主，比如 window（全局对象）和 alert（全局变量）</li><li>filename：返回正在执行脚本文件的绝对路径</li><li>dirname：返回正在执行脚本所在目录</li><li>timer类函数：执行顺序与事件循环间的关系</li><li>process：提供与当前进程互动的接口</li><li>require：实现模块的加载</li><li>module、 exports： 处理模块的导出</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;GodX------&gt;log&quot;</span><span class="token punctuation">,</span> __filename<span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;GodX------&gt;log&quot;</span><span class="token punctuation">,</span> __dirname<span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;GodX------&gt;log&quot;</span><span class="token punctuation">,</span> global<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 默认情况 this 是空对象</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;GodX------&gt;log&quot;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;GodX------&gt;log&quot;</span><span class="token punctuation">,</span> <span class="token keyword">this</span> <span class="token operator">==</span> global<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>

<span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;GodX------&gt;log&quot;</span><span class="token punctuation">,</span> <span class="token keyword">this</span> <span class="token operator">==</span> global<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="process" tabindex="-1"><a class="header-anchor" href="#process"><span>process</span></a></h2><ul><li>无需 require 直接使用</li><li>获取进程信息</li><li>执行进程操作</li></ul><p><strong>获取一些信息</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 内存</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;GodX------&gt;log&quot;</span><span class="token punctuation">,</span> process<span class="token punctuation">.</span><span class="token function">memoryUsage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//   rss: 25731072, 常驻内存</span>
<span class="token comment">//   heapTotal: 4481024, 堆区（总大小）</span>
<span class="token comment">//   heapUsed: 2811608, 实际使用的内存大小</span>
<span class="token comment">//   external: 911362, 扩展内存（底层模块 C/C++ 占用内存）</span>
<span class="token comment">//   arrayBuffers: 9898 缓存区大小</span>

<span class="token comment">// cpu</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;GodX------&gt;log&quot;</span><span class="token punctuation">,</span> process<span class="token punctuation">.</span><span class="token function">cpuUsage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// user: 36915, 用户</span>
<span class="token comment">// system: 8312 操作系统</span>

<span class="token comment">// 运行目录</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;GodX------&gt;log&quot;</span><span class="token punctuation">,</span> process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// node 环境</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;GodX------&gt;log&quot;</span><span class="token punctuation">,</span> process<span class="token punctuation">.</span>version<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;GodX------&gt;log&quot;</span><span class="token punctuation">,</span> process<span class="token punctuation">.</span>versions<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// cpu 架构</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;GodX------&gt;log&quot;</span><span class="token punctuation">,</span> process<span class="token punctuation">.</span>arch<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 用户环境</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;GodX------&gt;log&quot;</span><span class="token punctuation">,</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 环境变量</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;GodX------&gt;log&quot;</span><span class="token punctuation">,</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">PATH</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 系统环境变量</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;GodX------&gt;log&quot;</span><span class="token punctuation">,</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">USERPROFILE</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 用户管理员目录(Windows 平台)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;GodX------&gt;log&quot;</span><span class="token punctuation">,</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">HOME</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 用户管理员目录(MAC 平台)</span>

<span class="token comment">// 系统平台</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;GodX------&gt;log&quot;</span><span class="token punctuation">,</span> process<span class="token punctuation">.</span>platform<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 运行状态：启动参数、PID、运行时间</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;GodX------&gt;log&quot;</span><span class="token punctuation">,</span> process<span class="token punctuation">.</span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;GodX------&gt;log&quot;</span><span class="token punctuation">,</span> process<span class="token punctuation">.</span>argv0<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 快捷操作：第一个</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;GodX------&gt;log&quot;</span><span class="token punctuation">,</span> process<span class="token punctuation">.</span>execArgv<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 用户传入的参数 --params</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;GodX------&gt;log&quot;</span><span class="token punctuation">,</span> process<span class="token punctuation">.</span>pid<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ppid</span>

<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;GodX------&gt;log&quot;</span><span class="token punctuation">,</span> process<span class="token punctuation">.</span><span class="token function">uptime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 当前文件运行时间</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>事件</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>process<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;beforeExit&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">code</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;GodX------&gt;logbeforeExit&quot;</span><span class="token punctuation">,</span> code<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

process<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;exit&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">code</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;GodX------&gt;logexit&quot;</span><span class="token punctuation">,</span> code<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// exit 中不能够书写异步代码，会被自动忽略</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;GodX------&gt;log&quot;</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

process<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 手动退出程序</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;GodX------&gt;logfinish&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 同步代码优先执行</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// stdout-输出</span>

console<span class="token punctuation">.</span><span class="token function-variable function">log</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  process<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;---&quot;</span> <span class="token operator">+</span> data <span class="token operator">+</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;GodX------&gt;log11&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;GodX------&gt;log22&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;fs&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> filename <span class="token operator">=</span> __dirname <span class="token operator">+</span> <span class="token string">&quot;/test.txt&quot;</span><span class="token punctuation">;</span>
fs<span class="token punctuation">.</span><span class="token function">createReadStream</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>stdout<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// stdin-输入</span>

process<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>stdout<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 复制控制台输入并输出</span>

<span class="token comment">// 对用户输入二次处理</span>
process<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span><span class="token function">setEncoding</span><span class="token punctuation">(</span><span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
process<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;readable&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> chunk <span class="token operator">=</span> process<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>chunk <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    process<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;data&quot;</span> <span class="token operator">+</span> chunk<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,41),e=[o];function c(i,l){return s(),a("div",null,e)}const r=n(p,[["render",c],["__file","01-Node基础.html.vue"]]),k=JSON.parse('{"path":"/%E5%A4%A7%E5%89%8D%E7%AB%AF/Nodejs%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/01-Node%E5%9F%BA%E7%A1%80.html","title":"Node 基础","lang":"zh-CN","frontmatter":{"title":"Node 基础","icon":"structure","order":1,"category":["前端"],"tag":["nodejs"],"description":"Nodejs 可以做什么？ 轻量级、高性能的 Web 服务 前后端 JS 同构开发 便捷高效的前端工程化 Nodejs 架构 image-20221226104356196image-20221226104356196 Natives modules 内置核心模块：暴露相应的 JS 功能接口，供开发者直接进行调用 当前层内容由 JS 实现 提供应用程序...","head":[["meta",{"property":"og:url","content":"https://godx-18.github.io/%E5%A4%A7%E5%89%8D%E7%AB%AF/Nodejs%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/01-Node%E5%9F%BA%E7%A1%80.html"}],["meta",{"property":"og:site_name","content":"烜"}],["meta",{"property":"og:title","content":"Node 基础"}],["meta",{"property":"og:description","content":"Nodejs 可以做什么？ 轻量级、高性能的 Web 服务 前后端 JS 同构开发 便捷高效的前端工程化 Nodejs 架构 image-20221226104356196image-20221226104356196 Natives modules 内置核心模块：暴露相应的 JS 功能接口，供开发者直接进行调用 当前层内容由 JS 实现 提供应用程序..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.githubusercontent.com/GodX-18/picBed/main/image-20221226104356196.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-20T06:54:21.000Z"}],["meta",{"property":"article:author","content":"GodX"}],["meta",{"property":"article:tag","content":"nodejs"}],["meta",{"property":"article:modified_time","content":"2024-03-20T06:54:21.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Node 基础\\",\\"image\\":[\\"https://raw.githubusercontent.com/GodX-18/picBed/main/image-20221226104356196.png\\",\\"https://raw.githubusercontent.com/GodX-18/picBed/main/image-20221226115124046.png\\",\\"https://raw.githubusercontent.com/GodX-18/picBed/main/image-20221226154047982.png\\",\\"https://raw.githubusercontent.com/GodX-18/picBed/main/image-20221226154153310.png\\",\\"https://raw.githubusercontent.com/GodX-18/picBed/main/image-20221226180224058.png\\",\\"https://raw.githubusercontent.com/GodX-18/picBed/main/image-20221227164940641.png\\"],\\"dateModified\\":\\"2024-03-20T06:54:21.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"GodX\\",\\"url\\":\\"https://github.com/GodX-18\\"}]}"]]},"headers":[{"level":2,"title":"Nodejs 可以做什么？","slug":"nodejs-可以做什么","link":"#nodejs-可以做什么","children":[]},{"level":2,"title":"Nodejs 架构","slug":"nodejs-架构","link":"#nodejs-架构","children":[{"level":3,"title":"Natives modules","slug":"natives-modules","link":"#natives-modules","children":[]},{"level":3,"title":"Builtin modules","slug":"builtin-modules","link":"#builtin-modules","children":[]},{"level":3,"title":"底层","slug":"底层","link":"#底层","children":[]}]},{"level":2,"title":"为什么是 Nodejs","slug":"为什么是-nodejs","link":"#为什么是-nodejs","children":[]},{"level":2,"title":"Nodejs 异步 IO","slug":"nodejs-异步-io","link":"#nodejs-异步-io","children":[]},{"level":2,"title":"Node 事件驱动架构","slug":"node-事件驱动架构","link":"#node-事件驱动架构","children":[]},{"level":2,"title":"Nodejs 单线程","slug":"nodejs-单线程","link":"#nodejs-单线程","children":[]},{"level":2,"title":"Node 应用场景","slug":"node-应用场景","link":"#node-应用场景","children":[]},{"level":2,"title":"Nodejs 实现 API服务","slug":"nodejs-实现-api服务","link":"#nodejs-实现-api服务","children":[]},{"level":2,"title":"node 全局对象","slug":"node-全局对象","link":"#node-全局对象","children":[]},{"level":2,"title":"process","slug":"process","link":"#process","children":[]}],"git":{"createdTime":1678263228000,"updatedTime":1710917661000,"contributors":[{"name":"GodX","email":"1046529973@qq.com","commits":3}]},"readingTime":{"minutes":4.01,"words":1204},"filePathRelative":"大前端/Nodejs全栈开发/01-Node基础.md","localizedDate":"2023年3月8日","excerpt":"<h2>Nodejs 可以做什么？</h2>\\n<ul>\\n<li>轻量级、高性能的 Web 服务</li>\\n<li>前后端 JS 同构开发</li>\\n<li>便捷高效的前端工程化</li>\\n</ul>\\n<h2>Nodejs 架构</h2>\\n<figure><img src=\\"https://raw.githubusercontent.com/GodX-18/picBed/main/image-20221226104356196.png\\" alt=\\"image-20221226104356196\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>image-20221226104356196</figcaption></figure>","autoDesc":true}');export{r as comp,k as data};
