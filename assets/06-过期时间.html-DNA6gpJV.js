import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as t,c as n,a as s}from"./app-oXp7PBbS.js";const a={},i=s(`<p>在实际开发中经常会遇到一些有时效的数据，比如限时优惠活动、缓存或验证码等，过了一定时间就需要删除这些数据。在关系数据库中一般需要额外的一个字段记录到期时间，然后定期检测删除过期数据。而在 Redis 中可以设置一个键的过期时间，到时间后 Redis 会自动删除它。</p><h2 id="设置键的过期时间" tabindex="-1"><a class="header-anchor" href="#设置键的过期时间"><span>设置键的过期时间</span></a></h2><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 为给定 key 设置生存时间，当 key 过期时(生存时间为 0 )，它会被自动删除。</span>
EXPIRE key seconds

<span class="token comment"># 和 EXPIRE 一样，但是它以毫秒为单位</span>
PEXPIRE key milliseconds

<span class="token comment"># EXPIREAT 的作用和 EXPIRE 类似，都用于为 key 设置生存时间。</span>
<span class="token comment"># 不同在于 EXPIREAT 命令接受的时间参数是 UNIX 时间戳(unix timestamp)。</span>
EXPIREAT key timestamp

<span class="token comment"># 这个命令和 EXPIREAT 命令类似，但它以毫秒为单位设置 key 的过期 unix 时间戳，而不是像 EXPIREAT 那样，以秒为单位。</span>
PEXPIREAT key milliseconds-timestamp
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面这4个命令只是单位和表现形式上的不同，但实际上 EXPIRE、PEXPIRE 以及 EXPIREAT 命令的执行最后都会使用 PEXPIREAT 来实行。</p><p>比如使用 <code>EXPIRE</code> 来设置 KEY 的生存时间为 N 秒，那么后台是如何运行的呢：</p><ul><li>它会调用 <code>PEXPIRE</code> 命令把 N 秒转换为M毫秒</li><li>然后获取当前的 UNIX 时间单位也是毫秒</li><li>把当前 UNIX 时间加上 M 毫秒传递给 <code>PEXPREAT</code></li></ul><p>另外给键设置了过期时间，这个时间保存在一个字典里，也是键值结构，键是一个指针，指向真实的键，而值这是一个长整型的 UNIX 时间。</p><h2 id="获取键的过期时间" tabindex="-1"><a class="header-anchor" href="#获取键的过期时间"><span>获取键的过期时间</span></a></h2><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 以秒为单位，返回给定 key 的剩余生存时间(TTL, time to live)。</span>
TTL key

<span class="token comment"># 类似于 TTL，但它以毫秒为单位返回 key 的剩余生存时间。</span>
PTTL key
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>过期时间返回值说明：</p><table><thead><tr><th><strong>值</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>-2</td><td>过期且已删除</td></tr><tr><td>-1</td><td>没有过期时间设置，即永不过期</td></tr><tr><td>&gt;0</td><td>表示距离过期还有多少秒或者毫秒</td></tr></tbody></table><h2 id="清除键的过期时间" tabindex="-1"><a class="header-anchor" href="#清除键的过期时间"><span>清除键的过期时间</span></a></h2><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 移除给定 key 的生存时间，将这个 key 从『易失的』(带生存时间 key )转换成『持久的』(一个不带生存时间、永不过期的 key )。</span>
PERSIST key
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：</p><ul><li>使用 SET 或 GETSET 命令为键赋值也会同时清除键的过期时间。</li><li>其它只对键值进行操作的命令（如 INCR、LPUSH、HSET、ZREM）不会影响键的过期时间。</li></ul>`,15),d=[i];function l(o,c){return t(),n("div",null,d)}const p=e(a,[["render",l],["__file","06-过期时间.html.vue"]]),E=JSON.parse('{"path":"/%E5%A4%A7%E5%89%8D%E7%AB%AF/Nodejs%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/Redis/06-%E8%BF%87%E6%9C%9F%E6%97%B6%E9%97%B4.html","title":"过期时间","lang":"zh-CN","frontmatter":{"title":"过期时间","order":6,"category":["前端"],"tag":["nodejs","Redis"],"description":"在实际开发中经常会遇到一些有时效的数据，比如限时优惠活动、缓存或验证码等，过了一定时间就需要删除这些数据。在关系数据库中一般需要额外的一个字段记录到期时间，然后定期检测删除过期数据。而在 Redis 中可以设置一个键的过期时间，到时间后 Redis 会自动删除它。 设置键的过期时间 上面这4个命令只是单位和表现形式上的不同，但实际上 EXPIRE、PE...","head":[["meta",{"property":"og:url","content":"https://godx-18.github.io/%E5%A4%A7%E5%89%8D%E7%AB%AF/Nodejs%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/Redis/06-%E8%BF%87%E6%9C%9F%E6%97%B6%E9%97%B4.html"}],["meta",{"property":"og:site_name","content":"烜"}],["meta",{"property":"og:title","content":"过期时间"}],["meta",{"property":"og:description","content":"在实际开发中经常会遇到一些有时效的数据，比如限时优惠活动、缓存或验证码等，过了一定时间就需要删除这些数据。在关系数据库中一般需要额外的一个字段记录到期时间，然后定期检测删除过期数据。而在 Redis 中可以设置一个键的过期时间，到时间后 Redis 会自动删除它。 设置键的过期时间 上面这4个命令只是单位和表现形式上的不同，但实际上 EXPIRE、PE..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-11-22T00:58:07.000Z"}],["meta",{"property":"article:author","content":"GodX"}],["meta",{"property":"article:tag","content":"nodejs"}],["meta",{"property":"article:tag","content":"Redis"}],["meta",{"property":"article:modified_time","content":"2023-11-22T00:58:07.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"过期时间\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-11-22T00:58:07.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"GodX\\",\\"url\\":\\"https://github.com/GodX-18\\"}]}"]]},"headers":[{"level":2,"title":"设置键的过期时间","slug":"设置键的过期时间","link":"#设置键的过期时间","children":[]},{"level":2,"title":"获取键的过期时间","slug":"获取键的过期时间","link":"#获取键的过期时间","children":[]},{"level":2,"title":"清除键的过期时间","slug":"清除键的过期时间","link":"#清除键的过期时间","children":[]}],"git":{"createdTime":1700614687000,"updatedTime":1700614687000,"contributors":[{"name":"GodX","email":"1046529973@qq.com","commits":1}]},"readingTime":{"minutes":2.18,"words":654},"filePathRelative":"大前端/Nodejs全栈开发/Redis/06-过期时间.md","localizedDate":"2023年11月22日","excerpt":"<p>在实际开发中经常会遇到一些有时效的数据，比如限时优惠活动、缓存或验证码等，过了一定时间就需要删除这些数据。在关系数据库中一般需要额外的一个字段记录到期时间，然后定期检测删除过期数据。而在 Redis 中可以设置一个键的过期时间，到时间后 Redis 会自动删除它。</p>\\n<h2>设置键的过期时间</h2>\\n<div class=\\"language-bash\\" data-ext=\\"sh\\" data-title=\\"sh\\"><pre class=\\"language-bash\\"><code><span class=\\"token comment\\"># 为给定 key 设置生存时间，当 key 过期时(生存时间为 0 )，它会被自动删除。</span>\\nEXPIRE key seconds\\n\\n<span class=\\"token comment\\"># 和 EXPIRE 一样，但是它以毫秒为单位</span>\\nPEXPIRE key milliseconds\\n\\n<span class=\\"token comment\\"># EXPIREAT 的作用和 EXPIRE 类似，都用于为 key 设置生存时间。</span>\\n<span class=\\"token comment\\"># 不同在于 EXPIREAT 命令接受的时间参数是 UNIX 时间戳(unix timestamp)。</span>\\nEXPIREAT key timestamp\\n\\n<span class=\\"token comment\\"># 这个命令和 EXPIREAT 命令类似，但它以毫秒为单位设置 key 的过期 unix 时间戳，而不是像 EXPIREAT 那样，以秒为单位。</span>\\nPEXPIREAT key milliseconds-timestamp\\n</code></pre></div>","autoDesc":true}');export{p as comp,E as data};
