import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as s,a as t}from"./app-oXp7PBbS.js";const e={},p=t(`<h2 id="graphql-是什么" tabindex="-1"><a class="header-anchor" href="#graphql-是什么"><span>GraphQL 是什么？</span></a></h2><p><strong>GraphQL</strong> 是一种用于 API 的查询语言，由 Facebook 于 2015 年开发，并在 2018 年开源。它的目标是提供一种替代 RESTful 架构的方案。让我们深入了解一下：</p><ol><li><p><strong>查询精确性</strong>：GraphQL 允许客户端精确地请求所需的数据，避免了不必要的数据传输。相比之下，RESTful API 通常返回整个资源，而客户端只需要其中一部分数据。</p></li><li><p><strong>灵活性</strong>：GraphQL 的查询语法直观易懂，允许在一行或几行中发出 API 请求，而不是访问具有大量参数的复杂端点。这使得开发者能够更轻松地生成和响应 API 查询。</p></li><li><p><strong>图状数据查询</strong>：GraphQL 特别适用于查询图状数据。例如，在 Facebook 上查看用户信息时，你可能需要获取用户的名字、头像、好友列表、照片和帖子等多层次的数据。使用传统的 RESTful API，需要多个请求才能获取所有这些数据，而 GraphQL 可以一次性获取整个页面所需的数据。</p></li><li><p><strong>灵活的后端设计</strong>：GraphQL 不限定后端存储类型。虽然它背后的实际存储可以选择 NoSQL 类型的数据库，但也可以使用 SQL 类型的数据库，或者其他任何存储方式（例如文本文件、内存中等）。</p></li></ol><p>总之，GraphQL 是一种强大且灵活的查询语言，适用于构建现代应用程序的 API。</p><h2 id="快速体验" tabindex="-1"><a class="header-anchor" href="#快速体验"><span>快速体验</span></a></h2><ol><li><p>安装</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">yarn</span> <span class="token function">add</span> graphql
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>使用</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token punctuation">{</span> graphql<span class="token punctuation">,</span> buildSchema <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;graphql&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> schema <span class="token operator">=</span> <span class="token function">buildSchema</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
  type Query {
    hello: String
    foo: Int
  }
</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> rootValue <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token function-variable function">hello</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&quot;Hello world!&quot;</span><span class="token punctuation">,</span> <span class="token function-variable function">foo</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token number">888</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> source <span class="token operator">=</span> <span class="token string">&quot;{ hello, foo }&quot;</span><span class="token punctuation">;</span>

<span class="token function">graphql</span><span class="token punctuation">(</span><span class="token punctuation">{</span> schema<span class="token punctuation">,</span> source<span class="token punctuation">,</span> rootValue <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/GodX-18/picBed/main/image-20240419204419852.png" alt="image-20240419204419852" tabindex="0" loading="lazy"><figcaption>image-20240419204419852</figcaption></figure></li></ol>`,6),o=[p];function i(l,c){return a(),s("div",null,o)}const d=n(e,[["render",i],["__file","01-基础.html.vue"]]),h=JSON.parse('{"path":"/%E5%A4%A7%E5%89%8D%E7%AB%AF/Nodejs%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/GraphQL/01-%E5%9F%BA%E7%A1%80.html","title":"基础","lang":"zh-CN","frontmatter":{"title":"基础","order":1,"category":["前端"],"tag":["GraphQL"],"description":"GraphQL 是什么？ GraphQL 是一种用于 API 的查询语言，由 Facebook 于 2015 年开发，并在 2018 年开源。它的目标是提供一种替代 RESTful 架构的方案。让我们深入了解一下： 查询精确性：GraphQL 允许客户端精确地请求所需的数据，避免了不必要的数据传输。相比之下，RESTful API 通常返回整个资源，而...","head":[["meta",{"property":"og:url","content":"https://godx-18.github.io/%E5%A4%A7%E5%89%8D%E7%AB%AF/Nodejs%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/GraphQL/01-%E5%9F%BA%E7%A1%80.html"}],["meta",{"property":"og:site_name","content":"烜"}],["meta",{"property":"og:title","content":"基础"}],["meta",{"property":"og:description","content":"GraphQL 是什么？ GraphQL 是一种用于 API 的查询语言，由 Facebook 于 2015 年开发，并在 2018 年开源。它的目标是提供一种替代 RESTful 架构的方案。让我们深入了解一下： 查询精确性：GraphQL 允许客户端精确地请求所需的数据，避免了不必要的数据传输。相比之下，RESTful API 通常返回整个资源，而..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.githubusercontent.com/GodX-18/picBed/main/image-20240419204419852.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-08T06:08:17.000Z"}],["meta",{"property":"article:author","content":"GodX"}],["meta",{"property":"article:tag","content":"GraphQL"}],["meta",{"property":"article:modified_time","content":"2024-05-08T06:08:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"基础\\",\\"image\\":[\\"https://raw.githubusercontent.com/GodX-18/picBed/main/image-20240419204419852.png\\"],\\"dateModified\\":\\"2024-05-08T06:08:17.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"GodX\\",\\"url\\":\\"https://github.com/GodX-18\\"}]}"]]},"headers":[{"level":2,"title":"GraphQL 是什么？","slug":"graphql-是什么","link":"#graphql-是什么","children":[]},{"level":2,"title":"快速体验","slug":"快速体验","link":"#快速体验","children":[]}],"git":{"createdTime":1715148497000,"updatedTime":1715148497000,"contributors":[{"name":"GodX","email":"1046529973@qq.com","commits":1}]},"readingTime":{"minutes":1.49,"words":447},"filePathRelative":"大前端/Nodejs全栈开发/GraphQL/01-基础.md","localizedDate":"2024年5月8日","excerpt":"<h2>GraphQL 是什么？</h2>\\n<p><strong>GraphQL</strong> 是一种用于 API 的查询语言，由 Facebook 于 2015 年开发，并在 2018 年开源。它的目标是提供一种替代 RESTful 架构的方案。让我们深入了解一下：</p>\\n<ol>\\n<li>\\n<p><strong>查询精确性</strong>：GraphQL 允许客户端精确地请求所需的数据，避免了不必要的数据传输。相比之下，RESTful API 通常返回整个资源，而客户端只需要其中一部分数据。</p>\\n</li>\\n<li>\\n<p><strong>灵活性</strong>：GraphQL 的查询语法直观易懂，允许在一行或几行中发出 API 请求，而不是访问具有大量参数的复杂端点。这使得开发者能够更轻松地生成和响应 API 查询。</p>\\n</li>\\n<li>\\n<p><strong>图状数据查询</strong>：GraphQL 特别适用于查询图状数据。例如，在 Facebook 上查看用户信息时，你可能需要获取用户的名字、头像、好友列表、照片和帖子等多层次的数据。使用传统的 RESTful API，需要多个请求才能获取所有这些数据，而 GraphQL 可以一次性获取整个页面所需的数据。</p>\\n</li>\\n<li>\\n<p><strong>灵活的后端设计</strong>：GraphQL 不限定后端存储类型。虽然它背后的实际存储可以选择 NoSQL 类型的数据库，但也可以使用 SQL 类型的数据库，或者其他任何存储方式（例如文本文件、内存中等）。</p>\\n</li>\\n</ol>","autoDesc":true}');export{d as comp,h as data};
