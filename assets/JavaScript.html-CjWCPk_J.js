import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,a as t}from"./app-oXp7PBbS.js";const e={},p=t(`<h2 id="js-中的-8-种数据类型及区别" tabindex="-1"><a class="header-anchor" href="#js-中的-8-种数据类型及区别"><span>JS 中的 8 种数据类型及区别</span></a></h2><p>JavaScript 中有多种数据类型，它们在存储方式和特性上有所不同。让我们一起来了解这些数据类型：</p><ol><li><p><strong>基本数据类型</strong>：</p><ul><li><strong>Number</strong>（数字）：包括整数和浮点数。整数可以是十进制、八进制（以零开头）或十六进制（以0x开头）。浮点数必须包含小数点，也可以使用科学计数法表示。</li><li><strong>String</strong>（字符串）：用双引号、单引号或反引号表示。字符串是不可变的，一旦创建，其值不会改变。</li><li><strong>Boolean</strong>（布尔值）：只有两个字面值，即 <code>true</code> 和 <code>false</code>。</li><li><strong>Undefined</strong>（未定义）：表示变量已声明但未初始化。</li><li><strong>null</strong>（空值）：表示一个空对象指针。</li><li><strong>Symbol</strong>（符号）：ES6 新增的原始值，用于确保对象属性的唯一性。</li></ul></li><li><p><strong>引用数据类型</strong>：</p><ul><li><strong>Object</strong>（对象）：使用对象字面量表示法，属性名可以是字符串或数值。</li><li><strong>Array</strong>（数组）：有序的数据集合，每个槽位可以存储任意类型的数据。</li><li><strong>Function</strong>（函数）：函数是对象，可以通过函数声明、函数表达式或箭头函数来创建。</li></ul></li><li><p><strong>存储区别</strong>：</p><ul><li>基本数据类型存储在<strong>栈</strong>中。</li><li>引用数据类型的对象存储在<strong>堆</strong>中。</li><li>基本类型的值是按值引用，而引用类型的值是按地址引用。</li></ul></li></ol><h2 id="什么是-symbol" tabindex="-1"><a class="header-anchor" href="#什么是-symbol"><span>什么是 Symbol</span></a></h2><h2 id="js-中数据类型检测" tabindex="-1"><a class="header-anchor" href="#js-中数据类型检测"><span>JS 中数据类型检测</span></a></h2><h2 id="var-cosnt-let-三者之间的区别" tabindex="-1"><a class="header-anchor" href="#var-cosnt-let-三者之间的区别"><span>var/cosnt/let 三者之间的区别</span></a></h2><h2 id="settimeout-promise-async-await-的区别" tabindex="-1"><a class="header-anchor" href="#settimeout-promise-async-await-的区别"><span>setTimeout/Promise/Async/Await 的区别</span></a></h2><h2 id="异步编程的发展历程" tabindex="-1"><a class="header-anchor" href="#异步编程的发展历程"><span>异步编程的发展历程</span></a></h2><p>JavaScript 的异步编程经历了多个阶段，从最早的回调函数到现在的 <code>async/await</code>。让我们一起探讨一下这些阶段：</p><ol><li><p><strong>回调函数 (Callbacks)</strong>:</p><ul><li><p>回调函数是最早用于处理异步操作的方式之一。</p></li><li><p>通过将函数作为参数传递给后台执行的其他函数，当后台代码执行完毕时，调用回调函数来通知工作已完成。</p></li><li><p>优点：解决了同步问题，但存在回调地狱和错误处理复杂的问题。</p></li><li><p>示例代码：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token function-variable function">readFile</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">path<span class="token punctuation">,</span> callBack</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">callBack</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&#39;first&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;first readFile success&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&#39;second&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;second readFile success&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// ... more nested callbacks</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><strong>Promise</strong>:</p><ul><li><p>Promise 是一种代表异步操作的对象，可以将异步操作的成功返回值或失败原因与相应的处理程序关联起来。</p></li><li><p>可以像同步方法一样返回值，避免了回调地狱。</p></li><li><p>优点：状态改变后不再变，可读性较好。</p></li><li><p>缺点：无法取消 Promise，无法得知进展状态。</p></li><li><p>示例代码：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token function-variable function">readFile</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>path<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">&#39;error!!!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>path <span class="token operator">+</span> <span class="token string">&#39; readFile success&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&#39;first&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&#39;second&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&#39;third&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token comment">// ... more chained promises</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><strong>Generator</strong>:</p><ul><li><p>Generator 函数是 ES6 中提供的一种异步编程解决方案。</p></li><li><p>可以暂停和恢复执行，需要使用 <code>next()</code> 函数来继续执行下面的代码。</p></li><li><p>优点：可以控制函数的执行，但流程管理不方便。</p></li><li><p>示例代码：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">readFile</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> ms</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">&#39;读完了&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> ms<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> <span class="token function-variable function">gen</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">yield</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&#39;first&#39;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">yield</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&#39;second&#39;</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// ... more yield statements</span>
  <span class="token keyword">return</span> <span class="token string">&#39;完成了&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> g <span class="token operator">=</span> <span class="token function">gen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
g<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> g<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> g<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token comment">// ... more chained promises</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><strong>async/await</strong>:</p><ul><li><code>async/await</code> 是 ES2017 引入的语法糖，使异步代码看起来像同步代码一样。</li><li>可以使用 <code>try...catch</code> 来捕获错误。</li><li>优点：可读性好，解决了回调地狱问题。</li><li>缺点：无法取消异步操作。</li></ul></li></ol><h2 id="this-指向" tabindex="-1"><a class="header-anchor" href="#this-指向"><span>this 指向</span></a></h2><p>我们要彻底掌握 this 指向问题，其实只要搞清楚<strong>词法作用域</strong>和<strong>动态作用域</strong>就可以了，下面我们来简单介绍一下：</p><ul><li>词法作用域：函数的作用域在<strong>函数定义</strong>的时候就决定了。</li><li>动态作用域，函数的作用域是在<strong>函数调用</strong>的时候才决定的。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 词法作用域</span>
<span class="token keyword">var</span> fullname <span class="token operator">=</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">fullName</span><span class="token operator">:</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">prop</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">fullname</span><span class="token operator">:</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">getFullname</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// 箭头函数的 this 指向为外层的词法作用域，因为对象没有词法作用域所以指向其实就是全局作用域</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>fullname<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>prop<span class="token punctuation">.</span><span class="token function">getFullname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// a</span>
<span class="token comment">// 函数在哪里调用没有关系，变量的位置在编译的词法分析阶段就确定了。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们再将箭头函数改成普通函数：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 词法作用域</span>
<span class="token keyword">var</span> fullname <span class="token operator">=</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">fullName</span><span class="token operator">:</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">prop</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">fullname</span><span class="token operator">:</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">getFullname</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 此时的 this 指向其实是 prop 对象</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>fullname<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>prop<span class="token punctuation">.</span><span class="token function">getFullname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// c</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">注意</p><ul><li><p>JavaScript 中其实只有词法作用域，并没有动态作用域。只是 this 的执行机制让作用域表现的像动态作用域(使用普通函数的时候)，this 的绑定是在代码执行的时候确定的。</p></li><li><p>箭头函数的 this 指向为外层的词法作用域</p></li></ul></div><h2 id="call-apply-bind-三者的区别" tabindex="-1"><a class="header-anchor" href="#call-apply-bind-三者的区别"><span>call/apply/bind 三者的区别</span></a></h2><p>call、apply和bind是JavaScript中用于改变函数内部this指向的三种方法。</p><p>call和apply都是立即调用函数的方法，它们的作用是改变函数内部的this指向。它们的区别在于传入参数的方式不同，call是逐个传入参数，而apply是以数组的形式传入参数。</p><p>bind方法则是创建一个新的函数，并将原函数的this指向绑定到指定的对象。但是bind方法不会立即调用函数，而是返回一个新的函数，需要手动调用才会执行原函数。</p><h2 id="eventloop-事件循环" tabindex="-1"><a class="header-anchor" href="#eventloop-事件循环"><span>EventLoop 事件循环</span></a></h2><p>在<strong>JavaScript</strong>中，<strong>事件循环</strong>是一种处理<strong>异步操作</strong>的机制。它让我们能够在代码执行过程中处理各种异步任务，比如网络请求、定时器和用户交互等。让我用通俗易懂的语言解释一下：</p><ol><li><p><strong>单线程</strong>：首先，要知道<strong>JavaScript</strong>是一门<strong>单线程</strong>的语言。这意味着它一次只能处理一个任务，而不是像多线程语言那样同时处理多个任务。</p></li><li><p><strong>事件队列</strong>：当我们遇到需要等待某些操作结果的语句时，<strong>JavaScript</strong>引擎不会一直等待，而是将这些语句放入一个<strong>事件队列</strong>中。例如，当你发起一个网络请求或设置一个定时器时，这些操作会被放入队列中。</p></li><li><p><strong>主线程</strong>：<strong>JavaScript</strong>引擎会继续执行其他代码，而不会阻塞在等待的操作上。这就像你在超市排队结账，虽然你在等待，但你可以同时看手机或聊天。</p></li><li><p><strong>异步操作完成</strong>：当异步操作（比如网络请求返回数据或定时器时间到了）完成时，对应的事件会被加入到事件队列中。</p></li><li><p><strong>事件循环</strong>：<strong>事件循环</strong>就是不断地检查事件队列，如果队列中有待处理的事件，就会执行它们。这样，<strong>JavaScript</strong>就能在单线程下处理异步任务。</p></li></ol><p>现在，让我用一个生活中的例子来说明。假设你在做家务，你需要同时洗衣服和煮饭。你不会一直等着洗衣服完再去煮饭，而是先放洗衣机洗衣服，然后去做其他事情，比如切菜、炒菜等。当洗衣机洗完衣服时，你会立刻去晾衣服，这就是一种类似于<strong>事件循环</strong>的机制。</p><h2 id="为什么-js-是单线程的" tabindex="-1"><a class="header-anchor" href="#为什么-js-是单线程的"><span>为什么 JS 是单线程的</span></a></h2><p>JavaScript语言的一大特点就是单线程，也就是说，同一个时间只能做一件事。那么，为什么JavaScript不能有多个线程呢？这样能提高效率啊。</p><p>JavaScript的单线程，与它的用途有关。作为浏览器脚本语言，JavaScript的主要用途是与用户互动，以及操作DOM。这决定了它只能是单线程，否则会带来很复杂的同步问题。比如，假定JavaScript同时有两个线程，一个线程在某个DOM节点上添加内容，另一个线程删除了这个节点，这时浏览器应该以哪个线程为准？</p><p>所以，为了避免复杂性，从一诞生，JavaScript就是单线程，这已经成了这门语言的核心特征，将来也不会改变。</p><p>为了利用多核CPU的计算能力，HTML5提出Web Worker标准，允许JavaScript脚本创建多个线程，但是子线程完全受主线程控制，且不得操作DOM。所以，这个新标准并没有改变JavaScript单线程的本质。</p><h2 id="js-是如何实现异步编程的" tabindex="-1"><a class="header-anchor" href="#js-是如何实现异步编程的"><span>JS 是如何实现异步编程的</span></a></h2><h2 id="宏任务和微任务都有哪些" tabindex="-1"><a class="header-anchor" href="#宏任务和微任务都有哪些"><span>宏任务和微任务都有哪些</span></a></h2><p>在<strong>JavaScript</strong>中，异步任务被分为两类：<strong>宏任务（MacroTask）<strong>和</strong>微任务（MicroTask）</strong>。让我解释一下它们的区别：</p><ol><li><strong>宏任务</strong>： <ul><li>宏任务是在<strong>JavaScript事件循环</strong>中的下一阶段执行的任务。</li><li>它包括一些需要较长时间才能完成的操作，例如： <ul><li><code>setInterval</code></li><li><code>setTimeout</code></li><li>异步函数</li><li>I/O 操作</li><li>UI 渲染等</li></ul></li></ul></li><li><strong>微任务</strong>： <ul><li>微任务是在宏任务之后立即执行的任务。</li><li>它通常用于处理一些需要快速响应的操作，例如： <ul><li><code>Promise.then</code></li><li><code>async/await</code></li></ul></li></ul></li></ol><h2 id="为什么要区分宏任务和微任务" tabindex="-1"><a class="header-anchor" href="#为什么要区分宏任务和微任务"><span>为什么要区分宏任务和微任务</span></a></h2><ul><li><strong>性能优化</strong>：微任务的执行速度更快，因为它们不需要等待下一个事件循环迭代。这对于响应性能要求高的应用程序非常重要。</li><li><strong>避免阻塞主线程</strong>：如果将异步操作直接放在宏任务中，可能会阻塞主线程，导致应用程序变得不流畅。使用微任务可以将这些操作分散到更小的任务中，避免阻塞。</li></ul><p>现在，让我们用一个生活中的例子来说明：</p><p>想象你正在银行办理业务。每个人的业务可以看作是一个<strong>宏任务</strong>，例如存钱、买纪念币、购买理财产品或办理信用卡。这些业务需要一定的时间来完成，就像在JavaScript中的宏任务一样。</p><p>现在，让我们来看看<strong>微任务</strong>。假设有一个人，他的业务包括存钱、买纪念币、购买理财产品和办理信用卡。这些业务中的每一个都是一个<strong>微任务</strong>。微任务不需要等待很长时间，而是在主线程上的同步任务执行完毕后立即执行。</p><p>总之，<strong>微任务</strong>比<strong>宏任务</strong>执行得更快，因为它们被放在了更高的优先级上，而且通常用于处理一些需要快速响应的操作。</p><h2 id="防抖节流" tabindex="-1"><a class="header-anchor" href="#防抖节流"><span>防抖节流</span></a></h2><h2 id="闭包使用场景" tabindex="-1"><a class="header-anchor" href="#闭包使用场景"><span>闭包使用场景</span></a></h2><h2 id="作用域与作用域链" tabindex="-1"><a class="header-anchor" href="#作用域与作用域链"><span>作用域与作用域链</span></a></h2><h2 id="原型与原型链" tabindex="-1"><a class="header-anchor" href="#原型与原型链"><span>原型与原型链</span></a></h2><ol><li><strong>原型</strong>： <ul><li>在 JavaScript 中，每个对象都有一个私有属性，指向另一个对象，这个对象被称为“原型”。</li><li>原型是一个对象，它包含共享的属性和方法，可以被其他对象继承。</li><li>对象通过 <code>__proto__</code> 属性（或者更标准的 <code>Object.getPrototypeOf()</code> 方法）连接到其原型。</li></ul></li><li><strong>原型链</strong>： <ul><li>原型链是一系列对象的链接，每个对象都有一个原型，直到达到原型链的末尾（通常是 <code>null</code>）。</li><li>当我们访问一个对象的属性时，JavaScript 会沿着原型链向上搜索，直到找到匹配的属性或到达链的末尾。</li><li>这使得对象之间可以共享属性和方法，实现了继承。</li></ul></li></ol><p>让我们通过一个简单的示例来理解原型和原型链：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> parent <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
  <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 创建一个继承自 parent 的对象</span>
<span class="token keyword">const</span> child <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">__proto__</span><span class="token operator">:</span> parent<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>child<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个示例中，<code>child</code> 对象继承了 <code>parent</code> 对象的属性和方法。当调用 <code>child.method()</code> 时，<code>this</code> 指向了 <code>child</code>，因此返回了正确的值。</p><p>原型和原型链是 JavaScript 中非常重要的概念，深入理解它们有助于更好地编写和理解代码。</p><h2 id="普通函数和箭头函数区别" tabindex="-1"><a class="header-anchor" href="#普通函数和箭头函数区别"><span>普通函数和箭头函数区别</span></a></h2><p>当谈到<strong>普通函数</strong>和<strong>箭头函数</strong>时，它们之间有一些关键区别。让我们来看看这些区别：</p><ol><li><p><strong>声明方式不同</strong>：</p><ul><li>普通函数可以是声明式的，也可以是赋值式的。</li><li>箭头函数只能以赋值式的方式定义。</li></ul></li><li><p><strong>this 指向不同</strong>：</p><ul><li>普通函数具有原型（prototype），因此其 this 指向不确定。</li><li>箭头函数本身没有 this，它继承自定义它的上下文。换句话说，箭头函数的 this 指向是固定的，取决于外层函数的 this。</li></ul></li><li><p><strong>arguments 对象</strong>：</p><ul><li>普通函数中可以使用 <code>arguments</code> 对象，它代表函数调用时传递的参数。</li><li>箭头函数没有 <code>arguments</code> 对象，因此无法直接访问传递给它的参数。</li></ul></li><li><p><strong>作为构造函数</strong>：</p><ul><li>普通函数可以作为构造函数，使用 <code>new</code> 关键字生成实例。</li><li>箭头函数不能作为构造函数，因为它没有自己的 <code>this</code> 变量，也没有 <code>prototype</code> 对象。</li></ul></li></ol><p>总之，普通函数更灵活，适用于需要明确上下文的场景，而箭头函数则更适合函数式编程风格，具有更简洁的语法。</p><h2 id="for-in-for-of-的区别" tabindex="-1"><a class="header-anchor" href="#for-in-for-of-的区别"><span>for-in for-of 的区别</span></a></h2><p>当谈到 JavaScript 中的循环语句时，<strong>for-in</strong> 和 <strong>for-of</strong> 是两个常用的变体。尽管它们看起来相似，但在迭代对象方面有一些关键区别。让我们详细探讨一下：</p><ol><li><p><strong>for-in 循环</strong>：</p><ul><li>用于迭代对象的属性，遍历对象中的所有可枚举属性，包括从原型链继承的属性。</li><li>通常用于遍历对象的键名。</li><li>循环的顺序是不确定的，因为对象属性没有固定的顺序。</li><li>可能会迭代到不是自身属性的属性，因此需要使用 <code>hasOwnProperty</code> 方法来检查属性是否为对象自身的属性。</li></ul><p>示例：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;John&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token literal-property property">gender</span><span class="token operator">:</span> <span class="token string">&#39;male&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> person<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> person<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>for-of 循环</strong>：</p><ul><li>用于迭代可迭代对象，如数组、字符串、Map、Set、TypedArray 等。</li><li>通常用于遍历数组或字符串的值。</li><li>不适用于迭代对象的属性，如果尝试使用会抛出 TypeError 异常。</li><li>循环的顺序是确定的，因为可迭代对象的值是按照一定顺序排列的。</li></ul><p>示例：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> value <span class="token keyword">of</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>区别总结</strong>：</p><ul><li><strong>迭代内容</strong>：for-in 循环迭代对象的是键名，for-of 循环迭代对象的是值。</li><li><strong>迭代类型</strong>：for-in 循环适用于遍历对象，for-of 循环适用于遍历可迭代对象。</li><li><strong>迭代顺序</strong>：for-in 循环的顺序不确定，for-of 循环的顺序是确定的。</li><li><strong>原理</strong>：for-in 循环遍历对象时会包含从原型链继承的属性，for-of 循环遍历的对象是可迭代对象，它们的值是可枚举的。</li></ul></li></ol><p>在选择使用 for-in 循环还是 for-of 循环时，需要根据对象的类型和需要迭代的内容来选择合适的循环方法。通常，如果需要迭代对象的键名，可以使用 for-in 循环；如果需要迭代对象的值，可以使用 for-of 循环。同时，需要注意 for-in 循环的一些缺陷，避免在数组和字符串上使用它。</p><h2 id="和-的区别" tabindex="-1"><a class="header-anchor" href="#和-的区别"><span>== 和 === 的区别</span></a></h2><p>在 JavaScript 中，<code>==</code> 和 <code>===</code> 是两个用于比较的运算符，它们之间有一些关键区别：</p><ol><li><p><strong><code>==</code>（相等运算符）</strong>：</p><ul><li>检查其两个操作数是否相等，并返回一个布尔值结果。</li><li>不同类型的操作数会尝试强制类型转换，然后进行比较。</li><li>如果操作数具有相同的类型，按照以下方式进行比较： <ul><li>对象：仅当两个操作数引用同一个对象时返回 <code>true</code>。</li><li>字符串：只有当两个操作数具有相同的字符且顺序相同时才返回 <code>true</code>。</li><li>数值：如果两个操作数的值相同，则返回 <code>true</code>。+0 和 -0 被视为相同的值。</li><li>布尔值：仅当操作数都为 <code>true</code> 或都为 <code>false</code> 时返回 <code>true</code>。</li><li>其他类型（如大整形、符号等）：仅当两个操作数值相同时返回 <code>true</code>。</li></ul></li><li>如果其中一个操作数是 <code>null</code> 或 <code>undefined</code>，另一个操作数也必须为 <code>null</code> 或 <code>undefined</code> 才返回 <code>true</code>。</li><li>否则返回 <code>false</code>。</li></ul></li><li><p><strong><code>===</code>（严格相等运算符）</strong>：</p><ul><li>先判断数据类型，如果类型不匹配就直接返回 <code>false</code>。</li><li>如果类型相同，再判断其值是否相同，如果值也相同则返回 <code>true</code>，否则返回 <code>false</code>。</li><li><code>===</code> 表示的是绝对的相等，不会进行类型转换。</li></ul></li></ol><p>下面是一些示例来说明它们之间的区别：</p><ul><li>没有类型转换的比较： <ul><li><code>1 == 1; // true</code></li><li><code>&quot;hello&quot; == &quot;hello&quot;; // true</code></li></ul></li><li>有类型转换的比较： <ul><li><code>&quot;1&quot; == 1; // true</code></li><li><code>0 == false; // true</code></li><li><code>0 == null; // false</code></li><li><code>0 == undefined; // false</code></li></ul></li><li>比较对象： <ul><li><code>const object1 = { key: &quot;value&quot; };</code><ul><li><code>console.log(object1 == object1); // true</code></li><li><code>console.log(object1 == object2); // false</code></li></ul></li><li>比较字符串和 String 对象： <ul><li><code>const string1 = &quot;hello&quot;;</code></li><li><code>const string2 = String(&quot;hello&quot;);</code></li><li><code>console.log(string1 == string2); // true</code></li></ul></li><li>比较日期和字符串： <ul><li><code>const d = new Date(&quot;December 17, 1995 03:24:00&quot;);</code></li><li><code>const s = d.toString();</code></li><li><code>console.log(d == s); // true</code></li></ul></li><li>比较数组和字符串： <ul><li><code>const a = [1, 2, 3];</code></li><li><code>const b = &quot;1,2,3&quot;;</code></li><li><code>console.log(a == b); // true</code></li></ul></li></ul></li></ul><p>总之，<code>===</code> 是严格相等运算符，不会进行类型转换，而 <code>==</code> 是相等运算符，会尝试类型转换。根据需要选择合适的运算符来进行比较。</p><h2 id="数组的操作方法" tabindex="-1"><a class="header-anchor" href="#数组的操作方法"><span>数组的操作方法</span></a></h2><ul><li>reduce</li><li>map</li><li>forEach</li><li>Every</li><li>any</li><li>splice</li><li>indexOf</li><li>find</li><li>Filter</li><li>Slice</li><li>Split</li></ul><h2 id="数组转化为字符串" tabindex="-1"><a class="header-anchor" href="#数组转化为字符串"><span>数组转化为字符串</span></a></h2><h2 id="事件冒泡和事件委托和事件捕获" tabindex="-1"><a class="header-anchor" href="#事件冒泡和事件委托和事件捕获"><span>事件冒泡和事件委托和事件捕获</span></a></h2><h2 id="阻止事件冒泡、阻止默认事件" tabindex="-1"><a class="header-anchor" href="#阻止事件冒泡、阻止默认事件"><span>阻止事件冒泡、阻止默认事件</span></a></h2><h2 id="nodejs-和传统-js-有什么区别" tabindex="-1"><a class="header-anchor" href="#nodejs-和传统-js-有什么区别"><span>nodejs 和传统 js 有什么区别</span></a></h2><h2 id="js-中取整办法" tabindex="-1"><a class="header-anchor" href="#js-中取整办法"><span>js 中取整办法</span></a></h2><h2 id="函数提升和变量提升" tabindex="-1"><a class="header-anchor" href="#函数提升和变量提升"><span>函数提升和变量提升</span></a></h2><h2 id="es6-出了哪些新语法" tabindex="-1"><a class="header-anchor" href="#es6-出了哪些新语法"><span>ES6 出了哪些新语法</span></a></h2>`,72),o=[p];function l(i,c){return s(),a("div",null,o)}const d=n(e,[["render",l],["__file","JavaScript.html.vue"]]),k=JSON.parse('{"path":"/%E9%9D%A2%E8%AF%95/JavaScript.html","title":"JavaScript","lang":"zh-CN","frontmatter":{"title":"JavaScript","icon":"js","date":"2023-05-22T00:00:00.000Z","order":3,"category":["面试"],"tag":["JavaScript"],"description":"JS 中的 8 种数据类型及区别 JavaScript 中有多种数据类型，它们在存储方式和特性上有所不同。让我们一起来了解这些数据类型： 基本数据类型： Number（数字）：包括整数和浮点数。整数可以是十进制、八进制（以零开头）或十六进制（以0x开头）。浮点数必须包含小数点，也可以使用科学计数法表示。 String（字符串）：用双引号、单引号或反引号...","head":[["meta",{"property":"og:url","content":"https://godx-18.github.io/%E9%9D%A2%E8%AF%95/JavaScript.html"}],["meta",{"property":"og:site_name","content":"烜"}],["meta",{"property":"og:title","content":"JavaScript"}],["meta",{"property":"og:description","content":"JS 中的 8 种数据类型及区别 JavaScript 中有多种数据类型，它们在存储方式和特性上有所不同。让我们一起来了解这些数据类型： 基本数据类型： Number（数字）：包括整数和浮点数。整数可以是十进制、八进制（以零开头）或十六进制（以0x开头）。浮点数必须包含小数点，也可以使用科学计数法表示。 String（字符串）：用双引号、单引号或反引号..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-08T06:08:17.000Z"}],["meta",{"property":"article:author","content":"GodX"}],["meta",{"property":"article:tag","content":"JavaScript"}],["meta",{"property":"article:published_time","content":"2023-05-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-08T06:08:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JavaScript\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-05-22T00:00:00.000Z\\",\\"dateModified\\":\\"2024-05-08T06:08:17.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"GodX\\",\\"url\\":\\"https://github.com/GodX-18\\"}]}"]]},"headers":[{"level":2,"title":"JS 中的 8 种数据类型及区别","slug":"js-中的-8-种数据类型及区别","link":"#js-中的-8-种数据类型及区别","children":[]},{"level":2,"title":"什么是 Symbol","slug":"什么是-symbol","link":"#什么是-symbol","children":[]},{"level":2,"title":"JS 中数据类型检测","slug":"js-中数据类型检测","link":"#js-中数据类型检测","children":[]},{"level":2,"title":"var/cosnt/let 三者之间的区别","slug":"var-cosnt-let-三者之间的区别","link":"#var-cosnt-let-三者之间的区别","children":[]},{"level":2,"title":"setTimeout/Promise/Async/Await 的区别","slug":"settimeout-promise-async-await-的区别","link":"#settimeout-promise-async-await-的区别","children":[]},{"level":2,"title":"异步编程的发展历程","slug":"异步编程的发展历程","link":"#异步编程的发展历程","children":[]},{"level":2,"title":"this 指向","slug":"this-指向","link":"#this-指向","children":[]},{"level":2,"title":"call/apply/bind 三者的区别","slug":"call-apply-bind-三者的区别","link":"#call-apply-bind-三者的区别","children":[]},{"level":2,"title":"EventLoop 事件循环","slug":"eventloop-事件循环","link":"#eventloop-事件循环","children":[]},{"level":2,"title":"为什么 JS 是单线程的","slug":"为什么-js-是单线程的","link":"#为什么-js-是单线程的","children":[]},{"level":2,"title":"JS 是如何实现异步编程的","slug":"js-是如何实现异步编程的","link":"#js-是如何实现异步编程的","children":[]},{"level":2,"title":"宏任务和微任务都有哪些","slug":"宏任务和微任务都有哪些","link":"#宏任务和微任务都有哪些","children":[]},{"level":2,"title":"为什么要区分宏任务和微任务","slug":"为什么要区分宏任务和微任务","link":"#为什么要区分宏任务和微任务","children":[]},{"level":2,"title":"防抖节流","slug":"防抖节流","link":"#防抖节流","children":[]},{"level":2,"title":"闭包使用场景","slug":"闭包使用场景","link":"#闭包使用场景","children":[]},{"level":2,"title":"作用域与作用域链","slug":"作用域与作用域链","link":"#作用域与作用域链","children":[]},{"level":2,"title":"原型与原型链","slug":"原型与原型链","link":"#原型与原型链","children":[]},{"level":2,"title":"普通函数和箭头函数区别","slug":"普通函数和箭头函数区别","link":"#普通函数和箭头函数区别","children":[]},{"level":2,"title":"for-in for-of 的区别","slug":"for-in-for-of-的区别","link":"#for-in-for-of-的区别","children":[]},{"level":2,"title":"== 和 === 的区别","slug":"和-的区别","link":"#和-的区别","children":[]},{"level":2,"title":"数组的操作方法","slug":"数组的操作方法","link":"#数组的操作方法","children":[]},{"level":2,"title":"数组转化为字符串","slug":"数组转化为字符串","link":"#数组转化为字符串","children":[]},{"level":2,"title":"事件冒泡和事件委托和事件捕获","slug":"事件冒泡和事件委托和事件捕获","link":"#事件冒泡和事件委托和事件捕获","children":[]},{"level":2,"title":"阻止事件冒泡、阻止默认事件","slug":"阻止事件冒泡、阻止默认事件","link":"#阻止事件冒泡、阻止默认事件","children":[]},{"level":2,"title":"nodejs 和传统 js 有什么区别","slug":"nodejs-和传统-js-有什么区别","link":"#nodejs-和传统-js-有什么区别","children":[]},{"level":2,"title":"js 中取整办法","slug":"js-中取整办法","link":"#js-中取整办法","children":[]},{"level":2,"title":"函数提升和变量提升","slug":"函数提升和变量提升","link":"#函数提升和变量提升","children":[]},{"level":2,"title":"ES6 出了哪些新语法","slug":"es6-出了哪些新语法","link":"#es6-出了哪些新语法","children":[]}],"git":{"createdTime":1684735463000,"updatedTime":1715148497000,"contributors":[{"name":"GodX","email":"1046529973@qq.com","commits":5}]},"readingTime":{"minutes":14.82,"words":4447},"filePathRelative":"面试/JavaScript.md","localizedDate":"2023年5月22日","excerpt":"<h2>JS 中的 8 种数据类型及区别</h2>\\n<p>JavaScript 中有多种数据类型，它们在存储方式和特性上有所不同。让我们一起来了解这些数据类型：</p>\\n<ol>\\n<li>\\n<p><strong>基本数据类型</strong>：</p>\\n<ul>\\n<li><strong>Number</strong>（数字）：包括整数和浮点数。整数可以是十进制、八进制（以零开头）或十六进制（以0x开头）。浮点数必须包含小数点，也可以使用科学计数法表示。</li>\\n<li><strong>String</strong>（字符串）：用双引号、单引号或反引号表示。字符串是不可变的，一旦创建，其值不会改变。</li>\\n<li><strong>Boolean</strong>（布尔值）：只有两个字面值，即 <code>true</code> 和 <code>false</code>。</li>\\n<li><strong>Undefined</strong>（未定义）：表示变量已声明但未初始化。</li>\\n<li><strong>null</strong>（空值）：表示一个空对象指针。</li>\\n<li><strong>Symbol</strong>（符号）：ES6 新增的原始值，用于确保对象属性的唯一性。</li>\\n</ul>\\n</li>\\n<li>\\n<p><strong>引用数据类型</strong>：</p>\\n<ul>\\n<li><strong>Object</strong>（对象）：使用对象字面量表示法，属性名可以是字符串或数值。</li>\\n<li><strong>Array</strong>（数组）：有序的数据集合，每个槽位可以存储任意类型的数据。</li>\\n<li><strong>Function</strong>（函数）：函数是对象，可以通过函数声明、函数表达式或箭头函数来创建。</li>\\n</ul>\\n</li>\\n<li>\\n<p><strong>存储区别</strong>：</p>\\n<ul>\\n<li>基本数据类型存储在<strong>栈</strong>中。</li>\\n<li>引用数据类型的对象存储在<strong>堆</strong>中。</li>\\n<li>基本类型的值是按值引用，而引用类型的值是按地址引用。</li>\\n</ul>\\n</li>\\n</ol>","autoDesc":true}');export{d as comp,k as data};
