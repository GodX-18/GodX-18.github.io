import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as s,a as t}from"./app-oXp7PBbS.js";const e={},p=t(`<h2 id="目标" tabindex="-1"><a class="header-anchor" href="#目标"><span>目标</span></a></h2><ul><li>了解什么是虚拟DOM，以及虚拟DOM的作用</li><li>Snabbdom 的基本使用</li><li>Snabbdom 的源码解析</li></ul><h2 id="什么是-virtual-dom" tabindex="-1"><a class="header-anchor" href="#什么是-virtual-dom"><span>什么是 Virtual DOM</span></a></h2><p>本质上是以 <code>JavaScript</code> 对象形式存在的对 <code>DOM</code> 的描述，如下：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
	<span class="token literal-property property">sel</span><span class="token operator">:</span> <span class="token string">&quot;div&quot;</span>，
	<span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
	<span class="token literal-property property">text</span><span class="token operator">:</span><span class="token string">&quot;Hello Virtual DOM&quot;</span><span class="token punctuation">,</span>
	<span class="token literal-property property">elm</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
	<span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token keyword">undefined</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">相关信息</p><p><strong>真实 DOM</strong></p><p>为文档对象模型，是一个结构化文本的抽象，在页面渲染出的每一个结点都是一个真实<code>DOM</code>结构，如下：</p><figure><img src="https://camo.githubusercontent.com/02f62eb8d436564e96046444e697147b772e6569ae8569cb3143efb434e6bd20/68747470733a2f2f7374617469632e7675652d6a732e636f6d2f66633762613864302d643330322d313165622d383566362d3666616337376330633962332e706e67" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure></div><h2 id="为什么要使用虚拟dom" tabindex="-1"><a class="header-anchor" href="#为什么要使用虚拟dom"><span>为什么要使用虚拟DOM</span></a></h2><ul><li>虚拟 DOM 可以维护视图和状态的关系，跟踪上一次的状态</li><li>复杂视图情况下提升渲染性能</li><li>通过比较前后两次状态差异更新真实DOM，最小化找出差异的性能消耗</li><li>跨平台 <ul><li>浏览器平台渲染 DOM</li><li>服务端渲染 SSR （Nuxtjs / Nextjs）</li><li>原生应用（Weex / React Native）</li><li>小程序（mpvue / uni-app）等</li></ul></li></ul><h2 id="虚拟-dom-库" tabindex="-1"><a class="header-anchor" href="#虚拟-dom-库"><span>虚拟 DOM 库</span></a></h2><ul><li>Snabbdom <ul><li>vue 2.x 内部使用的虚拟 DOM 就是改造的 Snabbdom</li><li>源代码不多</li><li>通过模块可扩展</li><li>源码使用 ts 开发</li><li>最快的虚拟 DOM 之一</li></ul></li><li>virtual-dom <ul><li>最早的虚拟 DOM 之一</li></ul></li></ul><h2 id="snabbdom-的基本使用" tabindex="-1"><a class="header-anchor" href="#snabbdom-的基本使用"><span>Snabbdom 的基本使用</span></a></h2><p><strong>看文档的意义</strong></p><ul><li>学习任何一个库都要先看文档</li><li>通过文档了解库的作用</li><li>看文档中提供的示例，自己快速实现一个 demo</li><li>通过文档查看 API 的使用</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> init<span class="token punctuation">,</span> h<span class="token punctuation">,</span> styleModule<span class="token punctuation">,</span> eventListenersModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;snabbdom&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> patch <span class="token operator">=</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">[</span>styleModule<span class="token punctuation">,</span> eventListenersModule<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 第一个参数：标签+选择器</span>
<span class="token comment">// 第二个参数：如果是字符串就是标签中的文本内容</span>
<span class="token keyword">let</span> vnode <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
  <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&quot;h1&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">style</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">&quot;red&quot;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;文本&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&quot;button&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">on</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">click</span><span class="token operator">:</span> test <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token literal-property property">style</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">cursor</span><span class="token operator">:</span> <span class="token string">&quot;pointer&quot;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;按钮&quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;GodX------&gt;log&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> app <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;#app&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 第一个参数：旧的 VNode，可以是 DOM 元素</span>
<span class="token comment">// 第二个参数：新的 VNode</span>
<span class="token comment">// 返回新的 VNode</span>
<span class="token function">patch</span><span class="token punctuation">(</span>app<span class="token punctuation">,</span> vnode<span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="snabbdom-源码解析" tabindex="-1"><a class="header-anchor" href="#snabbdom-源码解析"><span>Snabbdom 源码解析</span></a></h2><h3 id="如何学习源码" tabindex="-1"><a class="header-anchor" href="#如何学习源码"><span>如何学习源码</span></a></h3><ul><li>宏观了解</li><li>带着目标看源码</li><li>看源码的过程要不求甚解</li><li>调试</li><li>参考资料</li></ul><h3 id="snabbdom-的核心" tabindex="-1"><a class="header-anchor" href="#snabbdom-的核心"><span>Snabbdom 的核心</span></a></h3><ul><li>init 设置模块，创建 patch 函数</li><li>使用 h 函数创建 js 对象（VNode）描述真实 DOM</li><li>patch 比较新旧两个 VNode</li><li>把变化的内容更新到真实 DOM 树</li></ul><h3 id="h-函数" tabindex="-1"><a class="header-anchor" href="#h-函数"><span>h 函数</span></a></h3><ul><li><p>作用：处理参数，调用 vnode 函数创建一个 vnode 对象返回</p></li><li><p>vue 中的 h 函数（功能更加强大，支持组件机制）</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  router<span class="token punctuation">,</span>
  store<span class="token punctuation">,</span>
  <span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token parameter">h</span> <span class="token operator">=&gt;</span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p><strong>函数重载（前置知识）</strong></p><p>会根据调用参数的个数和类型去判断执行哪个函数，如下：</p><p><em>参数个数重载</em></p><figure><img src="https://raw.githubusercontent.com/GodX-18/picBed/main/image-20221208154031789.png" alt="image-20221208154031789" tabindex="0" loading="lazy"><figcaption>image-20221208154031789</figcaption></figure><p><em>参数类型重载</em></p><figure><img src="https://raw.githubusercontent.com/GodX-18/picBed/main/image-20221208154116764.png" alt="image-20221208154116764" tabindex="0" loading="lazy"><figcaption>image-20221208154116764</figcaption></figure><div class="hint-container info"><p class="hint-container-title">相关信息</p><ul><li>参数个数或参数类型不同的函数</li><li>JS 中没有重载的概念</li><li>TS 中有重载，不过重载的实现还是要通过代码调整参数</li></ul></div><h3 id="vnode" tabindex="-1"><a class="header-anchor" href="#vnode"><span>VNode</span></a></h3><p>用来描述真实 DOM</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">vnode</span><span class="token punctuation">(</span>
  <span class="token comment">// 选择器</span>
  <span class="token literal-property property">sel</span><span class="token operator">:</span> string <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
  <span class="token comment">// 模块数据</span>
  <span class="token literal-property property">data</span><span class="token operator">:</span> any <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
  <span class="token literal-property property">children</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span>VNode <span class="token operator">|</span> string<span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
  <span class="token literal-property property">text</span><span class="token operator">:</span> string <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
  <span class="token literal-property property">elm</span><span class="token operator">:</span> Element <span class="token operator">|</span> DocumentFragment <span class="token operator">|</span> Text <span class="token operator">|</span> <span class="token keyword">undefined</span>
<span class="token punctuation">)</span><span class="token operator">:</span> VNode <span class="token punctuation">{</span>
  <span class="token keyword">const</span> key <span class="token operator">=</span> data <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token operator">?</span> <span class="token keyword">undefined</span> <span class="token operator">:</span> data<span class="token punctuation">.</span>key<span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span> sel<span class="token punctuation">,</span> data<span class="token punctuation">,</span> children<span class="token punctuation">,</span> text<span class="token punctuation">,</span> elm<span class="token punctuation">,</span> key <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="vnode-渲染成真实-dom-patch-整体过程分析" tabindex="-1"><a class="header-anchor" href="#vnode-渲染成真实-dom-patch-整体过程分析"><span>VNode 渲染成真实 DOM（patch）整体过程分析</span></a></h3><ul><li><code>path(oldVNode,newVNode)</code></li><li>把新节点中变化的内容渲染到真实 DOM，最后返回新节点作为下一次处理的旧节点</li><li>对比新旧 VNode 是否相同节点（节点的 Key 和 sel 相同）</li><li>如果不是相同节点，删除之前的内容，重新渲染</li><li>如果是相同节点，再判断新的 VNode 是否有 text，如果有并且和 oldVNode 的 text 不同，直接更新文本内容</li><li>如果新的 VNode 有 children，判断子节点收否有变化</li></ul><h3 id="init" tabindex="-1"><a class="header-anchor" href="#init"><span>init</span></a></h3><p>是一个高阶函数，缓存模块、domApi 和 配置参数，返回一个 patch 函数</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">init</span><span class="token punctuation">(</span>
    <span class="token parameter"><span class="token literal-property property">modules</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span>Partial<span class="token operator">&lt;</span>Module<span class="token operator">&gt;&gt;</span><span class="token punctuation">,</span>
  	domApi<span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">DOMAPI</span><span class="token punctuation">,</span>
  	options<span class="token operator">?</span><span class="token operator">:</span> Options</span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> path<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="patch" tabindex="-1"><a class="header-anchor" href="#patch"><span>patch</span></a></h3><p><strong>作用</strong></p><p>对比新旧虚拟节点的差异，将差异更新到真实 DOM中，并返回一个新的 VNode 作为下个 path 函数的旧虚拟节点的参数</p><h3 id="patchvnode" tabindex="-1"><a class="header-anchor" href="#patchvnode"><span>patchVnode</span></a></h3><figure><img src="https://raw.githubusercontent.com/GodX-18/picBed/main/image-20221216135703040.png" alt="image-20221216135703040" tabindex="0" loading="lazy"><figcaption>image-20221216135703040</figcaption></figure>`,41),o=[p];function l(i,c){return a(),s("div",null,o)}const u=n(e,[["render",l],["__file","03-虚拟DOM的实现原理.html.vue"]]),k=JSON.parse('{"path":"/%E5%A4%A7%E5%89%8D%E7%AB%AF/Vue%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E4%B8%8E%E8%BF%9B%E9%98%B6/03-%E8%99%9A%E6%8B%9FDOM%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86.html","title":"虚拟DOM的实现原理","lang":"zh-CN","frontmatter":{"title":"虚拟DOM的实现原理","order":3,"icon":"merge","category":["前端","源码分析"],"tag":["vue"],"description":"目标 了解什么是虚拟DOM，以及虚拟DOM的作用 Snabbdom 的基本使用 Snabbdom 的源码解析 什么是 Virtual DOM 本质上是以 JavaScript 对象形式存在的对 DOM 的描述，如下： 相关信息 真实 DOM 为文档对象模型，是一个结构化文本的抽象，在页面渲染出的每一个结点都是一个真实DOM结构，如下： imgimg 为...","head":[["meta",{"property":"og:url","content":"https://godx-18.github.io/%E5%A4%A7%E5%89%8D%E7%AB%AF/Vue%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E4%B8%8E%E8%BF%9B%E9%98%B6/03-%E8%99%9A%E6%8B%9FDOM%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86.html"}],["meta",{"property":"og:site_name","content":"烜"}],["meta",{"property":"og:title","content":"虚拟DOM的实现原理"}],["meta",{"property":"og:description","content":"目标 了解什么是虚拟DOM，以及虚拟DOM的作用 Snabbdom 的基本使用 Snabbdom 的源码解析 什么是 Virtual DOM 本质上是以 JavaScript 对象形式存在的对 DOM 的描述，如下： 相关信息 真实 DOM 为文档对象模型，是一个结构化文本的抽象，在页面渲染出的每一个结点都是一个真实DOM结构，如下： imgimg 为..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://camo.githubusercontent.com/02f62eb8d436564e96046444e697147b772e6569ae8569cb3143efb434e6bd20/68747470733a2f2f7374617469632e7675652d6a732e636f6d2f66633762613864302d643330322d313165622d383566362d3666616337376330633962332e706e67"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-09-27T09:56:32.000Z"}],["meta",{"property":"article:author","content":"GodX"}],["meta",{"property":"article:tag","content":"vue"}],["meta",{"property":"article:modified_time","content":"2023-09-27T09:56:32.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"虚拟DOM的实现原理\\",\\"image\\":[\\"https://camo.githubusercontent.com/02f62eb8d436564e96046444e697147b772e6569ae8569cb3143efb434e6bd20/68747470733a2f2f7374617469632e7675652d6a732e636f6d2f66633762613864302d643330322d313165622d383566362d3666616337376330633962332e706e67\\",\\"https://raw.githubusercontent.com/GodX-18/picBed/main/image-20221208154031789.png\\",\\"https://raw.githubusercontent.com/GodX-18/picBed/main/image-20221208154116764.png\\",\\"https://raw.githubusercontent.com/GodX-18/picBed/main/image-20221216135703040.png\\"],\\"dateModified\\":\\"2023-09-27T09:56:32.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"GodX\\",\\"url\\":\\"https://github.com/GodX-18\\"}]}"]]},"headers":[{"level":2,"title":"目标","slug":"目标","link":"#目标","children":[]},{"level":2,"title":"什么是 Virtual DOM","slug":"什么是-virtual-dom","link":"#什么是-virtual-dom","children":[]},{"level":2,"title":"为什么要使用虚拟DOM","slug":"为什么要使用虚拟dom","link":"#为什么要使用虚拟dom","children":[]},{"level":2,"title":"虚拟 DOM 库","slug":"虚拟-dom-库","link":"#虚拟-dom-库","children":[]},{"level":2,"title":"Snabbdom 的基本使用","slug":"snabbdom-的基本使用","link":"#snabbdom-的基本使用","children":[]},{"level":2,"title":"Snabbdom 源码解析","slug":"snabbdom-源码解析","link":"#snabbdom-源码解析","children":[{"level":3,"title":"如何学习源码","slug":"如何学习源码","link":"#如何学习源码","children":[]},{"level":3,"title":"Snabbdom 的核心","slug":"snabbdom-的核心","link":"#snabbdom-的核心","children":[]},{"level":3,"title":"h 函数","slug":"h-函数","link":"#h-函数","children":[]},{"level":3,"title":"VNode","slug":"vnode","link":"#vnode","children":[]},{"level":3,"title":"VNode 渲染成真实 DOM（patch）整体过程分析","slug":"vnode-渲染成真实-dom-patch-整体过程分析","link":"#vnode-渲染成真实-dom-patch-整体过程分析","children":[]},{"level":3,"title":"init","slug":"init","link":"#init","children":[]},{"level":3,"title":"patch","slug":"patch","link":"#patch","children":[]},{"level":3,"title":"patchVnode","slug":"patchvnode","link":"#patchvnode","children":[]}]}],"git":{"createdTime":1678263228000,"updatedTime":1695808592000,"contributors":[{"name":"GodX","email":"1046529973@qq.com","commits":3}]},"readingTime":{"minutes":3.39,"words":1017},"filePathRelative":"大前端/Vue框架源码与进阶/03-虚拟DOM的实现原理.md","localizedDate":"2023年3月8日","excerpt":"<h2>目标</h2>\\n<ul>\\n<li>了解什么是虚拟DOM，以及虚拟DOM的作用</li>\\n<li>Snabbdom 的基本使用</li>\\n<li>Snabbdom 的源码解析</li>\\n</ul>\\n<h2>什么是 Virtual DOM</h2>\\n<p>本质上是以 <code>JavaScript</code> 对象形式存在的对 <code>DOM</code> 的描述，如下：</p>\\n<div class=\\"language-javascript\\" data-ext=\\"js\\" data-title=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token punctuation\\">{</span>\\n\\t<span class=\\"token literal-property property\\">sel</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"div\\"</span>，\\n\\t<span class=\\"token literal-property property\\">data</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n\\t<span class=\\"token literal-property property\\">children</span><span class=\\"token operator\\">:</span> <span class=\\"token keyword\\">undefined</span><span class=\\"token punctuation\\">,</span>\\n\\t<span class=\\"token literal-property property\\">text</span><span class=\\"token operator\\">:</span><span class=\\"token string\\">\\"Hello Virtual DOM\\"</span><span class=\\"token punctuation\\">,</span>\\n\\t<span class=\\"token literal-property property\\">elm</span><span class=\\"token operator\\">:</span> <span class=\\"token keyword\\">undefined</span><span class=\\"token punctuation\\">,</span>\\n\\t<span class=\\"token literal-property property\\">key</span><span class=\\"token operator\\">:</span> <span class=\\"token keyword\\">undefined</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}');export{u as comp,k as data};
