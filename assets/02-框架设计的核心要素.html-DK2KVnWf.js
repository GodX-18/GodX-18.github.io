import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as s,a as e}from"./app-oXp7PBbS.js";const t={},i=e(`<h2 id="提升用户的开发体验" tabindex="-1"><a class="header-anchor" href="#提升用户的开发体验"><span>提升用户的开发体验</span></a></h2><ul><li><p>开发体验是衡量一个框架的重要指标之一</p></li><li><p>提供友好的警告信息至关重要，这有助于开发者快速定位问题</p></li><li><p>例如，在 vue3 中，当我们创建一个 Vue.js 应用并试图将其挂载到一个不存在的 DOM 节点是，就会收到一条警告信息</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>[Vue warn]:Failed to mount app: mount target selector &#39;#not-exist&#39; return null.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>而不是</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>TypeError: Cannot read property &#39;xxx&#39; of null
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这是因为，框架内部为我们做了优化</p></li></ul><h2 id="控制框架代码的体积" tabindex="-1"><a class="header-anchor" href="#控制框架代码的体积"><span>控制框架代码的体积</span></a></h2><ul><li>生产环境中不需要用于提升开发体验的代码，比如打印警告信息等等</li><li>框架通过 Tree-Shaking 机制，配合构建工具预定义常量的能力去去除在开发环境中所用到的代码</li></ul><div class="hint-container tip"><p class="hint-container-title">什么是预定义常量</p><p>预定义常量一般由构建工具根据编译环境、操作系统、编译选项等因素来确定并指定其值。它们可以用于编写不同环境下的代码或在不同的编译选项下执行不同的操作。</p><p>预定义常量的使用有以下几个常见的用途：</p><ol><li>条件编译：可以使用预定义常量来在编译过程中根据不同的条件选择性地编译某块代码。例如，可以使用预定义常量来判断当前是否处于调试模式，并选择性地打印调试信息。</li><li>平台兼容性：可以使用预定义常量来区分不同的操作系统或编译器，并根据需要进行相应的兼容性处理。例如，可以使用预定义常量来判断当前操作系统是否为 Windows，从而执行相应的操作。</li><li>版本控制：可以使用预定义常量来定义代码的版本号或构建版本号，并在代码中使用它们进行相应的处理。例如，可以使用预定义常量来区分不同的代码版本，并根据需求执行不同的逻辑。</li></ol><p>总之，配合构建工具预定义常量可以对代码的编译过程进行灵活控制，从而满足不同环境下的需求，提高代码的可维护性和可移植性。</p><p>例如：在 rollup 中，我们可以用如下代码配置预定义常量：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>	<span class="token comment">// 定义预定义常量</span>
  <span class="token literal-property property">define</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// 定义一个 IS_PROD 常量，值为是否是生产环境</span>
    <span class="token string-property property">&#39;IS_PROD&#39;</span><span class="token operator">:</span> isProduction <span class="token operator">?</span> <span class="token string">&#39;true&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;false&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h2 id="框架要做到良好的-tree-shaking" tabindex="-1"><a class="header-anchor" href="#框架要做到良好的-tree-shaking"><span>框架要做到良好的 Tree-Shaking</span></a></h2><ul><li><p>Tree-Shaking 是一种排除无用代码的机制</p></li><li><p>Tree-Shaking 本身基于 ESM，并且 JavaScript 是一门动态语言，通过纯静态分析的手段进行 Tree-Shaking 较大，因此大部分工具能够识别 <code>/*#__PURE__*/</code>注释，在编写框架代码时没我们可以利用<code>/*#__PURE__*/</code>来辅助构建工具进行 Tree-Shaking</p></li></ul><div class="hint-container tip"><p class="hint-container-title">/*#__PURE__*/ 注释的作用</p><p>告诉构建工具，如果这个函数没有被调用，Tree-Shaking 的时候可以放心去除不用担心有副作用，也就是将函数标记为纯函数。</p></div><div class="hint-container tip"><p class="hint-container-title">为什么在 JavaScript 中通过纯静态分析的手段进行 Tree-Shaking 较大</p><ol><li>变量可变性：由于JavaScript的动态特性，变量的值和类型可以在运行时动态变化。这意味着在编译时很难确定哪些代码是不可访问的，因此需要对代码进行动态分析来进行Tree-Shaking。</li><li>模块化系统：JavaScript中存在多种模块化系统，如CommonJS和ES6模块。这些模块化系统允许在运行时根据条件动态加载模块，使得静态分析变得更加困难。</li><li>动态引入：JavaScript中的动态引入机制，比如使用<code>import()</code>函数可以在运行时动态地引入模块。这使得编译器很难确定哪些代码是可被引入的，因此需要进行动态分析才能进行Tree-Shaking。</li><li>依赖关系：JavaScript中的代码之间存在复杂的依赖关系，这些依赖关系可能包括函数调用、对象属性的访问等。因此，在进行Tree-Shaking时需要考虑这些依赖关系，以确保不会错误地删除被调用的代码。</li></ol></div><h2 id="框架应该输出怎样的构建产物" tabindex="-1"><a class="header-anchor" href="#框架应该输出怎样的构建产物"><span>框架应该输出怎样的构建产物</span></a></h2><ul><li><p>不同类型的产物是为了满足不同的需求</p></li><li><p>为了能让用户通过 <code>&lt;script&gt;</code>标签直接引用并使用，我们需要输出 IIFE 格式的资源，即立即调用的函数表达式</p></li><li><p>为了让用户能够通过<code>&lt;script type=&#39;module&#39;&gt;</code>引用并使用，我们需要输出 IIFE 格式的资源，即立即调用的函数表达式</p></li><li><p>需要注意的是，ESM 格式的资源有两种：</p><ul><li>用于浏览器的 esm-browser.js</li><li>用于打包工具的 esm-bundler.js</li></ul><p>它们的区别在于对预定义常量 <code>__DEV__</code>的处理：</p><ul><li>前者直接将 <code>__DEV__ </code>替换成字面量 true 或 false</li><li>后者则将 <code>__DEV__</code>常量替换为<code>process.env.Node_ENV !== &#39;production&#39;</code>语句</li></ul></li><li><p>为了让实现服务端渲染的需求，我们需要输出 Common.js 格式的资源，因为当进行服务端渲染师，vue.js 的代码是在 Node.js 环境中运行的，而在 Node.js 环境中，资源的模块格式应该是 CommonJs</p></li></ul><div class="hint-container tip"><p class="hint-container-title">框架如何实现输出不同的产物</p><p>使用构建工具的打包配置功能</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// rollup.config.js</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">input</span><span class="token operator">:</span> <span class="token string">&#39;src/index.js&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">file</span><span class="token operator">:</span> <span class="token string">&#39;dist/bundle.iife.js&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">format</span><span class="token operator">:</span> <span class="token string">&#39;iife&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">file</span><span class="token operator">:</span> <span class="token string">&#39;dist/bundle.esm.js&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">format</span><span class="token operator">:</span> <span class="token string">&#39;esm&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
     <span class="token punctuation">{</span>
      <span class="token literal-property property">file</span><span class="token operator">:</span> <span class="token string">&#39;dist/bundle.cjs.js&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">format</span><span class="token operator">:</span> <span class="token string">&#39;cjs&#39;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在底层实现上，Rollup 会执行如下主要步骤来输出不同的产物：</p><ol><li>解析：Rollup 会解析输入模块，找出模块之间的依赖关系，并构建一个依赖图。</li><li>打包：基于依赖图，Rollup 会将模块转换为可执行的 JavaScript 代码，并根据用户的配置生成相应的输出格式。</li><li>输出：根据用户配置的输出格式，Rollup 会将打包生成的代码写入指定的目标文件中。</li></ol></div><h2 id="特性开关" tabindex="-1"><a class="header-anchor" href="#特性开关"><span>特性开关</span></a></h2><p><strong>什么是特性开关</strong></p><p>特性开关是一种软件开发中常用的技术实践，它允许开发人员在运行时通过配置文件、环境变量或其他方式动态地启用或禁用某个特定的功能或组件。特性开关可以在不重新部署或修改代码的情况下控制应用程序的行为。</p><p><strong>使用特性开关的益处</strong></p><ul><li>对于用户关闭的特性，我们可以利用 Tree-Shaking 机制让其不包含在最终的资源中</li><li>为框架设计带来了灵活性，可以通过特性开关任意为框架添加新的特性，而不用担心资源体积变大</li><li>同时，当框架升级时，我们也可以通过特性开关来支持遗留 API，这样新用户可以选择不使用遗留 API，从而使最终的打包资源变小</li></ul><div class="hint-container tip"><p class="hint-container-title">在vue3 中关闭选项式 API</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token literal-property property">define</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">__VUE_OPTIONS_API__</span><span class="token operator">:</span> <span class="token boolean">false</span>   <span class="token comment">// 关闭 Vue2 中的 options选项API</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h2 id="错误处理" tabindex="-1"><a class="header-anchor" href="#错误处理"><span>错误处理</span></a></h2><ul><li>框架的错误处理做得好坏直接决定用户应用程序的健壮性，同时还决定了用户开发应用时处理错误的心智负担</li><li>框架需要为用户提供统一的错误处理接口，这样用户可以通过注册自定义的错误处理函数来处理全部的框架异常</li></ul><div class="hint-container tip"><p class="hint-container-title">在 vue3 中注册错误处理函数</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">&#39;App.vue&#39;</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span>
app<span class="token punctuation">.</span>config<span class="token punctuation">.</span><span class="token function-variable function">errorHandler</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 错误处理程序</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h2 id="良好的-typescript-类型支持" tabindex="-1"><a class="header-anchor" href="#良好的-typescript-类型支持"><span>良好的 TypeScript 类型支持</span></a></h2><p><strong>常见误区</strong></p><ul><li>使用 TS 编写框架和框架对 TS 类型支持友好是两件完全不同的事情</li><li>有时候为了让框架提供更加友好的类型支持，甚至要话费比实现框架功能本身更多的时间和精力</li></ul><p><strong>例子</strong></p><p>优化前，返回值类型丢失</p><div class="language-tsx line-numbers-mode" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span>val<span class="token operator">:</span><span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> val
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/GodX-18/picBed/main/image-20230801085142107.png" alt="image-20230801085142107" tabindex="0" loading="lazy"><figcaption>image-20230801085142107</figcaption></figure><p>优化后，能够推导出返回值的类型</p><div class="language-tsx line-numbers-mode" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">foo</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>val<span class="token operator">:</span><span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token constant">T</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> val
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/GodX-18/picBed/main/image-20230801085244606.png" alt="image-20230801085244606" tabindex="0" loading="lazy"><figcaption>image-20230801085244606</figcaption></figure>`,31),p=[i];function l(o,r){return a(),s("div",null,p)}const u=n(t,[["render",l],["__file","02-框架设计的核心要素.html.vue"]]),v=JSON.parse(`{"path":"/%E9%98%85%E8%AF%BB/Vuejs%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/02-%E6%A1%86%E6%9E%B6%E8%AE%BE%E8%AE%A1%E7%9A%84%E6%A0%B8%E5%BF%83%E8%A6%81%E7%B4%A0.html","title":"框架设计的核心要素","lang":"zh-CN","frontmatter":{"title":"框架设计的核心要素","icon":"light","order":2,"category":["前端"],"tag":["vue"],"description":"提升用户的开发体验 开发体验是衡量一个框架的重要指标之一 提供友好的警告信息至关重要，这有助于开发者快速定位问题 例如，在 vue3 中，当我们创建一个 Vue.js 应用并试图将其挂载到一个不存在的 DOM 节点是，就会收到一条警告信息 而不是 这是因为，框架内部为我们做了优化 控制框架代码的体积 生产环境中不需要用于提升开发体验的代码，比如打印警告...","head":[["meta",{"property":"og:url","content":"https://godx-18.github.io/%E9%98%85%E8%AF%BB/Vuejs%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/02-%E6%A1%86%E6%9E%B6%E8%AE%BE%E8%AE%A1%E7%9A%84%E6%A0%B8%E5%BF%83%E8%A6%81%E7%B4%A0.html"}],["meta",{"property":"og:site_name","content":"烜"}],["meta",{"property":"og:title","content":"框架设计的核心要素"}],["meta",{"property":"og:description","content":"提升用户的开发体验 开发体验是衡量一个框架的重要指标之一 提供友好的警告信息至关重要，这有助于开发者快速定位问题 例如，在 vue3 中，当我们创建一个 Vue.js 应用并试图将其挂载到一个不存在的 DOM 节点是，就会收到一条警告信息 而不是 这是因为，框架内部为我们做了优化 控制框架代码的体积 生产环境中不需要用于提升开发体验的代码，比如打印警告..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.githubusercontent.com/GodX-18/picBed/main/image-20230801085142107.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-08-07T03:00:15.000Z"}],["meta",{"property":"article:author","content":"GodX"}],["meta",{"property":"article:tag","content":"vue"}],["meta",{"property":"article:modified_time","content":"2023-08-07T03:00:15.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"框架设计的核心要素\\",\\"image\\":[\\"https://raw.githubusercontent.com/GodX-18/picBed/main/image-20230801085142107.png\\",\\"https://raw.githubusercontent.com/GodX-18/picBed/main/image-20230801085244606.png\\"],\\"dateModified\\":\\"2023-08-07T03:00:15.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"GodX\\",\\"url\\":\\"https://github.com/GodX-18\\"}]}"]]},"headers":[{"level":2,"title":"提升用户的开发体验","slug":"提升用户的开发体验","link":"#提升用户的开发体验","children":[]},{"level":2,"title":"控制框架代码的体积","slug":"控制框架代码的体积","link":"#控制框架代码的体积","children":[]},{"level":2,"title":"框架要做到良好的 Tree-Shaking","slug":"框架要做到良好的-tree-shaking","link":"#框架要做到良好的-tree-shaking","children":[]},{"level":2,"title":"框架应该输出怎样的构建产物","slug":"框架应该输出怎样的构建产物","link":"#框架应该输出怎样的构建产物","children":[]},{"level":2,"title":"特性开关","slug":"特性开关","link":"#特性开关","children":[]},{"level":2,"title":"错误处理","slug":"错误处理","link":"#错误处理","children":[]},{"level":2,"title":"良好的 TypeScript 类型支持","slug":"良好的-typescript-类型支持","link":"#良好的-typescript-类型支持","children":[]}],"git":{"createdTime":1691377215000,"updatedTime":1691377215000,"contributors":[{"name":"GodX","email":"1046529973@qq.com","commits":1}]},"readingTime":{"minutes":6.92,"words":2076},"filePathRelative":"阅读/Vuejs设计与实现/02-框架设计的核心要素.md","localizedDate":"2023年8月7日","excerpt":"<h2>提升用户的开发体验</h2>\\n<ul>\\n<li>\\n<p>开发体验是衡量一个框架的重要指标之一</p>\\n</li>\\n<li>\\n<p>提供友好的警告信息至关重要，这有助于开发者快速定位问题</p>\\n</li>\\n<li>\\n<p>例如，在 vue3 中，当我们创建一个 Vue.js 应用并试图将其挂载到一个不存在的 DOM 节点是，就会收到一条警告信息</p>\\n<div class=\\"language-text\\" data-ext=\\"text\\" data-title=\\"text\\"><pre class=\\"language-text\\"><code>[Vue warn]:Failed to mount app: mount target selector '#not-exist' return null.\\n</code></pre></div><p>而不是</p>\\n<div class=\\"language-text\\" data-ext=\\"text\\" data-title=\\"text\\"><pre class=\\"language-text\\"><code>TypeError: Cannot read property 'xxx' of null\\n</code></pre></div><p>这是因为，框架内部为我们做了优化</p>\\n</li>\\n</ul>","autoDesc":true}`);export{u as comp,v as data};
