import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as s,c as i,b as t,e,d,a as n}from"./app-oXp7PBbS.js";const r={},c=n(`<h2 id="mongodb-中的数据存储结构" tabindex="-1"><a class="header-anchor" href="#mongodb-中的数据存储结构"><span>MongoDB 中的数据存储结构</span></a></h2><p>MongoDB是一种面向文档的NoSQL数据库，它的数据存储结构由以下三个部分组成：</p><ul><li>文档（Document）：文档是MongoDB中最基本的单元，由键值对（key-value）组成，类似于JSON对象。文档的值可以是不同的数据类型，包括数组、对象、日期、二进制等。文档的最大尺寸是16MB。</li><li>集合（Collection）：集合是一组文档，相当于关系型数据库中的表（Table）。集合是动态的，不需要预先定义文档的结构或字段。集合可以有索引，以提高查询性能。</li><li>数据库（Database）：数据库是一组集合，相当于关系型数据库中的数据库（Database）。一个MongoDB实例可以承载多个数据库，每个数据库有自己的文件存储空间和权限。</li></ul><p>除了上述的存储结构，MongoDB还提供了一种特殊的集合类型，叫做Capped Collection。这种集合有固定的大小，类似于一个循环缓冲区，当空间被填满后，新的插入会覆盖最旧的文档。Capped Collection适合用于存储日志、审计或其他需要按时间顺序访问的数据。</p><p>MongoDB支持两种存储引擎：MMAPv1和WiredTiger。存储引擎决定了MongoDB如何在磁盘上组织和管理数据。MMAPv1是MongoDB原生的存储引擎，它使用操作系统的内存映射文件机制来管理数据。WiredTiger是MongoDB 3.0引入的新存储引擎，它使用了更高效的压缩算法和更细粒度的锁机制来提升性能。从MongoDB 3.2开始，WiredTiger成为了默认的存储引擎。</p><h2 id="数据库" tabindex="-1"><a class="header-anchor" href="#数据库"><span>数据库</span></a></h2><h3 id="查看数据库列表" tabindex="-1"><a class="header-anchor" href="#查看数据库列表"><span>查看数据库列表</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>show dbs
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="查看当前数据库" tabindex="-1"><a class="header-anchor" href="#查看当前数据库"><span>查看当前数据库</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>db
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>MongoDB 中默认的数据库为 test，如果你没有创建新的数据库，集合将存放在 test 数据库中。</p><p>有一些数据库名是保留的，可以直接访问这些有特殊作用的数据库。</p><ul><li><strong>admin</strong>：从权限的角度来看，这是&quot;root&quot;数据库。要是将一个用户添加到这个数据库，这个用户自动继承所有数据库的权限。一些特定的服务器端命令也只能从这个数据库运行，比如列出所有的数据库或者关闭服务器。</li><li><strong>local：</strong> 这个数据永远不会被复制，可以用来存储限于本地单台服务器的任意集合</li><li><strong>config</strong>：当Mongo用于分片设置时，config数据库在内部使用，用于保存分片的相关信息。</li></ul><h3 id="创建与切换数据库" tabindex="-1"><a class="header-anchor" href="#创建与切换数据库"><span>创建与切换数据库</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>use  <span class="token operator">&lt;</span>DATABASE_NAME<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>在 MongoDB 中数据库只有真正的有了数据才会被创建出来。</p></div><h3 id="数据命名规则" tabindex="-1"><a class="header-anchor" href="#数据命名规则"><span>数据命名规则</span></a></h3><ul><li>不区分大小写，但是建议全部小写</li><li>不能包含空字符。</li><li>数据库名称不能为空，并且必须少于64个字符。</li><li>Windows 上的命名限制 <ul><li>不能包括 <code>/\\. &quot;$*&lt;&gt;:|?</code> 中的任何内容</li></ul></li><li>Unix 和 Linux 上的命名限制 <ul><li>不能包括 <code>/\\. &quot;$</code> 中的任何字符</li></ul></li></ul><h3 id="删除数据库" tabindex="-1"><a class="header-anchor" href="#删除数据库"><span>删除数据库</span></a></h3><ol><li>使用 use 命令切换到要删除的数据库</li><li>使用 <code>db.dropDatabase()</code> 删除当前数据库</li></ol><h2 id="集合" tabindex="-1"><a class="header-anchor" href="#集合"><span>集合</span></a></h2><h3 id="创建集合" tabindex="-1"><a class="header-anchor" href="#创建集合"><span>创建集合</span></a></h3><ol><li>db.createCollection(name, options) <ul><li>name是集合名称，</li><li>options是可选参数，可以指定集合的一些属性，如是否固定大小、索引、最大值等</li></ul></li><li>db.collection.insertOne/insertMany(document) <ul><li>插入文档，如果集合不存在，mongodb会自动创建集合</li></ul></li></ol><h3 id="向集合中添加-更新数据" tabindex="-1"><a class="header-anchor" href="#向集合中添加-更新数据"><span>向集合中添加/更新数据</span></a></h3><ol><li><p>db.collection.insert(document)</p></li><li><p>db.collection.save(document)</p><ul><li>该方法来保存或更新文档，如果文档有_id字段，则更新该文档，否则向集合中插入新文档</li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><p>从 MongoDB 4.2 版本开始，save 方法已经被弃用，不建议使用</p></div></li></ol><h3 id="删除集合" tabindex="-1"><a class="header-anchor" href="#删除集合"><span>删除集合</span></a></h3><ol><li>db.collection.drop() <ul><li>该方法会返回一个布尔值，表示是否删除成功</li></ul></li><li>db.dropDatabase() <ul><li>该方法来删除整个数据库，该方法会删除当前使用的数据库和所有的集合</li></ul></li></ol><h3 id="查看集合" tabindex="-1"><a class="header-anchor" href="#查看集合"><span>查看集合</span></a></h3><ol><li>show collections <ul><li>查看当前数据库中的所有集合</li></ul></li><li>show tables <ul><li>查看当前数据库中的所有集合</li></ul></li><li>db.collection.find(query, projection) <ul><li>该方法来查看集合中的文档，其中query是可选的查询条件，projection是可选的投影条件</li></ul></li></ol><h2 id="文档" tabindex="-1"><a class="header-anchor" href="#文档"><span>文档</span></a></h2><ul><li>MongoDB 将数据记录存储为 BSON 文档</li><li>BSON（Binary JSON）是 JSON 文档的二进制表示形式，它比 JSON 包含更多的数据类型</li></ul><h3 id="文档结构" tabindex="-1"><a class="header-anchor" href="#文档结构"><span>文档结构</span></a></h3><p>MongoDB 文档由字段和值对组成，并具有以下结构：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
   field1<span class="token operator">:</span> value1<span class="token punctuation">,</span>
   field2<span class="token operator">:</span> value2<span class="token punctuation">,</span>
   field3<span class="token operator">:</span> value3<span class="token punctuation">,</span>
   ...
   fieldN<span class="token operator">:</span> valueN
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="字段名称" tabindex="-1"><a class="header-anchor" href="#字段名称"><span>字段名称</span></a></h3><p>文档对字段名称有以下限制：</p><ul><li><p>字段名称 <code>_id</code> 保留用作主键；它的值在集合中必须是唯一的，不可变的，并且可以是数组以外的任何类型。</p></li><li><p>字段名称不能包含空字符。</p></li><li><p>顶级字段名称不能以美元符号 <code>$</code> 开头。</p></li><li><p>从 MongoDB 3.6 开始，服务器允许存储包含点 <code>.</code> 和美元符号 <code>$</code> 的字段名称</p></li></ul><h3 id="mongodb-中的数据类型" tabindex="-1"><a class="header-anchor" href="#mongodb-中的数据类型"><span>MongoDB 中的数据类型</span></a></h3><p>字段的值可以是任何 BSON 数据类型，包括其他文档，数组和文档数组。例如，以下文档包含各种类型的值：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code>var mydoc = <span class="token punctuation">{</span>
    _id<span class="token operator">:</span> ObjectId(<span class="token string">&quot;5099803df3f4948bd2f98391&quot;</span>)<span class="token punctuation">,</span>
    name<span class="token operator">:</span> <span class="token punctuation">{</span> first<span class="token operator">:</span> <span class="token string">&quot;Alan&quot;</span><span class="token punctuation">,</span> last<span class="token operator">:</span> <span class="token string">&quot;Turing&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    birth<span class="token operator">:</span> new Date(&#39;Jun <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">1912</span>&#39;)<span class="token punctuation">,</span>
    death<span class="token operator">:</span> new Date(&#39;Jun <span class="token number">07</span><span class="token punctuation">,</span> <span class="token number">1954</span>&#39;)<span class="token punctuation">,</span>
    contribs<span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token string">&quot;Turing machine&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Turing test&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Turingery&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>
    views <span class="token operator">:</span> NumberLong(<span class="token number">1250000</span>)
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的字段具有以下数据类型：</p>`,41),p={href:"https://docs.mongodb.com/manual/reference/bson-types/#objectid",target:"_blank",rel:"noopener noreferrer"},u=t("li",null,"name 包含一个嵌入式文档，该文档包含 first 和 last 字段",-1),h=t("li",null,"birth 和 death 持有 Date 类型的值",-1),g=t("li",null,"contribs 保存一个字符串数组",-1),b=t("li",null,"views 拥有 NumberLong 类型的值",-1),m=n('<p>下面是 MongoDB 支持的常用数据类型。</p><table><thead><tr><th>类型</th><th>整数标识符</th><th>别名（字符串标识符）</th><th>描述</th></tr></thead><tbody><tr><td>Double</td><td>1</td><td>“double”</td><td>双精度浮点值。用于存储浮点值。</td></tr><tr><td>String</td><td>2</td><td>“string”</td><td>字符串。存储数据常用的数据类型。在 MongoDB 中，UTF-8 编码的字符串才是合法的。</td></tr><tr><td>Object</td><td>3</td><td>“object”</td><td>用于内嵌文档</td></tr><tr><td>Array</td><td>4</td><td>“array”</td><td>用于将数组或列表或多个值存储为一个键。</td></tr><tr><td>Binary data</td><td>5</td><td>“binData”</td><td>二进制数据。用于存储二进制数据。</td></tr><tr><td>ObjectId</td><td>7</td><td>“objectId”</td><td>对象 ID。用于创建文档的 ID。</td></tr><tr><td>Boolean</td><td>8</td><td>“bool”</td><td>布尔值。用于存储布尔值（真/假）。</td></tr><tr><td>Date</td><td>9</td><td>“date”</td><td>日期时间。用 UNIX 时间格式来存储当前日期或时间。你可以指定自己的日期时间：创建 Date 对象，传入年月日信息。</td></tr><tr><td>Null</td><td>10</td><td>“null”</td><td>用于创建空值。</td></tr><tr><td>Regular Expression</td><td>11</td><td>“regex”</td><td>正则表达式类型。用于存储正则表达式。</td></tr><tr><td>32-bit integer</td><td>16</td><td>“int”</td><td>整型数值。用于存储 32 位整型数值。</td></tr><tr><td>Timestamp</td><td>17</td><td>“timestamp”</td><td>时间戳。记录文档修改或添加的具体时间。</td></tr><tr><td>64-bit integer</td><td>18</td><td>“long”</td><td>整型数值。用于存储 64 位整型数值。</td></tr><tr><td>Decimal128</td><td>19</td><td>“decimal”</td><td>数值类型。常用于存储更精确的数字，例如货币。</td></tr></tbody></table><h4 id="id-字段" tabindex="-1"><a class="header-anchor" href="#id-字段"><span>_id 字段</span></a></h4><p>在 MongoDB 中，存储在集合中的每个文档都需要一个唯一的 <code>_id</code> 字段作为主键。如果插入的文档省略 <code>_id</code> 字段，则 MongoDB 驱动程序会自动为 <code>_id</code> 字段生成 <code>ObjectId</code>。</p><p><code>_id</code> 字段具有以下行为和约束：</p><ul><li>默认情况下，MongoDB 在创建集合时会在 <code>_id</code> 字段上创建唯一索引。</li><li><code>_id</code> 字段始终是文档中的第一个字段</li><li><code>_id</code> 字段可以包含任何 BSON 数据类型的值，而不是数组。</li></ul>',6);function v(k,B){const a=o("ExternalLinkIcon");return s(),i("div",null,[c,t("ul",null,[t("li",null,[e("_id 保存一个 "),t("a",p,[e("ObjectId"),d(a)]),e(" 类型")]),u,h,g,b]),m])}const M=l(r,[["render",v],["__file","04-基础概念.html.vue"]]),f=JSON.parse('{"path":"/%E5%A4%A7%E5%89%8D%E7%AB%AF/Nodejs%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/MongoDB/04-%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5.html","title":"基础概念","lang":"zh-CN","frontmatter":{"title":"基础概念","order":4,"category":["前端"],"tag":["数据库","noSQL"],"description":"MongoDB 中的数据存储结构 MongoDB是一种面向文档的NoSQL数据库，它的数据存储结构由以下三个部分组成： 文档（Document）：文档是MongoDB中最基本的单元，由键值对（key-value）组成，类似于JSON对象。文档的值可以是不同的数据类型，包括数组、对象、日期、二进制等。文档的最大尺寸是16MB。 集合（Collection...","head":[["meta",{"property":"og:url","content":"https://godx-18.github.io/%E5%A4%A7%E5%89%8D%E7%AB%AF/Nodejs%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/MongoDB/04-%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5.html"}],["meta",{"property":"og:site_name","content":"烜"}],["meta",{"property":"og:title","content":"基础概念"}],["meta",{"property":"og:description","content":"MongoDB 中的数据存储结构 MongoDB是一种面向文档的NoSQL数据库，它的数据存储结构由以下三个部分组成： 文档（Document）：文档是MongoDB中最基本的单元，由键值对（key-value）组成，类似于JSON对象。文档的值可以是不同的数据类型，包括数组、对象、日期、二进制等。文档的最大尺寸是16MB。 集合（Collection..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-11-22T00:58:07.000Z"}],["meta",{"property":"article:author","content":"GodX"}],["meta",{"property":"article:tag","content":"数据库"}],["meta",{"property":"article:tag","content":"noSQL"}],["meta",{"property":"article:modified_time","content":"2023-11-22T00:58:07.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"基础概念\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-11-22T00:58:07.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"GodX\\",\\"url\\":\\"https://github.com/GodX-18\\"}]}"]]},"headers":[{"level":2,"title":"MongoDB 中的数据存储结构","slug":"mongodb-中的数据存储结构","link":"#mongodb-中的数据存储结构","children":[]},{"level":2,"title":"数据库","slug":"数据库","link":"#数据库","children":[{"level":3,"title":"查看数据库列表","slug":"查看数据库列表","link":"#查看数据库列表","children":[]},{"level":3,"title":"查看当前数据库","slug":"查看当前数据库","link":"#查看当前数据库","children":[]},{"level":3,"title":"创建与切换数据库","slug":"创建与切换数据库","link":"#创建与切换数据库","children":[]},{"level":3,"title":"数据命名规则","slug":"数据命名规则","link":"#数据命名规则","children":[]},{"level":3,"title":"删除数据库","slug":"删除数据库","link":"#删除数据库","children":[]}]},{"level":2,"title":"集合","slug":"集合","link":"#集合","children":[{"level":3,"title":"创建集合","slug":"创建集合","link":"#创建集合","children":[]},{"level":3,"title":"向集合中添加/更新数据","slug":"向集合中添加-更新数据","link":"#向集合中添加-更新数据","children":[]},{"level":3,"title":"删除集合","slug":"删除集合","link":"#删除集合","children":[]},{"level":3,"title":"查看集合","slug":"查看集合","link":"#查看集合","children":[]}]},{"level":2,"title":"文档","slug":"文档","link":"#文档","children":[{"level":3,"title":"文档结构","slug":"文档结构","link":"#文档结构","children":[]},{"level":3,"title":"字段名称","slug":"字段名称","link":"#字段名称","children":[]},{"level":3,"title":"MongoDB 中的数据类型","slug":"mongodb-中的数据类型","link":"#mongodb-中的数据类型","children":[]}]}],"git":{"createdTime":1700614687000,"updatedTime":1700614687000,"contributors":[{"name":"GodX","email":"1046529973@qq.com","commits":1}]},"readingTime":{"minutes":6.27,"words":1880},"filePathRelative":"大前端/Nodejs全栈开发/MongoDB/04-基础概念.md","localizedDate":"2023年11月22日","excerpt":"<h2>MongoDB 中的数据存储结构</h2>\\n<p>MongoDB是一种面向文档的NoSQL数据库，它的数据存储结构由以下三个部分组成：</p>\\n<ul>\\n<li>文档（Document）：文档是MongoDB中最基本的单元，由键值对（key-value）组成，类似于JSON对象。文档的值可以是不同的数据类型，包括数组、对象、日期、二进制等。文档的最大尺寸是16MB。</li>\\n<li>集合（Collection）：集合是一组文档，相当于关系型数据库中的表（Table）。集合是动态的，不需要预先定义文档的结构或字段。集合可以有索引，以提高查询性能。</li>\\n<li>数据库（Database）：数据库是一组集合，相当于关系型数据库中的数据库（Database）。一个MongoDB实例可以承载多个数据库，每个数据库有自己的文件存储空间和权限。</li>\\n</ul>","autoDesc":true}');export{M as comp,f as data};
