import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,a as p}from"./app-oXp7PBbS.js";const t={},e=p(`<p>我们在进入设计模式的学习之前，需要先了解一些相关的周边知识，</p><p>例如一些面向对象的基础知识、this 等重要概念，还要掌握一些函数式编程的技巧。这些都是学习设计模式的必要铺垫。</p><h2 id="动态类型语言和鸭子类型" tabindex="-1"><a class="header-anchor" href="#动态类型语言和鸭子类型"><span>动态类型语言和鸭子类型</span></a></h2><h3 id="静态类型和动态类型语言" tabindex="-1"><a class="header-anchor" href="#静态类型和动态类型语言"><span>静态类型和动态类型语言</span></a></h3><p>编程语言按照数据类型大体可以分为两类，一类是静态类型语言，另一类是动态类型语言。</p><p>静态类型语言在编译时便已确定变量的类型，而动态类型语言的变量类型要到程序运行的时候，待变量被赋予某个值之后，才会具有某种类型。</p><h3 id="静态类型语言的优缺点" tabindex="-1"><a class="header-anchor" href="#静态类型语言的优缺点"><span>静态类型语言的优缺点</span></a></h3><ul><li><p>优点</p><ul><li>在编译时就能发现类型不匹配的错误，编译器可以帮助我们提前避免程序在运行期间又肯呢个发生的一些错误。</li><li>如果在程序中明确地规定了数据类型，编译器还可以针对这些信息对程序进行一些优化工作，提高程序执行速度</li></ul><div class="hint-container tip"><p class="hint-container-title">编译器如何根据类型优化程序？</p><p>编译器可以针对明确的数据类型进行优化工作，提高程序执行速度的原因主要有以下几点：</p><ol><li><p>内存分配优化：明确的数据类型可以帮助编译器更好地理解程序的内存使用情况，从而可以更有效地进行内存分配和管理，减少内存碎片和提高内存访问效率。</p></li><li><p>指令优化：编译器可以根据数据类型的信息来选择更合适的指令序列，例如针对特定数据类型的优化指令集，从而提高程序的执行效率。</p></li><li><p>编译器优化：明确的数据类型可以帮助编译器进行更精确的类型推导和优化，例如消除不必要的类型转换和临时变量，减少运行时开销。</p></li><li><p>算法优化：根据数据类型的信息，编译器可以选择更适合特定数据类型的算法和数据结构，从而提高程序的执行速度。</p></li></ol><p>总之，明确的数据类型可以为编译器提供更多的信息和优化的可能性，从而提高程序的执行速度。</p></div></li><li><p>缺点</p><ul><li>迫使程序员依照强契约来编写程序，为每个变量规定数据类型，归根结底只是辅助我们编写可靠性高程序的一种手段，而不是编写程序的目的，毕竟大部分人编写程序的目的是为了完成需求交付生产</li><li>类型的声明也会增加更多的代码，在程序编写过程中，这些细节会让程序员的精力从思考业务逻辑上分散开来。</li></ul></li></ul><h3 id="动态类型语言的优缺点" tabindex="-1"><a class="header-anchor" href="#动态类型语言的优缺点"><span>动态类型语言的优缺点</span></a></h3><ul><li>优点 <ul><li>编写的代码数量更少，看起来也更加简洁，程序员可以把精力更多地放在业务逻辑上面。虽然不区分类型在某些情况下会让程序变得难以理解，但整体而言，代码量越少，越专注于逻辑表达，对阅读程序是越有帮助的。</li></ul></li><li>缺点 <ul><li>无法保证变量的类型，从而在程序的运行期有可能发生跟类型相关的错误</li></ul></li></ul><h3 id="什么是鸭子类型" tabindex="-1"><a class="header-anchor" href="#什么是鸭子类型"><span>什么是鸭子类型？</span></a></h3><p>鸭子类型是一种动态类型的编程风格，它是指在运行时检查对象的方法和属性，而不是在编译时进行类型检查。这意味着只要一个对象具有特定的方法和属性，就可以被视为另一个类型的对象。这种类型的编程风格通常用于动态语言中，如Python和JavaScript。鸭子类型的名称来源于“走起来像鸭子、叫起来像鸭子，那么它就是鸭子”的说法，即只要对象表现得像某种类型，就可以被认为是该类型。</p><p>鸭子类型是动态类型语言面向对象设计的核心。它让我们不用超类型，就能实现“面向接口编程，而不是面向实现编程”的原则。只要对象有合适的方法和属性，就可以被当作不同的类型来使用。</p><p>例如，有 push 和 pop 方法的对象可以当作栈，有 length 属性和下标存取的对象可以当作数组。 静态类型语言要实现“面向接口编程”比较困难，需要用抽象类或接口等进行向上转型。只有隐藏了对象的真实类型，才能通过类型检查系统，实现对象的多态性。 “面向接口编程”是设计模式的重要思想，但在 JavaScript 中，它的实现方式与一些静态类型语言不同，因此，JavaScript 的设计模式也有自己的特点。</p><h2 id="多态" tabindex="-1"><a class="header-anchor" href="#多态"><span>多态</span></a></h2><h3 id="什么是多态" tabindex="-1"><a class="header-anchor" href="#什么是多态"><span>什么是多态？</span></a></h3><p>多态的字面意思就是多种状态，同一操作作用于不同的对象上，可以产生不同的解释和不同的执行结果。比方说，我养了一只鸭和一只鸡，我对它们发出同一个指令 &quot;叫一下&quot;，鸭会嘎嘎嘎，而鸡会咯咯咯，所以让它们叫一下就是同一操作，而叫声不同则是不同的执行结果。</p><h3 id="多态的意义" tabindex="-1"><a class="header-anchor" href="#多态的意义"><span>多态的意义</span></a></h3><p>多态的意义是一个很深刻的问题，不同的编程语言和编程范式可能有不同的理解和表达。但是，一般来说，多态的意义可以从以下几个方面来看：</p><ul><li>多态可以让程序员针对抽象而不是具体实现来编程，这样的代码会有更好的可扩展性和复用性。例如，如果我们定义了一个 Animal 类型的接口，它有一个 run 方法，那么我们可以用这个接口来操作不同的 Animal 子类的对象，如 Dog，Cat，Horse 等，而不需要关心它们的具体实现细节。这样，当我们需要添加新的 Animal 子类时，只需要实现 run 方法，就可以无缝地与原有的代码兼容，而不需要修改原有的代码</li><li>多态可以让程序在运行时动态地根据对象的实际类型来执行相应的方法，这样的代码会有更好的灵活性和多样性。例如，如果我们定义了一个 speak 函数，它接受一个 Animal 类型的参数，然后调用它的 run 方法，那么当我们传入不同的 Animal 子类的对象时，它会执行不同的 run 方法，从而产生不同的效果。这样，我们可以利用多态来实现一些通用的功能，如排序，比较，打印等，而不需要为每一种类型都写一个专门的函数</li><li>多态可以让程序具有更好的抽象性和封装性，这样的代码会有更好的可读性和可维护性。例如，如果我们定义了一个 CarFactory 类，它有一个 factory 方法，它根据传入的参数返回不同的 Car 子类的对象，如 JD，Benz 等，那么我们可以用这个 CarFactory 类来隐藏 Car 子类的创建细节，只需要关心 Car 类型的接口，而不需要知道 Car 子类的具体实现。这样，我们可以降低程序的耦合度，提高程序的模块化程度</li></ul><p><strong>一段“多态”的 JavaScript 代码</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code> <span class="token keyword">if</span> <span class="token punctuation">(</span> animal <span class="token keyword">instanceof</span> <span class="token class-name">Duck</span> <span class="token punctuation">)</span><span class="token punctuation">{</span> 
 	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&#39;嘎嘎嘎&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> 
 <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> animal <span class="token keyword">instanceof</span> <span class="token class-name">Chicken</span> <span class="token punctuation">)</span><span class="token punctuation">{</span> 
 	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&#39;咯咯咯&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> 
 <span class="token punctuation">}</span> 
<span class="token punctuation">}</span><span class="token punctuation">;</span> 
<span class="token keyword">var</span> <span class="token function-variable function">Duck</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> 
<span class="token keyword">var</span> <span class="token function-variable function">Chicken</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> 
<span class="token function">makeSound</span><span class="token punctuation">(</span> <span class="token keyword">new</span> <span class="token class-name">Duck</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 嘎嘎嘎</span>
<span class="token function">makeSound</span><span class="token punctuation">(</span> <span class="token keyword">new</span> <span class="token class-name">Chicken</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 咯咯咯</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码确实体现了“多态性”，当我们分别向鸭和鸡发出“叫唤”的消息时，它们根据此消息作出了各自不同的反应。</p><p>但这样的“多态性”是无法令人满意的，如果后来又增加了一只动物，比如狗，显然狗的叫声是“汪汪汪”，此时我们必须得改动 makeSound 函数，才能让狗也发出叫声。修改代码总是危险的，修改的地方越多，程序出错的可能性就越大，而且当动物的种类越来越多时，makeSound 有可能变成一个巨大的函数。</p><p>多态背后的思想是将“做什么”和“谁去做以及怎样去做”分离开来，也就是将“不变的事物”与 “可能改变的事物”分离开来。在这个故事中，动物都会叫，这是不变的，但是不同类型的动物具体怎么叫是可变的。把不变的部分隔离出来，把可变的部分封装起来，这给予了我们扩展程序的能力，程序看起来是可生长的，也是符合开放—封闭原则的，相对于修改代码来说，仅仅增加代码就能完成同样的功能，这显然优雅和安全得多。</p><h3 id="对象的多态性" tabindex="-1"><a class="header-anchor" href="#对象的多态性"><span>对象的多态性</span></a></h3><p>下面是改写后的代码，首先我们把不变的部分隔离出来，那就是所有的动物都会发出叫声：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">makeSound</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span> <span class="token parameter">animal</span> <span class="token punctuation">)</span><span class="token punctuation">{</span> 
 animal<span class="token punctuation">.</span><span class="token function">sound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后把可变的部分各自封装起来，我们刚才谈到的多态性实际上指的是对象的多态性：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">Duck</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span> 
<span class="token class-name">Duck</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sound</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> 
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&#39;嘎嘎嘎&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span><span class="token punctuation">;</span> 
<span class="token keyword">var</span> <span class="token function-variable function">Chicken</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span> 
<span class="token class-name">Chicken</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sound</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> 
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&#39;咯咯咯&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span><span class="token punctuation">;</span> 
<span class="token function">makeSound</span><span class="token punctuation">(</span> <span class="token keyword">new</span> <span class="token class-name">Duck</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 嘎嘎嘎</span>
<span class="token function">makeSound</span><span class="token punctuation">(</span> <span class="token keyword">new</span> <span class="token class-name">Chicken</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 咯咯咯</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在我们向鸭和鸡都发出“叫唤”的消息，它们接到消息后分别作出了不同的反应。如果有一天动物世界里又增加了一只狗，这时候只要简单地追加一些代码就可以了，而不用改动以前的 makeSound 函数，如下所示:</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">Dog</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span> 
<span class="token class-name">Dog</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sound</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> 
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&#39;汪汪汪&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span><span class="token punctuation">;</span> 
<span class="token function">makeSound</span><span class="token punctuation">(</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 汪汪汪</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="类型检查和多态" tabindex="-1"><a class="header-anchor" href="#类型检查和多态"><span>类型检查和多态</span></a></h3><p>类型检查是在表现出对象多态性之前的一个绕不开的话题，但 JavaScript 是一门不必进行类型检查的动态类型语言，为了真正了解多态的目的，我们需要转一个弯，从一门静态类型语言说起。</p><p>我们在 前面已经说明过静态类型语言在编译时会进行类型匹配检查。以 Java 为例，由于在代码编译时要进行严格的类型检查，所以不能给变量赋予不同类型的值，这种类型检查有时候会让代码显得僵硬，代码如下：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> str<span class="token punctuation">;</span> 
str <span class="token operator">=</span> <span class="token string">&quot;abc&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 没有问题 </span>
str <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 报错</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在我们尝试把上面让鸭子和鸡叫唤的例子换成 Java 代码：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Duck</span> <span class="token punctuation">{</span> <span class="token comment">// 鸭子类</span>
 <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">makeSound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> 
 <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> <span class="token string">&quot;嘎嘎嘎&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> 
 <span class="token punctuation">}</span> 
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">makeSound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> 
 <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> <span class="token string">&quot;咯咯咯&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> 
 <span class="token punctuation">}</span> 
<span class="token punctuation">}</span> 

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnimalSound</span> <span class="token punctuation">{</span> 
 <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">makeSound</span><span class="token punctuation">(</span> <span class="token class-name">Duck</span> duck <span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// (1) </span>
 duck<span class="token punctuation">.</span><span class="token function">makeSound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
 <span class="token punctuation">}</span> 
<span class="token punctuation">}</span> 

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span> 
 <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span> <span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">{</span> 
 <span class="token class-name">AnimalSound</span> animalSound <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnimalSound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
 <span class="token class-name">Duck</span> duck <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Duck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
 animalSound<span class="token punctuation">.</span><span class="token function">makeSound</span><span class="token punctuation">(</span> duck <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：嘎嘎嘎</span>
 <span class="token punctuation">}</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们已经顺利地让鸭子可以发出叫声，但如果现在想让鸡也叫唤起来，我们发现这是一件不可能实现的事情。因为(1)处 AnimalSound 类的 makeSound 方法，被我们规定为只能接受 Duck 类型的参数：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span> 
 <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span> <span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">{</span> 
 <span class="token class-name">AnimalSound</span> animalSound <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnimalSound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
 <span class="token class-name">Chicken</span> chicken <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Chicken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
 animalSound<span class="token punctuation">.</span><span class="token function">makeSound</span><span class="token punctuation">(</span> chicken <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 报错，只能接受 Duck 类型的参数</span>
 <span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>静态语言类型检查有时会限制我们的灵活性。为了克服这一困难，静态类型的面向对象语言允许向上转型：给一个类变量赋值时，可以用这个类或其超类。这就像说“一只麻雀在飞”或“一只鸟在飞”。当 Duck 和 Chicken 都被视为 Animal 时，它们就可以互换使用，这是实现多态性和设计模式的关键。</p><h3 id="使用继承得到多态效果" tabindex="-1"><a class="header-anchor" href="#使用继承得到多态效果"><span>使用继承得到多态效果</span></a></h3><p>使用继承来得到多态效果，是让对象表现出多态性的最常用手段。继承通常包括实现继承和接口继承。</p><p>我们先创建一个 Animal 抽象类，再分别让 Duck 和 Chicken 都继承自 Animal 抽象类，下述代码中(1)处和(2)处的赋值语句显然是成立的，因为鸭子和鸡也是动物：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span> 
 <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">makeSound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 抽象方法</span>
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Chicken</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span> 
 <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">makeSound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> 
 <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> <span class="token string">&quot;咯咯咯&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> 
 <span class="token punctuation">}</span> 
<span class="token punctuation">}</span> 
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Duck</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span> 
 <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">makeSound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> 
 <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> <span class="token string">&quot;嘎嘎嘎&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> 
 <span class="token punctuation">}</span> 
<span class="token punctuation">}</span> 
<span class="token class-name">Animal</span> duck <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Duck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// (1) </span>
<span class="token class-name">Animal</span> chicken <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Chicken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// (2)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在剩下的就是让 AnimalSound 类的 makeSound 方法接受 Animal 类型的参数，而不是具体的Duck 类型或者 Chicken 类型：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnimalSound</span><span class="token punctuation">{</span> 
 <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">makeSound</span><span class="token punctuation">(</span> <span class="token class-name">Animal</span> animal <span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// 接受Animal 类型的参数</span>
 animal<span class="token punctuation">.</span><span class="token function">makeSound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
 <span class="token punctuation">}</span> 
<span class="token punctuation">}</span> 
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span> 
 <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span> <span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">{</span> 
 <span class="token class-name">AnimalSound</span> animalSound<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnimalSound</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
 <span class="token class-name">Animal</span> duck <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Duck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
 <span class="token class-name">Animal</span> chicken <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Chicken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
 animalSound<span class="token punctuation">.</span><span class="token function">makeSound</span><span class="token punctuation">(</span> duck <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出嘎嘎嘎</span>
 animalSound<span class="token punctuation">.</span><span class="token function">makeSound</span><span class="token punctuation">(</span> chicken <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出咯咯咯</span>
 <span class="token punctuation">}</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="javascript-的多态" tabindex="-1"><a class="header-anchor" href="#javascript-的多态"><span>JavaScript 的多态</span></a></h3><p>从前面的讲解我们得知，多态的思想实际上是把“做什么”和“谁去做”分离开来，要实现这一点，归根结底先要消除类型之间的耦合关系。如果类型之间的耦合关系没有被消除，那么我们在 makeSound 方法中指定了发出叫声的对象是某个类型，它就不可能再被替换为另外一个类型。</p><p>在 Java 中，可以通过向上转型来实现多态。</p><p>而 JavaScript 的变量类型在运行期是可变的。一个 JavaScript 对象，既可以表示 Duck 类型的对象，又可以表示 Chicken 类型的对象，这意味着 JavaScript 对象的多态性是与生俱来的。</p><p>这种与生俱来的多态性并不难解释。JavaScript 作为一门动态类型语言，它在编译时没有类型检查的过程，既没有检查创建的对象类型，又没有检查传递的参数类型。在“对象的多态性”的代码示例中，</p><p>我们既可以往 makeSound 函数里传递 duck 对象当作参数，也可以传递 chicken 对象当作参数。</p><p>由此可见，某一种动物能否发出叫声，只取决于它有没有 makeSound 方法，而不取决于它是否是某种类型的对象，这里不存在任何程度上的“类型耦合”。这正是我们从上一节的鸭子类型中领悟的道理。在 JavaScript 中，并不需要诸如向上转型之类的技术来取得多态的效果。</p><h3 id="多态在面向对象程序设计中的作用" tabindex="-1"><a class="header-anchor" href="#多态在面向对象程序设计中的作用"><span>多态在面向对象程序设计中的作用</span></a></h3><p>有许多人认为，多态是面向对象编程语言中最重要的技术。但我们目前还很难看出这一点，毕竟大部分人都不关心鸡是怎么叫的，也不想知道鸭是怎么叫的。让鸡和鸭在同一个消息之下发出不同的叫声，这跟程序员有什么关系呢？</p><p>Martin Fowler 在《重构：改善既有代码的设计》里写到：</p><p><em>多态的最根本好处在于，你不必再向对象询问“你是什么类型”而后根据得到的答案调用对象的某个行为——你只管调用该行为就是了，其他的一切多态机制都会为你安排妥当。</em></p><p>换句话说，多态最根本的作用就是通过把过程化的条件分支语句转化为对象的多态性，从而消除这些条件分支语句。</p><p>Martin Fowler 的话可以用下面这个例子很好地诠释：</p><p><em>在电影的拍摄现场，当导演喊出“action”时，主角开始背台词，照明师负责打灯光，后面的群众演员假装中枪倒地，道具师往镜头里撒上雪花。在得到同一个消息时，每个对象都知道自己应该做什么。如果不利用对象的多态性，而是用面向过程的方式来编写这一段代码，那么相当于在电影开始拍摄之后，导演每次都要走到每个人的面前，确认它们的职业分工（类型），然后告诉他们要做什么。如果映射到程序中，那么程序中将充斥着条件分支语句。</em></p><p>利用对象的多态性，导演在发布消息时，就不必考虑各个对象接到消息后应该做什么。对象应该做什么并不是临时决定的，而是已经事先约定和排练完毕的。每个对象应该做什么，已经成为了该对象的一个方法，被安装在对象的内部，每个对象负责它们自己的行为。所以这些对象可以根据同一个消息，有条不紊地分别进行各自的工作。</p><p>将行为分布在各个对象中，并让这些对象各自负责自己的行为，这正是面向对象设计的优点。</p><p>再看一个现实开发中遇到的例子，这个例子的思想和动物叫声的故事非常相似。</p><p>假设我们要编写一个地图应用，现在有两家可选的地图 API 提供商供我们接入自己的应用。目前我们选择的是谷歌地图，谷歌地图的 API 中提供了 show 方法，负责在页面上展示整个地图。示例代码如下：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> googleMap <span class="token operator">=</span> <span class="token punctuation">{</span> 
 <span class="token function-variable function">show</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> 
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&#39;开始渲染谷歌地图&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> 
 <span class="token punctuation">}</span> 
<span class="token punctuation">}</span><span class="token punctuation">;</span> 
<span class="token keyword">var</span> <span class="token function-variable function">renderMap</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> 
 googleMap<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span><span class="token punctuation">;</span> 
<span class="token function">renderMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：开始渲染谷歌地图</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>后来因为某些原因，要把谷歌地图换成百度地图，为了让 renderMap 函数保持一定的弹性，我们用一些条件分支来让 renderMap 函数同时支持谷歌地图和百度地图：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> googleMap <span class="token operator">=</span> <span class="token punctuation">{</span> 
 <span class="token function-variable function">show</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> 
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&#39;开始渲染谷歌地图&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> 
 <span class="token punctuation">}</span> 
<span class="token punctuation">}</span><span class="token punctuation">;</span> 
<span class="token keyword">var</span> baiduMap <span class="token operator">=</span> <span class="token punctuation">{</span> 
 <span class="token function-variable function">show</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> 
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&#39;开始渲染百度地图&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> 
 <span class="token punctuation">}</span> 
<span class="token punctuation">}</span><span class="token punctuation">;</span> 
<span class="token keyword">var</span> <span class="token function-variable function">renderMap</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span> <span class="token parameter">type</span> <span class="token punctuation">)</span><span class="token punctuation">{</span> 
 <span class="token keyword">if</span> <span class="token punctuation">(</span> type <span class="token operator">===</span> <span class="token string">&#39;google&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">{</span> 
 		googleMap<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
 <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> type <span class="token operator">===</span> <span class="token string">&#39;baidu&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">{</span> 
 		baiduMap<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
 <span class="token punctuation">}</span> 
<span class="token punctuation">}</span><span class="token punctuation">;</span> 
<span class="token function">renderMap</span><span class="token punctuation">(</span> <span class="token string">&#39;google&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：开始渲染谷歌地图 </span>
<span class="token function">renderMap</span><span class="token punctuation">(</span> <span class="token string">&#39;baidu&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：开始渲染百度地图</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，虽然 renderMap 函数目前保持了一定的弹性，但这种弹性是很脆弱的，一旦需要替换成搜搜地图，那无疑必须得改动 renderMap 函数，继续往里面堆砌条件分支语句。</p><p>我们还是先把程序中相同的部分抽象出来，那就是显示某个地图：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">renderMap</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span> <span class="token parameter">map</span> <span class="token punctuation">)</span><span class="token punctuation">{</span> 
 <span class="token keyword">if</span> <span class="token punctuation">(</span> map<span class="token punctuation">.</span>show <span class="token keyword">instanceof</span> <span class="token class-name">Function</span> <span class="token punctuation">)</span><span class="token punctuation">{</span> 
 		map<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
 <span class="token punctuation">}</span> 
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">renderMap</span><span class="token punctuation">(</span> googleMap <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：开始渲染谷歌地图 </span>
<span class="token function">renderMap</span><span class="token punctuation">(</span> baiduMap <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：开始渲染百度地图</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在来找找这段代码中的多态性。当我们向谷歌地图对象和百度地图对象分别发出“展示地图”的消息时，会分别调用它们的 show 方法，就会产生各自不同的执行结果。对象的多态性提示我们，“做什么”和“怎么去做”是可以分开的，即使以后增加了搜搜地图，renderMap 函数仍然不需要做任何改变，如下所示：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> sosoMap <span class="token operator">=</span> <span class="token punctuation">{</span> 
 <span class="token function-variable function">show</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> 
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&#39;开始渲染搜搜地图&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> 
 <span class="token punctuation">}</span> 
<span class="token punctuation">}</span><span class="token punctuation">;</span> 
<span class="token function">renderMap</span><span class="token punctuation">(</span> sosoMap <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：开始渲染搜搜地图</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，我们假设每个地图 API 提供展示地图的方法名都是 show，在实际开发中也许不会如此顺利，这时候可以借助适配器模式来解决问题。</p><h3 id="设计模式与多态" tabindex="-1"><a class="header-anchor" href="#设计模式与多态"><span>设计模式与多态</span></a></h3><p>学习设计模式我们可以写出好的面向对象的代码，它给了我们一些常见的问题的解决方案，这些方案都是用了一些面向对象的技巧，比如把数据和操作包起来，让子类继承父类，让不同的对象可以用同样的方法，让对象可以组合成新的对象等等。其中，让不同的对象可以用同样的方法，就是多态，这是很重要的一个技巧，很多设计模式都用到了多态。例如：</p><ul><li>在命令模式中，我们把请求封装成一些对象，这些对象都有一个 execute 方法，但是每个对象做的事情不一样，所以执行的结果也不一样。我们不用管这些对象具体怎么做的，只要调用它们的 execute 方法就行了。</li><li>在组合模式中，我们把一些对象组合成一个新的对象，这些对象都有一个 say 方法，但是每个对象说的话不一样，所以说出来的话也不一样。我们不用管这些对象是不是组合的，只要调用它们的 say 方法就行了。</li><li>在策略模式中，我们把一些算法封装成一些对象，这些对象都有一个 calculate 方法，但是每个对象算的方式不一样，所以算出来的结果也不一样。我们不用管这些对象具体怎么算的，只要调用它们的 calculate 方法就行了。</li></ul><p>在 JavaScript 这种把函数当成对象的语言中，函数也可以用同样的方法，但是做的事情不一样，所以执行的结果也不一样。这也是多态的一种表现，也是很多设计模式可以用函数来实现的原因。</p><h2 id="封装" tabindex="-1"><a class="header-anchor" href="#封装"><span>封装</span></a></h2>`,79),c=[e];function o(l,i){return s(),a("div",null,c)}const d=n(t,[["render",o],["__file","01-面向对象的JavaScript.html.vue"]]),r=JSON.parse('{"path":"/%E5%85%B6%E5%AE%83/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/02-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/01-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84JavaScript.html","title":"面向对象的JavaScript","lang":"zh-CN","frontmatter":{"title":"面向对象的JavaScript","date":"2023-11-22T00:00:00.000Z","order":1,"tag":["设计模式"],"description":"我们在进入设计模式的学习之前，需要先了解一些相关的周边知识， 例如一些面向对象的基础知识、this 等重要概念，还要掌握一些函数式编程的技巧。这些都是学习设计模式的必要铺垫。 动态类型语言和鸭子类型 静态类型和动态类型语言 编程语言按照数据类型大体可以分为两类，一类是静态类型语言，另一类是动态类型语言。 静态类型语言在编译时便已确定变量的类型，而动态类...","head":[["meta",{"property":"og:url","content":"https://godx-18.github.io/%E5%85%B6%E5%AE%83/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/02-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/01-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84JavaScript.html"}],["meta",{"property":"og:site_name","content":"烜"}],["meta",{"property":"og:title","content":"面向对象的JavaScript"}],["meta",{"property":"og:description","content":"我们在进入设计模式的学习之前，需要先了解一些相关的周边知识， 例如一些面向对象的基础知识、this 等重要概念，还要掌握一些函数式编程的技巧。这些都是学习设计模式的必要铺垫。 动态类型语言和鸭子类型 静态类型和动态类型语言 编程语言按照数据类型大体可以分为两类，一类是静态类型语言，另一类是动态类型语言。 静态类型语言在编译时便已确定变量的类型，而动态类..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-12-21T09:54:20.000Z"}],["meta",{"property":"article:author","content":"GodX"}],["meta",{"property":"article:tag","content":"设计模式"}],["meta",{"property":"article:published_time","content":"2023-11-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-12-21T09:54:20.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"面向对象的JavaScript\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-11-22T00:00:00.000Z\\",\\"dateModified\\":\\"2023-12-21T09:54:20.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"GodX\\",\\"url\\":\\"https://github.com/GodX-18\\"}]}"]]},"headers":[{"level":2,"title":"动态类型语言和鸭子类型","slug":"动态类型语言和鸭子类型","link":"#动态类型语言和鸭子类型","children":[{"level":3,"title":"静态类型和动态类型语言","slug":"静态类型和动态类型语言","link":"#静态类型和动态类型语言","children":[]},{"level":3,"title":"静态类型语言的优缺点","slug":"静态类型语言的优缺点","link":"#静态类型语言的优缺点","children":[]},{"level":3,"title":"动态类型语言的优缺点","slug":"动态类型语言的优缺点","link":"#动态类型语言的优缺点","children":[]},{"level":3,"title":"什么是鸭子类型？","slug":"什么是鸭子类型","link":"#什么是鸭子类型","children":[]}]},{"level":2,"title":"多态","slug":"多态","link":"#多态","children":[{"level":3,"title":"什么是多态？","slug":"什么是多态","link":"#什么是多态","children":[]},{"level":3,"title":"多态的意义","slug":"多态的意义","link":"#多态的意义","children":[]},{"level":3,"title":"对象的多态性","slug":"对象的多态性","link":"#对象的多态性","children":[]},{"level":3,"title":"类型检查和多态","slug":"类型检查和多态","link":"#类型检查和多态","children":[]},{"level":3,"title":"使用继承得到多态效果","slug":"使用继承得到多态效果","link":"#使用继承得到多态效果","children":[]},{"level":3,"title":"JavaScript 的多态","slug":"javascript-的多态","link":"#javascript-的多态","children":[]},{"level":3,"title":"多态在面向对象程序设计中的作用","slug":"多态在面向对象程序设计中的作用","link":"#多态在面向对象程序设计中的作用","children":[]},{"level":3,"title":"设计模式与多态","slug":"设计模式与多态","link":"#设计模式与多态","children":[]}]},{"level":2,"title":"封装","slug":"封装","link":"#封装","children":[]}],"git":{"createdTime":1701315084000,"updatedTime":1703152460000,"contributors":[{"name":"GodX","email":"1046529973@qq.com","commits":2}]},"readingTime":{"minutes":17.9,"words":5369},"filePathRelative":"其它/设计模式/02-基础知识/01-面向对象的JavaScript.md","localizedDate":"2023年11月22日","excerpt":"<p>我们在进入设计模式的学习之前，需要先了解一些相关的周边知识，</p>\\n<p>例如一些面向对象的基础知识、this 等重要概念，还要掌握一些函数式编程的技巧。这些都是学习设计模式的必要铺垫。</p>\\n<h2>动态类型语言和鸭子类型</h2>\\n<h3>静态类型和动态类型语言</h3>\\n<p>编程语言按照数据类型大体可以分为两类，一类是静态类型语言，另一类是动态类型语言。</p>\\n<p>静态类型语言在编译时便已确定变量的类型，而动态类型语言的变量类型要到程序运行的时候，待变量被赋予某个值之后，才会具有某种类型。</p>\\n<h3>静态类型语言的优缺点</h3>\\n<ul>\\n<li>\\n<p>优点</p>\\n<ul>\\n<li>在编译时就能发现类型不匹配的错误，编译器可以帮助我们提前避免程序在运行期间又肯呢个发生的一些错误。</li>\\n<li>如果在程序中明确地规定了数据类型，编译器还可以针对这些信息对程序进行一些优化工作，提高程序执行速度</li>\\n</ul>\\n<div class=\\"hint-container tip\\">\\n<p class=\\"hint-container-title\\">编译器如何根据类型优化程序？</p>\\n<p>编译器可以针对明确的数据类型进行优化工作，提高程序执行速度的原因主要有以下几点：</p>\\n<ol>\\n<li>\\n<p>内存分配优化：明确的数据类型可以帮助编译器更好地理解程序的内存使用情况，从而可以更有效地进行内存分配和管理，减少内存碎片和提高内存访问效率。</p>\\n</li>\\n<li>\\n<p>指令优化：编译器可以根据数据类型的信息来选择更合适的指令序列，例如针对特定数据类型的优化指令集，从而提高程序的执行效率。</p>\\n</li>\\n<li>\\n<p>编译器优化：明确的数据类型可以帮助编译器进行更精确的类型推导和优化，例如消除不必要的类型转换和临时变量，减少运行时开销。</p>\\n</li>\\n<li>\\n<p>算法优化：根据数据类型的信息，编译器可以选择更适合特定数据类型的算法和数据结构，从而提高程序的执行速度。</p>\\n</li>\\n</ol>\\n<p>总之，明确的数据类型可以为编译器提供更多的信息和优化的可能性，从而提高程序的执行速度。</p>\\n</div>\\n</li>\\n<li>\\n<p>缺点</p>\\n<ul>\\n<li>迫使程序员依照强契约来编写程序，为每个变量规定数据类型，归根结底只是辅助我们编写可靠性高程序的一种手段，而不是编写程序的目的，毕竟大部分人编写程序的目的是为了完成需求交付生产</li>\\n<li>类型的声明也会增加更多的代码，在程序编写过程中，这些细节会让程序员的精力从思考业务逻辑上分散开来。</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}');export{d as comp,r as data};
