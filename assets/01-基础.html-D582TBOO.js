import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as c,c as l,b as n,e as s,d as t,a as p}from"./app-oXp7PBbS.js";const i={},u=n("h2",{id:"介绍",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#介绍"},[n("span",null,"介绍")])],-1),r=n("p",null,[s("Koa 是一个新的 web 框架，"),n("strong",null,"由 Express 幕后的原班人马打造"),s("，致力于成为 web 应用和 API 开发领域中的一个更小、更富有表现力、更健壮的基石。")],-1),k={href:"https://koajs.com/",target:"_blank",rel:"noopener noreferrer"},d={href:"https://github.com/koajs/koa",target:"_blank",rel:"noopener noreferrer"},v={href:"https://koa.nodejs.cn/",target:"_blank",rel:"noopener noreferrer"},m=p("<li><p>Koa 的原理和内部结构很像 Express，但是语法和内部结构进行了升级</p></li><li><p>Koa <strong>内部使用 ES6 编写</strong>，号称是下一代 Node.js Web 框架</p></li><li><p>它的主要特点是通过<strong>利用 async 函数，帮你丢弃回调函数</strong></p><ul><li>Koa 1 是基于 ES2015 中的 Generator 生成器函数结合 CO 模块</li><li>Koa 2 完全抛弃了 Generator 和 co，升级为了 ES2017 中的 async/await 函数</li></ul></li><li><p>正是由于 Koa 内部基于最新的异步处理方式，所以使用 <strong>Koa 处理异常更加简单</strong></p></li><li><p>Koa 中提供了 CTX 上下文对象</p><ul><li>Express 是扩展了 req 和 res</li></ul></li><li><p><strong>Koa 并没有捆绑任何中间件</strong>， 而是提供了一套优雅的方法，帮助您快速而愉快地编写服务端应用程序。</p></li>",6),b=n("p",null,"有很多开发工具/框架都是基于 Koa 的",-1),g={href:"https://eggjs.org/",target:"_blank",rel:"noopener noreferrer"},h={href:"https://github.com/vitejs/vite",target:"_blank",rel:"noopener noreferrer"},f={href:"https://github.com/koajs/koa/blob/master/docs/koa-vs-express.md",target:"_blank",rel:"noopener noreferrer"},x=n("li",null,[n("p",null,"个人评价"),n("ul",null,[n("li",null,"koa 2 好用，设计上的确有优势。优势不在能实现更强的功能，而是可以更简单地完成功能。"),n("li",null,"koa 2 社区远不如 express"),n("li",null,"koa 1 在思想上与 koa 2 是一致的，但是 koa 2 的实现更漂亮")])],-1),y=n("p",null,"Koa 相关资源推荐",-1),w={href:"https://github.com/ellerbrock/awesome-koa",target:"_blank",rel:"noopener noreferrer"},j=p(`<h2 id="koa-基本用法" tabindex="-1"><a class="header-anchor" href="#koa-基本用法"><span>Koa 基本用法</span></a></h2><p>1、安装 koa</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> i koa
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Koa 依赖 node v7.6.0 或 ES2015及更高版本和 async 方法支持。</p><p>2、app.js</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> Koa <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;koa&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Koa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token parameter">ctx</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token string">&#39;Hello World&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Koa 应用程序是一个包含一组中间件函数的对象</li><li>它是按照类似堆栈的方式组织和执行的</li><li>Koa 内部没有捆绑任何中间件，甚至是路由功能</li></ul><h2 id="koa-中的-context-对象" tabindex="-1"><a class="header-anchor" href="#koa-中的-context-对象"><span>Koa 中的 Context 对象</span></a></h2>`,8),_={href:"https://koa.bootcss.com/#context%E3%80%82",target:"_blank",rel:"noopener noreferrer"},K=p(`<h2 id="koa-中的路由" tabindex="-1"><a class="header-anchor" href="#koa-中的路由"><span>Koa 中的路由</span></a></h2><h3 id="原生路由" tabindex="-1"><a class="header-anchor" href="#原生路由"><span>原生路由</span></a></h3><p>网站一般都有多个页面。通过ctx.request.path可以获取用户请求的路径，由此实现简单的路由。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">main</span> <span class="token operator">=</span> <span class="token parameter">ctx</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>path <span class="token operator">!==</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ctx<span class="token punctuation">.</span>response<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">&#39;html&#39;</span><span class="token punctuation">;</span>
    ctx<span class="token punctuation">.</span>response<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token string">&#39;&lt;a href=&quot;/&quot;&gt;Index Page&lt;/a&gt;&#39;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    ctx<span class="token punctuation">.</span>response<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token string">&#39;Hello World&#39;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="koa-router-模块" tabindex="-1"><a class="header-anchor" href="#koa-router-模块"><span>koa-router 模块</span></a></h3>`,5),E={href:"https://github.com/koajs/router",target:"_blank",rel:"noopener noreferrer"},q=p(`<ul><li>Express 路由风格（app.get、app.put、app.post ...）</li><li>命名动态 URL 参数</li><li>具有 URL 生成的命名路由</li><li>使用允许的请求方法响应 OPTIONS 请求</li><li>支持 405 和 501 响应处理</li><li>支持多路由中间件</li><li>支持多个嵌套的路由中间件</li><li>支持 async/awai 语法</li></ul><p>1、安装</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> i @koa/router
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2、示例</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> Koa <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;koa&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> Router <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;@koa/router&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Koa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// ctx.router available</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app
  <span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">.</span><span class="token function">allowedMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="静态资源托管" tabindex="-1"><a class="header-anchor" href="#静态资源托管"><span>静态资源托管</span></a></h3>`,6),A={href:"https://github.com/koajs/static",target:"_blank",rel:"noopener noreferrer"},P=p(`<p>1、安装</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> koa-static
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2、示例</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> serve <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;koa-static&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> Koa <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;koa&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Koa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// $ GET /package.json</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">serve</span><span class="token punctuation">(</span><span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// $ GET /hello.txt</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">serve</span><span class="token punctuation">(</span><span class="token string">&#39;test/fixtures&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// or use absolute paths</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">serve</span><span class="token punctuation">(</span>__dirname <span class="token operator">+</span> <span class="token string">&#39;/test/fixtures&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;listening on port 3000&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="给静态资源设置虚拟路径" tabindex="-1"><a class="header-anchor" href="#给静态资源设置虚拟路径"><span>给静态资源设置虚拟路径</span></a></h3>`,5),G={href:"https://github.com/koajs/mount",target:"_blank",rel:"noopener noreferrer"},B=p(`<h3 id="重定向" tabindex="-1"><a class="header-anchor" href="#重定向"><span>重定向</span></a></h3><p>有些场合，服务器需要重定向（redirect）访问请求。比如，用户登陆以后，将他重定向到登陆前的页面。ctx.response.redirect()方法可以发出一个302跳转，将用户导向另一个路由。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>ctx<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ctx<span class="token punctuation">.</span>response<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token string">&#39;&lt;a href=&quot;/&quot;&gt;Index Page&lt;/a&gt;&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="koa-中间件" tabindex="-1"><a class="header-anchor" href="#koa-中间件"><span>Koa 中间件</span></a></h2><h3 id="logger-功能" tabindex="-1"><a class="header-anchor" href="#logger-功能"><span>Logger 功能</span></a></h3><p>Koa 的最大特色，也是最重要的一个设计，就是中间件（middleware）。为了理解中间件，我们先看一下 Logger （打印日志）功能的实现。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">main</span> <span class="token operator">=</span> <span class="token parameter">ctx</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>method<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  ctx<span class="token punctuation">.</span>response<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token string">&#39;Hello World&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="中间件栈" tabindex="-1"><a class="header-anchor" href="#中间件栈"><span>中间件栈</span></a></h3><figure><img src="https://raw.githubusercontent.com/GodX-18/picBed/main/image-20240402153609735.png" alt="image-20240402153609735" tabindex="0" loading="lazy"><figcaption>image-20240402153609735</figcaption></figure><ul><li>多个中间件会形成一个栈结构（middle stack），以&quot;先进后出&quot;（first-in-last-out）的顺序执行。</li><li>最外层的中间件首先执行。</li><li>调用next函数，把执行权交给下一个中间件。</li><li>...</li><li>最内层的中间件最后执行。</li><li>执行结束后，把执行权交回上一层的中间件。</li><li>...</li><li>最外层的中间件收回执行权之后，执行next函数后面的代码。</li></ul><p>中间件栈结构示例如下：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">one</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;&gt;&gt; one&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;&lt; one&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token function-variable function">two</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;&gt;&gt; two&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;&lt; two&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token function-variable function">three</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;&gt;&gt; three&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;&lt; three&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>one<span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>two<span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>three<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果中间件内部没有调用 <code>next</code> 函数，那么执行权就不会传递下去。作为练习，你可以将 <code>two</code> 函数里面 <code>next()</code> 这一行注释掉再执行，看看会有什么结果。</p><div class="hint-container tip"><p class="hint-container-title">Koa 的洋葱圈模型是什么？</p><p>Koa 的洋葱圈模型是一种中间件架构，它允许你以一种特定的方式组织和执行代码。在这个模型中，每个中间件都可以执行两个动作：一个在处理请求（Request）时，另一个在发送响应（Response）时。这就像剥洋葱一样，层层深入，然后再层层返回。</p><p>当一个请求到达 Koa 应用程序时，它会从最外层的中间件开始执行，然后逐层向内传递，直到达到最内层的中间件。每个中间件在调用 <code>next()</code> 函数之前都有机会对请求进行处理。一旦 <code>next()</code> 被调用，控制权就会传递到下一个中间件，直到没有更多的中间件执行。</p><p>在所有的中间件执行完毕后，事件循环会逆转方向，从最内层的中间件开始，逐层向外执行每个中间件的第二部分代码。这允许中间件在响应发送回客户端之前执行后续操作。</p><p>这种模型的优点是：</p><ul><li><strong>灵活性</strong>：你可以根据请求和响应的不同阶段灵活地添加代码。</li><li><strong>错误处理</strong>：可以在外层中间件中捕获和处理内层中间件抛出的错误。</li><li><strong>可维护性</strong>：代码的结构清晰，易于理解和维护。</li></ul><p>例如，如果你有一个记录请求时间的中间件和一个处理数据库查询的中间件，洋葱圈模型允许你在请求开始时记录时间，在所有数据库查询完成后再次记录时间，从而计算出处理请求所需的总时间。这种模式非常适合处理那些需要在请求处理的前后执行的逻辑。</p></div><div class="hint-container tip"><p class="hint-container-title">为什么 Koa 要使用洋葱圈模型?</p><p>Koa 使用洋葱圈模型的主要原因是为了提高代码的可读性和可维护性，同时确保中间件的执行顺序和依赖关系得到正确处理。洋葱圈模型允许中间件以一种嵌套的方式执行，这意味着请求（Request）和响应（Response）可以在不同的中间件层次中被捕获和处理。</p><p>在 Koa 的洋葱圈模型中，中间件的执行流程如下：</p><ol><li>请求开始时，从最外层的中间件开始执行。</li><li>每个中间件可以执行一些操作，然后通过调用 <code>next()</code> 函数将控制权传递给下一个中间件。</li><li>当控制权传递到最内层的中间件后，它开始逐层返回，每个中间件都有机会在响应发送回客户端之前执行更多的操作。</li></ol><p>这种模型的优点包括：</p><ul><li><strong>错误处理</strong>：可以在外层中间件中捕获内层中间件抛出的错误，从而集中处理错误。</li><li><strong>代码组织</strong>：中间件的层次结构使得代码更加模块化和组织化，便于管理和维护。</li><li><strong>灵活性</strong>：开发者可以根据需要在请求和响应阶段添加、修改或删除中间件。</li><li><strong>性能优化</strong>：可以在请求的早期阶段快速响应，或者在响应的后期阶段进行必要的清理工作。</li></ul><p>洋葱圈模型确保了中间件的执行顺序，使得每个中间件都可以在请求进入和退出时执行代码，这对于诸如日志记录、请求处理、响应处理等功能至关重要。这种模式也使得异步操作更加直观，因为它允许开发者以同步的方式编写代码，而底层实现则是异步的。</p></div><h3 id="异步中间件" tabindex="-1"><a class="header-anchor" href="#异步中间件"><span>异步中间件</span></a></h3><p>迄今为止，所有例子的中间件都是同步的，不包含异步操作。如果有异步操作（比如读取数据库），中间件就必须写成 async 函数。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> util<span class="token punctuation">.</span><span class="token function">promisify</span><span class="token punctuation">(</span>fs<span class="token punctuation">.</span>readFile<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">&#39;./views/index.html&#39;</span><span class="token punctuation">)</span>
  ctx<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">&#39;html&#39;</span>
  ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> data
  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，<code>fs.readFile</code> 是一个异步操作，必须写成 await <code>fs.readFile()</code>，然后中间件必须写成 async 函数。</p><h3 id="中间件的合成" tabindex="-1"><a class="header-anchor" href="#中间件的合成"><span>中间件的合成</span></a></h3>`,20),C={href:"https://github.com/koajs/compose",target:"_blank",rel:"noopener noreferrer"},T=p(`<p>1、安装</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> koa-compose
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2、示例</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> compose <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;koa-compose&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">logger</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>method<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token function-variable function">main</span> <span class="token operator">=</span> <span class="token parameter">ctx</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  ctx<span class="token punctuation">.</span>response<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token string">&#39;Hello World&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> middlewares <span class="token operator">=</span> <span class="token function">compose</span><span class="token punctuation">(</span><span class="token punctuation">[</span>logger<span class="token punctuation">,</span> main<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>middlewares<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="koa-中的错误处理" tabindex="-1"><a class="header-anchor" href="#koa-中的错误处理"><span>Koa 中的错误处理</span></a></h2><h3 id="_500-错误" tabindex="-1"><a class="header-anchor" href="#_500-错误"><span>500 错误</span></a></h3><p>如果代码运行过程中发生错误，我们需要把错误信息返回给用户。HTTP 协定约定这时要返回500状态码。Koa 提供了ctx.throw()方法，用来抛出错误，ctx.throw(500)就是抛出500错误。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">main</span> <span class="token operator">=</span> <span class="token parameter">ctx</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  ctx<span class="token punctuation">.</span><span class="token function">throw</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_404-错误" tabindex="-1"><a class="header-anchor" href="#_404-错误"><span>404 错误</span></a></h3><p>如果将ctx.response.status设置成404，就相当于ctx.throw(404)，返回404错误。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">main</span> <span class="token operator">=</span> <span class="token parameter">ctx</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  ctx<span class="token punctuation">.</span>response<span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token number">404</span><span class="token punctuation">;</span>
  ctx<span class="token punctuation">.</span>response<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token string">&#39;Page Not Found&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="处理错误的中间件" tabindex="-1"><a class="header-anchor" href="#处理错误的中间件"><span>处理错误的中间件</span></a></h3><p>为了方便处理错误，最好使用 <code>try...catch</code> 将其捕获。但是，为每个中间件都写 <code>try...catch</code> 太麻烦，我们可以让最外层的中间件，负责所有中间件的错误处理。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">handler</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ctx<span class="token punctuation">.</span>response<span class="token punctuation">.</span>status <span class="token operator">=</span> err<span class="token punctuation">.</span>statusCode <span class="token operator">||</span> err<span class="token punctuation">.</span>status <span class="token operator">||</span> <span class="token number">500</span><span class="token punctuation">;</span>
    ctx<span class="token punctuation">.</span>response<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">message</span><span class="token operator">:</span> err<span class="token punctuation">.</span>message
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">main</span> <span class="token operator">=</span> <span class="token parameter">ctx</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  ctx<span class="token punctuation">.</span><span class="token function">throw</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="error-事件的监听" tabindex="-1"><a class="header-anchor" href="#error-事件的监听"><span>error 事件的监听</span></a></h3><p>运行过程中一旦出错，Koa 会触发一个error事件。监听这个事件，也可以处理错误。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">main</span> <span class="token operator">=</span> <span class="token parameter">ctx</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  ctx<span class="token punctuation">.</span><span class="token function">throw</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> ctx</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
  console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;server error&#39;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果 req/res 期间出现错误，并且 <em>无法</em> 响应客户端，Context实例仍然被传递：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> ctx</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;server error&#39;</span><span class="token punctuation">,</span> err<span class="token punctuation">,</span> ctx<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当发生错误并且仍然可以响应客户端时，也没有数据被写入 socket 中，Koa 将用一个 500 “内部服务器错误” 进行适当的响应。在任一情况下，为了记录目的，都会发出应用级 “错误”。</p><h3 id="释放-error-事件" tabindex="-1"><a class="header-anchor" href="#释放-error-事件"><span>释放 error 事件</span></a></h3><p>需要注意的是，如果错误被try...catch捕获，就不会触发error事件。这时，必须调用ctx.app.emit()，手动释放error事件，才能让监听函数生效。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">handler</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ctx<span class="token punctuation">.</span>response<span class="token punctuation">.</span>status <span class="token operator">=</span> err<span class="token punctuation">.</span>statusCode <span class="token operator">||</span> err<span class="token punctuation">.</span>status <span class="token operator">||</span> <span class="token number">500</span><span class="token punctuation">;</span>
    ctx<span class="token punctuation">.</span>response<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">&#39;html&#39;</span><span class="token punctuation">;</span>
    ctx<span class="token punctuation">.</span>response<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token string">&#39;&lt;p&gt;Something wrong, please contact administrator.&lt;/p&gt;&#39;</span><span class="token punctuation">;</span>
    ctx<span class="token punctuation">.</span>app<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span> err<span class="token punctuation">,</span> ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">main</span> <span class="token operator">=</span> <span class="token parameter">ctx</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  ctx<span class="token punctuation">.</span><span class="token function">throw</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;logging error &#39;</span><span class="token punctuation">,</span> err<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，<code>main</code> 函数抛出错误，被 <code>handler</code> 函数捕获。<code>catch</code> 代码块里面使用 <code>ctx.app.emit()</code> 手动释放 <code>error</code> 事件，才能让监听函数监听到。</p><h2 id="koa-开发-web-app-功能" tabindex="-1"><a class="header-anchor" href="#koa-开发-web-app-功能"><span>Koa 开发 Web App 功能</span></a></h2><h3 id="cookies" tabindex="-1"><a class="header-anchor" href="#cookies"><span>Cookies</span></a></h3><p><code>ctx.cookies</code> 用来读写 Cookie。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">main</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">ctx</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> n <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;view&#39;</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
  ctx<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;view&#39;</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
  ctx<span class="token punctuation">.</span>response<span class="token punctuation">.</span>body <span class="token operator">=</span> n <span class="token operator">+</span> <span class="token string">&#39; views&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,28),N={href:"http://127.0.0.1:3000",target:"_blank",rel:"noopener noreferrer"},S=p(`<h3 id="表单" tabindex="-1"><a class="header-anchor" href="#表单"><span>表单</span></a></h3><p>Web 应用离不开处理表单。本质上，表单就是 POST 方法发送到服务器的键值对。koa-body模块可以用来从 POST 请求的数据体里面提取键值对。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> koaBody <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;koa-body&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">main</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">ctx</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> body <span class="token operator">=</span> ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>body<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>body<span class="token punctuation">.</span>name<span class="token punctuation">)</span> ctx<span class="token punctuation">.</span><span class="token function">throw</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token string">&#39;.name required&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> body<span class="token punctuation">.</span>name <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">koaBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="文件上传" tabindex="-1"><a class="header-anchor" href="#文件上传"><span>文件上传</span></a></h3><p>koa-body 模块还可以用来处理文件上传。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> os <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;os&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> koaBody <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;koa-body&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">main</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">ctx</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> tmpdir <span class="token operator">=</span> os<span class="token punctuation">.</span><span class="token function">tmpdir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> filePaths <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> files <span class="token operator">=</span> ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>body<span class="token punctuation">.</span>files <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> files<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> file <span class="token operator">=</span> files<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> filePath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>tmpdir<span class="token punctuation">,</span> file<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> reader <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createReadStream</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> writer <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createWriteStream</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>
    reader<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>writer<span class="token punctuation">)</span><span class="token punctuation">;</span>
    filePaths<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> filePaths<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">koaBody</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">multipart</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="完整代码" tabindex="-1"><a class="header-anchor" href="#完整代码"><span>完整代码</span></a></h2>`,7),F={href:"https://github.com/GodX-18/study-code/tree/master/%E5%A4%A7%E5%89%8D%E7%AB%AF/koa/koa-demo",target:"_blank",rel:"noopener noreferrer"};function R(W,X){const a=o("ExternalLinkIcon");return c(),l("div",null,[u,n("ul",null,[n("li",null,[r,n("ul",null,[n("li",null,[s("官网："),n("a",k,[s("https://koajs.com/"),t(a)])]),n("li",null,[s("GitHub 仓库："),n("a",d,[s("https://github.com/koajs/koa"),t(a)])]),n("li",null,[s("一个翻译的中文网："),n("a",v,[s("Koa 中文网 (nodejs.cn)"),t(a)])])])]),m,n("li",null,[b,n("ul",null,[n("li",null,[n("a",g,[s("Egg.js"),t(a)])]),n("li",null,[s("构建工具 "),n("a",h,[s("Vite"),t(a)])])])]),n("li",null,[n("p",null,[n("a",f,[s("Koa vs Express"),t(a)])])]),x,n("li",null,[y,n("ul",null,[n("li",null,[n("a",w,[s("Awesome Koa"),t(a)])])])])]),j,n("p",null,[s("参见："),n("a",_,[s("https://koa.bootcss.com/#context。"),t(a)])]),K,n("p",null,[s("原生路由用起来不太方便，我们可以使用封装好的 "),n("a",E,[s("koa-router"),t(a)]),s(" 模块。")]),q,n("p",null,[s("如果网站提供静态资源（图片、字体、样式表、脚本......），为它们一个个写路由就很麻烦，也没必要。"),n("a",A,[s("koa-static"),t(a)]),s(" 模块封装了这部分的请求。")]),P,n("p",null,[s("使用 Koa 提供的 "),n("a",G,[s("koa-mount"),t(a)]),s(" 。")]),B,n("p",null,[n("a",C,[s("koa-compose"),t(a)]),s(" 模块可以将多个中间件合成为一个。")]),T,n("p",null,[s("访问 "),n("a",N,[s("http://127.0.0.1:3000"),t(a)]),s(" ，你会看到1 views。刷新一次页面，就变成了2 views。再刷新，每次都会计数增加1。")]),S,n("p",null,[n("a",F,[s("查看"),t(a)])])])}const $=e(i,[["render",R],["__file","01-基础.html.vue"]]),D=JSON.parse('{"path":"/%E5%A4%A7%E5%89%8D%E7%AB%AF/Nodejs%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/Koa/01-%E5%9F%BA%E7%A1%80.html","title":"基础","lang":"zh-CN","frontmatter":{"title":"基础","order":1,"category":["前端"],"tag":["nodejs","Koa"],"description":"介绍 Koa 是一个新的 web 框架，由 Express 幕后的原班人马打造，致力于成为 web 应用和 API 开发领域中的一个更小、更富有表现力、更健壮的基石。 官网：https://koajs.com/ GitHub 仓库：https://github.com/koajs/koa 一个翻译的中文网：Koa 中文网 (nodejs.cn) Koa...","head":[["meta",{"property":"og:url","content":"https://godx-18.github.io/%E5%A4%A7%E5%89%8D%E7%AB%AF/Nodejs%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/Koa/01-%E5%9F%BA%E7%A1%80.html"}],["meta",{"property":"og:site_name","content":"烜"}],["meta",{"property":"og:title","content":"基础"}],["meta",{"property":"og:description","content":"介绍 Koa 是一个新的 web 框架，由 Express 幕后的原班人马打造，致力于成为 web 应用和 API 开发领域中的一个更小、更富有表现力、更健壮的基石。 官网：https://koajs.com/ GitHub 仓库：https://github.com/koajs/koa 一个翻译的中文网：Koa 中文网 (nodejs.cn) Koa..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.githubusercontent.com/GodX-18/picBed/main/image-20240402153609735.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-08T06:08:17.000Z"}],["meta",{"property":"article:author","content":"GodX"}],["meta",{"property":"article:tag","content":"nodejs"}],["meta",{"property":"article:tag","content":"Koa"}],["meta",{"property":"article:modified_time","content":"2024-05-08T06:08:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"基础\\",\\"image\\":[\\"https://raw.githubusercontent.com/GodX-18/picBed/main/image-20240402153609735.png\\"],\\"dateModified\\":\\"2024-05-08T06:08:17.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"GodX\\",\\"url\\":\\"https://github.com/GodX-18\\"}]}"]]},"headers":[{"level":2,"title":"介绍","slug":"介绍","link":"#介绍","children":[]},{"level":2,"title":"Koa 基本用法","slug":"koa-基本用法","link":"#koa-基本用法","children":[]},{"level":2,"title":"Koa 中的 Context 对象","slug":"koa-中的-context-对象","link":"#koa-中的-context-对象","children":[]},{"level":2,"title":"Koa 中的路由","slug":"koa-中的路由","link":"#koa-中的路由","children":[{"level":3,"title":"原生路由","slug":"原生路由","link":"#原生路由","children":[]},{"level":3,"title":"koa-router 模块","slug":"koa-router-模块","link":"#koa-router-模块","children":[]},{"level":3,"title":"静态资源托管","slug":"静态资源托管","link":"#静态资源托管","children":[]},{"level":3,"title":"给静态资源设置虚拟路径","slug":"给静态资源设置虚拟路径","link":"#给静态资源设置虚拟路径","children":[]},{"level":3,"title":"重定向","slug":"重定向","link":"#重定向","children":[]}]},{"level":2,"title":"Koa 中间件","slug":"koa-中间件","link":"#koa-中间件","children":[{"level":3,"title":"Logger 功能","slug":"logger-功能","link":"#logger-功能","children":[]},{"level":3,"title":"中间件栈","slug":"中间件栈","link":"#中间件栈","children":[]},{"level":3,"title":"异步中间件","slug":"异步中间件","link":"#异步中间件","children":[]},{"level":3,"title":"中间件的合成","slug":"中间件的合成","link":"#中间件的合成","children":[]}]},{"level":2,"title":"Koa 中的错误处理","slug":"koa-中的错误处理","link":"#koa-中的错误处理","children":[{"level":3,"title":"500 错误","slug":"_500-错误","link":"#_500-错误","children":[]},{"level":3,"title":"404 错误","slug":"_404-错误","link":"#_404-错误","children":[]},{"level":3,"title":"处理错误的中间件","slug":"处理错误的中间件","link":"#处理错误的中间件","children":[]},{"level":3,"title":"error 事件的监听","slug":"error-事件的监听","link":"#error-事件的监听","children":[]},{"level":3,"title":"释放 error 事件","slug":"释放-error-事件","link":"#释放-error-事件","children":[]}]},{"level":2,"title":"Koa 开发 Web App 功能","slug":"koa-开发-web-app-功能","link":"#koa-开发-web-app-功能","children":[{"level":3,"title":"Cookies","slug":"cookies","link":"#cookies","children":[]},{"level":3,"title":"表单","slug":"表单","link":"#表单","children":[]},{"level":3,"title":"文件上传","slug":"文件上传","link":"#文件上传","children":[]}]},{"level":2,"title":"完整代码","slug":"完整代码","link":"#完整代码","children":[]}],"git":{"createdTime":1713079098000,"updatedTime":1715148497000,"contributors":[{"name":"GodX","email":"1046529973@qq.com","commits":2}]},"readingTime":{"minutes":10.23,"words":3069},"filePathRelative":"大前端/Nodejs全栈开发/Koa/01-基础.md","localizedDate":"2024年4月14日","excerpt":"<h2>介绍</h2>\\n<ul>\\n<li>\\n<p>Koa 是一个新的 web 框架，<strong>由 Express 幕后的原班人马打造</strong>，致力于成为 web 应用和 API 开发领域中的一个更小、更富有表现力、更健壮的基石。</p>\\n<ul>\\n<li>官网：<a href=\\"https://koajs.com/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://koajs.com/</a></li>\\n<li>GitHub 仓库：<a href=\\"https://github.com/koajs/koa\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://github.com/koajs/koa</a></li>\\n<li>一个翻译的中文网：<a href=\\"https://koa.nodejs.cn/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Koa 中文网 (nodejs.cn)</a></li>\\n</ul>\\n</li>\\n<li>\\n<p>Koa 的原理和内部结构很像 Express，但是语法和内部结构进行了升级</p>\\n</li>\\n<li>\\n<p>Koa <strong>内部使用 ES6 编写</strong>，号称是下一代 Node.js Web 框架</p>\\n</li>\\n<li>\\n<p>它的主要特点是通过<strong>利用 async 函数，帮你丢弃回调函数</strong></p>\\n<ul>\\n<li>Koa 1 是基于 ES2015 中的 Generator 生成器函数结合 CO 模块</li>\\n<li>Koa 2 完全抛弃了 Generator 和 co，升级为了 ES2017 中的 async/await 函数</li>\\n</ul>\\n</li>\\n<li>\\n<p>正是由于 Koa 内部基于最新的异步处理方式，所以使用 <strong>Koa 处理异常更加简单</strong></p>\\n</li>\\n<li>\\n<p>Koa 中提供了 CTX 上下文对象</p>\\n<ul>\\n<li>Express 是扩展了 req 和 res</li>\\n</ul>\\n</li>\\n<li>\\n<p><strong>Koa 并没有捆绑任何中间件</strong>， 而是提供了一套优雅的方法，帮助您快速而愉快地编写服务端应用程序。</p>\\n</li>\\n<li>\\n<p>有很多开发工具/框架都是基于 Koa 的</p>\\n<ul>\\n<li><a href=\\"https://eggjs.org/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Egg.js</a></li>\\n<li>构建工具 <a href=\\"https://github.com/vitejs/vite\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Vite</a></li>\\n</ul>\\n</li>\\n<li>\\n<p><a href=\\"https://github.com/koajs/koa/blob/master/docs/koa-vs-express.md\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Koa vs Express</a></p>\\n</li>\\n<li>\\n<p>个人评价</p>\\n<ul>\\n<li>koa 2 好用，设计上的确有优势。优势不在能实现更强的功能，而是可以更简单地完成功能。</li>\\n<li>koa 2 社区远不如 express</li>\\n<li>koa 1 在思想上与 koa 2 是一致的，但是 koa 2 的实现更漂亮</li>\\n</ul>\\n</li>\\n<li>\\n<p>Koa 相关资源推荐</p>\\n<ul>\\n<li><a href=\\"https://github.com/ellerbrock/awesome-koa\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Awesome Koa</a></li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}');export{$ as comp,D as data};
