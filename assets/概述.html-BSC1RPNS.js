import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as l,c as p,b as n,e as s,d as a,a as c}from"./app-oXp7PBbS.js";const i={},r=c(`<h2 id="分组循环" tabindex="-1"><a class="header-anchor" href="#分组循环"><span>分组循环</span></a></h2><h3 id="什么是分组循环" tabindex="-1"><a class="header-anchor" href="#什么是分组循环"><span>什么是分组循环</span></a></h3><p>指的是一种特定的代码写法，通常用于处理按照题目要求被分割成若干段的数组，并且每一段都需要进行相同的判断或处理逻辑。这种写法的好处在于无需特判数组是否为空，也无需在循环结束后再单独处理最后一段区间的逻辑，从而减少了出错的可能性。</p><p>这种分组循环的写法可能包含一个外层循环和一个内层循环。</p><ul><li>外层循环用于迭代数组的每个分段的起始位置</li><li>而内层循环则用于处理当前分段内的元素。</li></ul><p>在这个过程中，可以通过适当的索引操作来访问数组的元素，并根据题目的要求执行相应的逻辑。</p><h3 id="有什么好处" tabindex="-1"><a class="header-anchor" href="#有什么好处"><span>有什么好处</span></a></h3><ul><li>无需特判 <code>nums</code> 是否为空，也无需在循环结束后，再补上处理最后一段区间的逻辑。</li><li>相对简洁且容易理解，有助于减少错误的产生。</li><li>虽然代码写的是一个二重循环，但 i += 1 这句话至多执行 n 次，所以总的时间复杂度仍然是 O(n) 的。</li></ul><h3 id="使用场景" tabindex="-1"><a class="header-anchor" href="#使用场景"><span>使用场景</span></a></h3><p>按照题目要求，数组会被分割成若干段，且每一段的判断/处理逻辑是一样的。</p><h3 id="模板" tabindex="-1"><a class="header-anchor" href="#模板"><span>模板</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">groupLoop</span><span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 初始化变量或其他必要的操作</span>
    <span class="token operator">...</span><span class="token punctuation">.</span>
    <span class="token comment">// 外层循环：迭代每个分段的起始位置</span>
    <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 内层循环：处理当前分段内的元素</span>
        <span class="token keyword">let</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> <span class="token function">condition</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 根据题目要求执行相应的逻辑</span>
            <span class="token comment">// ...</span>

            <span class="token comment">// 内层循环迭代</span>
            j<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 在这里可以添加处理当前分段结束后的逻辑（可选）</span>

        <span class="token comment">// 更新外层循环迭代变量</span>
        i<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 在这里可以添加处理整个数组结束后的逻辑（可选）</span>
<span class="token punctuation">}</span>

<span class="token comment">// 示例：假设要按照某个条件对数组进行分段，并对每个分段内的元素进行处理</span>
<span class="token keyword">function</span> <span class="token function">condition</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 根据题目的条件判断逻辑，返回 true 或 false</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>

<span class="token comment">// 调用分组循环函数</span>
<span class="token keyword">const</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token function">groupLoop</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="案例" tabindex="-1"><a class="header-anchor" href="#案例"><span>案例</span></a></h3>`,13),u={href:"https://leetcode.cn/problems/consecutive-characters/",target:"_blank",rel:"noopener noreferrer"},d={href:"https://leetcode.cn/problems/longer-contiguous-segments-of-ones-than-zeros/",target:"_blank",rel:"noopener noreferrer"},m={href:"https://leetcode.cn/problems/delete-characters-to-make-fancy-string/",target:"_blank",rel:"noopener noreferrer"},k={href:"https://leetcode.cn/problems/remove-colored-pieces-if-both-neighbors-are-the-same-color/",target:"_blank",rel:"noopener noreferrer"},h={href:"https://leetcode.cn/problems/count-number-of-homogenous-substrings/",target:"_blank",rel:"noopener noreferrer"},v={href:"https://leetcode.cn/problems/number-of-smooth-descent-periods-of-a-stock/",target:"_blank",rel:"noopener noreferrer"},b={href:"https://leetcode.cn/problems/minimum-time-to-make-rope-colorful/",target:"_blank",rel:"noopener noreferrer"},g={href:"https://leetcode.cn/problems/longest-substring-of-all-vowels-in-order/",target:"_blank",rel:"noopener noreferrer"},f={href:"https://leetcode.cn/problems/longest-even-odd-subarray-with-threshold/",target:"_blank",rel:"noopener noreferrer"},_={href:"https://leetcode.cn/problems/longest-alternating-subarray/",target:"_blank",rel:"noopener noreferrer"};function y(E,x){const e=o("ExternalLinkIcon");return l(),p("div",null,[r,n("ul",null,[n("li",null,[n("a",u,[s("1446. 连续字符"),a(e)])]),n("li",null,[n("a",d,[s("1869. 哪种连续子字符串更长"),a(e)])]),n("li",null,[n("a",m,[s("1957. 删除字符使字符串变好"),a(e)])]),n("li",null,[n("a",k,[s("2038. 如果相邻两个颜色均相同则删除当前颜色"),a(e)])]),n("li",null,[n("a",h,[s("1759. 统计同质子字符串的数目"),a(e)])]),n("li",null,[n("a",v,[s("2110. 股票平滑下跌阶段的数目"),a(e)])]),n("li",null,[n("a",b,[s("1578. 使绳子变成彩色的最短时间"),a(e)])]),n("li",null,[n("a",g,[s("1839. 所有元音按顺序排布的最长子字符串"),a(e)])]),n("li",null,[n("a",f,[s("2760. 最长奇偶子数组"),a(e)])]),n("li",null,[n("a",_,[s("2765. 最长交替子序列"),a(e)])])])])}const T=t(i,[["render",y],["__file","概述.html.vue"]]),j=JSON.parse('{"path":"/%E7%AE%97%E6%B3%95/%E5%8C%BA%E9%97%B4/%E6%A6%82%E8%BF%B0.html","title":"概述","lang":"zh-CN","frontmatter":{"title":"概述","date":"2024-02-04T00:00:00.000Z","order":1,"category":["算法"],"tag":["区间"],"description":"分组循环 什么是分组循环 指的是一种特定的代码写法，通常用于处理按照题目要求被分割成若干段的数组，并且每一段都需要进行相同的判断或处理逻辑。这种写法的好处在于无需特判数组是否为空，也无需在循环结束后再单独处理最后一段区间的逻辑，从而减少了出错的可能性。 这种分组循环的写法可能包含一个外层循环和一个内层循环。 外层循环用于迭代数组的每个分段的起始位置 而...","head":[["meta",{"property":"og:url","content":"https://godx-18.github.io/%E7%AE%97%E6%B3%95/%E5%8C%BA%E9%97%B4/%E6%A6%82%E8%BF%B0.html"}],["meta",{"property":"og:site_name","content":"烜"}],["meta",{"property":"og:title","content":"概述"}],["meta",{"property":"og:description","content":"分组循环 什么是分组循环 指的是一种特定的代码写法，通常用于处理按照题目要求被分割成若干段的数组，并且每一段都需要进行相同的判断或处理逻辑。这种写法的好处在于无需特判数组是否为空，也无需在循环结束后再单独处理最后一段区间的逻辑，从而减少了出错的可能性。 这种分组循环的写法可能包含一个外层循环和一个内层循环。 外层循环用于迭代数组的每个分段的起始位置 而..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-15T10:30:52.000Z"}],["meta",{"property":"article:author","content":"GodX"}],["meta",{"property":"article:tag","content":"区间"}],["meta",{"property":"article:published_time","content":"2024-02-04T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-02-15T10:30:52.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"概述\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-02-04T00:00:00.000Z\\",\\"dateModified\\":\\"2024-02-15T10:30:52.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"GodX\\",\\"url\\":\\"https://github.com/GodX-18\\"}]}"]]},"headers":[{"level":2,"title":"分组循环","slug":"分组循环","link":"#分组循环","children":[{"level":3,"title":"什么是分组循环","slug":"什么是分组循环","link":"#什么是分组循环","children":[]},{"level":3,"title":"有什么好处","slug":"有什么好处","link":"#有什么好处","children":[]},{"level":3,"title":"使用场景","slug":"使用场景","link":"#使用场景","children":[]},{"level":3,"title":"模板","slug":"模板","link":"#模板","children":[]},{"level":3,"title":"案例","slug":"案例","link":"#案例","children":[]}]}],"git":{"createdTime":1707095945000,"updatedTime":1707993052000,"contributors":[{"name":"GodX","email":"1046529973@qq.com","commits":2}]},"readingTime":{"minutes":2.6,"words":781},"filePathRelative":"算法/区间/概述.md","localizedDate":"2024年2月4日","excerpt":"<h2>分组循环</h2>\\n<h3>什么是分组循环</h3>\\n<p>指的是一种特定的代码写法，通常用于处理按照题目要求被分割成若干段的数组，并且每一段都需要进行相同的判断或处理逻辑。这种写法的好处在于无需特判数组是否为空，也无需在循环结束后再单独处理最后一段区间的逻辑，从而减少了出错的可能性。</p>\\n<p>这种分组循环的写法可能包含一个外层循环和一个内层循环。</p>\\n<ul>\\n<li>外层循环用于迭代数组的每个分段的起始位置</li>\\n<li>而内层循环则用于处理当前分段内的元素。</li>\\n</ul>\\n<p>在这个过程中，可以通过适当的索引操作来访问数组的元素，并根据题目的要求执行相应的逻辑。</p>","autoDesc":true}');export{T as comp,j as data};
