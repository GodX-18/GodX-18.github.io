import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as t,c as l,a as o}from"./app-oXp7PBbS.js";const i={},n=o('<h2 id="nosql-简介" tabindex="-1"><a class="header-anchor" href="#nosql-简介"><span>NoSQL 简介</span></a></h2><h3 id="诞生的背景" tabindex="-1"><a class="header-anchor" href="#诞生的背景"><span>诞生的背景</span></a></h3><p>NoSQL是一种非关系型的数据库，它的出现是为了解决传统的关系型数据库在处理大规模、高并发、多样化的数据时遇到的一些问题。NoSQL的诞生背景有以下几个方面：</p><ul><li>互联网的发展，导致了数据量的爆炸性增长，传统的关系型数据库在存储和处理海量数据时，面临着性能下降、扩展困难、成本高昂等挑战。</li><li>Web2.0的兴起，使得网站的交互性和动态性更强，用户的个人信息、社交网络、地理位置、操作日志等数据呈现出多样化和非结构化的特征，传统的关系型数据库在存储和查询这些数据时，需要复杂的模式设计和转换，效率低下。</li><li>云计算的普及，促进了分布式系统的发展，分布式系统要求数据库具有良好的水平扩展性和高可用性，传统的关系型数据库由于其固定的模式和强一致性的要求，难以满足分布式系统的需求。</li><li>业务的不确定性，使得数据库的存储模式需要频繁变更，传统的关系型数据库在修改表结构时，需要耗费大量的时间和资源，影响业务的快速迭代和创新。</li></ul><p>NoSQL作为一种新兴的数据库设计方法，旨在为Web应用提供可扩展的高性能数据存储解决方案。NoSQL有多种解释，有人说是“非SQL”，有人说是“不仅仅是SQL”。NoSQL数据库主要有以下几种类型：键值数据库、文档数据库、列族数据库和图数据库。它们各自有自己的特点和适用场景。NoSQL数据库的优点包括设计简单、水平扩展容易、可用性高、灵活性强等。NoSQL数据库的缺点包括一致性较弱、标准化程度低、跨库事务处理困难等。</p><h2 id="什么是-nosql-数据库" tabindex="-1"><a class="header-anchor" href="#什么是-nosql-数据库"><span>什么是 NoSQL 数据库</span></a></h2><div class="hint-container tip"><p class="hint-container-title">前置知识</p><ul><li><p>关系型数据库：一种用于存储和管理数据的数据库，它把数据组织成表格的形式，每个表格有多个行和列，每行代表一条记录，每列代表一个属性。关系型数据库可以通过主键和外键来建立表格之间的关系，以保证数据的完整性和一致性。常见的关系型数据库有 Oracle、MySQL 和 SQL Server 等。</p></li><li><p>外键：一种用于建立两个表格之间关系的列，它的值必须在另一个表格中的某个列中存在。这个被参照的列通常是主键，也就是唯一标识一个表格中的记录的列。通过外键，可以实现一对多、多对多和一对一的关系。</p></li><li><p>事务：一种用于保证数据库操作的原子性、一致性、隔离性和持久性的机制。原子性是指一个事务中的所有操作要么全部完成，要么全部不完成；一致性是指事务执行前后，数据库的完整性没有被破坏；隔离性是指多个事务并发执行时，不会相互干扰；持久性是指事务完成后，对数据的修改是永久的。</p></li><li><p>数据类型约定：一种用于规定数据的格式和范围的方法。例如，在关系型数据库中，可以定义一个列的数据类型为整数、字符串、日期等，这样就限制了这个列中可以存储什么样的数据。数据类型约定可以提高数据的质量和效率。</p></li><li><p>MongoDB 是一种非关系型数据库，也称为文档型数据库，它把数据组织成文档的形式，每个文档都是一个键值对（key-value）的集合，类似于 JSON 对象。MongoDB 不支持外键、事务和数据类型约定，这意味着它更加灵活和简单，但也需要开发者自己来保证数据的完整性和一致性</p></li></ul></div><p>如果你之前只接触过关系型数据库如 Oracle、Mysql 或 SQL Server，在学习 MongoDB 时可能会感到不安，突然有一款数据库不支持外键，不支持事务，不支持数据类型约定，会给人一种没法用的感觉。</p><p>MongoDB 就是这样一款非关系型的数据库，什么叫非关系型？就是把数据直接放进一个大仓库，不标号、不连线、单纯的堆起来。传统数据库由于受到各种关系的累赘，各种数据形式的束缚，难以处理海量数据以及超高并发的业务场景。</p><p>为了解决上述问题，必须有一款自废武功，以求在更高层次上突破瓶颈的数据库系统。就像张无忌忘记招式从而学习太极一样，摈弃了固有模式的 MongoDB 才能应对 Facebook 上亿比特的海量数据。</p><p>NoSQL(NoSQL = Not Only SQL )，意即&quot;不仅仅是SQL&quot;。</p><p>在现代的计算系统上每天网络上都会产生庞大的数据量，这些数据有很大一部分是由关系数据库管理系统（RDBMS）来处理。</p><p>1970年 E.F.Codd&#39;s提出的关系模型的论文 &quot;A relational model of data for large shared data banks&quot;，这使得数据建模和应用程序编程更加简单。</p><p>通过应用实践证明，关系模型是非常适合于客户服务器编程，远远超出预期的利益，今天它是结构化数据存储在网络和商务应用的主导技术。</p><p>NoSQL 是一项全新的数据库革命性运动，早期就有人提出，发展至2009年趋势越发高涨。NoSQL的拥护者们提倡运用非关系型的数据存储，相对于铺天盖地的关系型数据库运用，这一概念无疑是一种全新的思维的注入。</p><h2 id="nosql-的优点和缺点" tabindex="-1"><a class="header-anchor" href="#nosql-的优点和缺点"><span>NoSQL 的优点和缺点</span></a></h2><p><strong>优点：</strong></p><ul><li>持续可用性：NoSQL 数据库将数据分布在多个服务器和区域中，因此没有单点故障，可以保证数据的高可用性和容错性。</li><li>查询速度：NoSQL 数据库是非规范化的，无需担心数据重复，特定查询所需的所有信息通常已经存储在一起，无需连接。这可以使查找更容易，尤其是在处理大量数据时。</li><li>敏捷：NoSQL 数据库的模式是动态的，能够适应不同的数据类型和需求。开发人员无需花费时间和精力进行前期规划即可开始构建数据库，并且可以轻松地添加数据类型和字段，而无需停机。</li><li>低成本：NoSQL 数据库横向扩展，使扩展容量具有成本效益。与其升级昂贵的硬件，它们可以通过简单地添加商品服务器或云实例来廉价地扩展。</li></ul><p><strong>缺点：</strong></p><ul><li>缺乏标准化：不同的 NoSQL 数据库有不同的数据模型、查询语言和接口，缺乏统一的标准和规范。</li><li>不支持复杂查询：NoSQL 数据库不支持 SQL 查询语言，也不支持关系型数据库中的一些高级功能，如联合、聚合、排序等。</li><li>不保证事务性：NoSQL 数据库不遵循 ACID 原则，即原子性、一致性、隔离性和持久性，这些原则可以保证关系型数据库中的数据完整性和一致性</li></ul><h2 id="nosql-数据库有哪些类型" tabindex="-1"><a class="header-anchor" href="#nosql-数据库有哪些类型"><span>NoSQL 数据库有哪些类型？</span></a></h2><h3 id="键值-key-value-数据库" tabindex="-1"><a class="header-anchor" href="#键值-key-value-数据库"><span>键值（Key-Value）数据库：</span></a></h3><ul><li>一种用于存储和管理数据的数据库，它把数据组织成键值对（key-value）的形式，每个键都是唯一的，可以用来快速地访问或修改对应的值。</li><li>键值数据库适合存储用户信息、会话、配置等数据，但不支持复杂的查询和事务。</li><li>常见的键值数据库有 Riak、Redis、Memcached 等。</li></ul><h3 id="文档-document-oriented-数据库" tabindex="-1"><a class="header-anchor" href="#文档-document-oriented-数据库"><span>文档（Document-Oriented）数据库：</span></a></h3><ul><li>一种用于存储和管理数据的数据库，它把数据组织成文档的形式，每个文档都是一个键值对（key-value）的集合，类似于 JSON 对象。</li><li>文档数据库可以存储不同的数据类型和结构，适合存储日志、分析、博客等数据，但不支持跨文档的事务。</li><li>常见的文档数据库有 MongoDB、CouchDB、RavenDB 等。</li></ul><h3 id="列族-column-family-数据库" tabindex="-1"><a class="header-anchor" href="#列族-column-family-数据库"><span>列族（Column-Family）数据库：</span></a></h3><ul><li>一种用于存储和管理数据的数据库，它把数据组织成列族（column family）的形式，每个列族存储经常被一起查询的相关数据。</li><li>列族数据库可以存储大量的稀疏数据，适合存储日志、博客平台等数据，但不支持复杂的查询和事务。</li><li>常见的列族数据库有 Cassandra、HBase 等。</li></ul><h3 id="图-graph-oriented-数据库" tabindex="-1"><a class="header-anchor" href="#图-graph-oriented-数据库"><span>图（Graph-Oriented）数据库：</span></a></h3><ul><li>一种用于存储和管理数据的数据库，它把数据组织成图的形式，每个实体都是一个顶点，每个关系都是一条边。</li><li>图数据库可以存储复杂的关系型数据，适合存储社交网络、推荐系统等数据，但不适合存储非关系型的数据。</li><li>常见的图数据库有 Neo4J、OrientDB 等。</li></ul><div class="hint-container tip"><p class="hint-container-title">键值数据库和文档数据库的区别</p><table><thead><tr><th style="text-align:left;">项目</th><th style="text-align:left;">键值数据库</th><th style="text-align:left;">文档数据库</th></tr></thead><tbody><tr><td style="text-align:left;">定义</td><td style="text-align:left;">一种用于存储和管理数据的数据库，它把数据组织成键值对（key-value）的形式，每个键都是唯一的，可以用来快速地访问或修改对应的值 。</td><td style="text-align:left;">一种用于存储和管理数据的数据库，它把数据组织成文档的形式，每个文档都是一个键值对（key-value）的集合，类似于 JSON 对象 。</td></tr><tr><td style="text-align:left;">区别</td><td style="text-align:left;">键值数据库的 value 是一个不透明的数据块，只能通过 key 来访问或修改，数据库不知道 value 的内容和结构。键值数据库适合存储简单的数据，查询速度快，但功能有限。</td><td style="text-align:left;">文档数据库的 value 是一个结构化的文档，可以是 JSON、XML 等格式，可以通过 key 或者文档中的字段来访问或修改，数据库可以理解 value 的内容和结构。文档数据库可以存储不同的数据类型和结构，查询灵活，但性能较低。</td></tr><tr><td style="text-align:left;">优点</td><td style="text-align:left;">- 高性能：键值数据库可以利用内存或 SSD 来提高读写速度。 <br> - 易扩展：键值数据库可以通过分片或复制来实现横向扩展。 <br> - 简单易用：键值数据库无需定义模式或索引，只需提供 key 和 value 即可。</td><td style="text-align:left;">- 灵活：文档数据库可以存储各种类型和结构的数据，无需预先定义模式。 <br> - 富查询：文档数据库可以支持多种查询语言和操作符，如 MongoDB 的聚合管道、CouchDB 的 MapReduce 等。 <br> - 易集成：文档数据库可以与各种编程语言和工具进行交互，如 Node.js、Python、RESTful API 等。</td></tr><tr><td style="text-align:left;">缺点</td><td style="text-align:left;">- 功能有限：键值数据库不支持复杂的查询和事务，也不支持跨 key 的操作。 <br> - 数据冗余：键值数据库无法避免数据重复，可能导致存储空间浪费和数据不一致。 <br> - 安全性低：键值数据库通常没有提供数据加密、访问控制等安全机制。</td><td style="text-align:left;">- 性能较低：文档数据库由于需要解析文档结构和内容，可能导致读写速度降低。 <br> - 数据不一致：文档数据库由于没有强制的模式约束，可能导致数据格式不统一或错误。 <br> - 缺乏标准化：文档数据库由于没有统一的标准和规范，可能导致不同的实现方式和接口。</td></tr><tr><td style="text-align:left;">应用场景</td><td style="text-align:left;">- 用户信息：键值数据库可以用来存储用户的 ID、姓名、密码等信息，并且可以快速地检索或更新。 <br> - 会话管理：键值数据库可以用来存储用户的会话信息，如登录状态、浏览历史等，并且可以实现高可用性和负载均衡。 <br> - 配置管理：键值数据库可以用来存储系统或应用的配置信息，并且可以方便地修改或同步。</td><td style="text-align:left;">- 日志分析：文档数据库可以用来存储各种类型和格式的日志数据，并且可以进行复杂的查询和分析。 <br> - 内容管理：文档数据库可以用来存储博客、新闻、社交媒体等内容，并且可以支持多种语言和格式。 <br> - 电子商务：文档数据库可以用来存储商品、订单、用户等信息，并且可以实现个性化的推荐和搜索。</td></tr></tbody></table></div><h2 id="nosql-与-rdb-该怎么选择" tabindex="-1"><a class="header-anchor" href="#nosql-与-rdb-该怎么选择"><span>NoSQL 与 RDB 该怎么选择</span></a></h2><p>既然 NoSQL 数据库有这么多的优势，那它是否可以直接取代关系型数据库？</p><p>NoSQL 并不能完全取代关系型数据库，NoSQL 主要被用来处理大量且多元数据的存储及运算问题。在这样的特性差异下，我们该如何选择合适的数据库以解决数据存储与处理问题呢？这里提供以下几点作为判断依据。</p><p><strong>1、数据模型的关联性要求</strong></p><p>NoSQL 适合模型关联性比较低的应用。因此：</p><ul><li><p>如果需要多表关联，则更适合用 RDB</p></li><li><p>如果对象实体关联少，则更适合用 NoSQL 数据库</p></li><li><p>其中 MongoDB 可以支持复杂度相对高的数据结构，能够将相关联的数据以文档的方式嵌入，从而减少数据之间的关联操作</p></li></ul><p><strong>2、数据库的性能要求</strong></p><p>如果数据量多切访问速度至关重要，那么使用 NoSQL 数据库可能是比较合适的。NoSQL 数据库能通过数据的分布存储大幅地提供存储性能。</p><p><strong>3、数据的一致性要求</strong></p><p>NoSQL 数据库有一个缺点：其在事务处理与一致性方面无法与 RDB 相提并论。</p><p>因此，NoSQL 数据库很难同时满足强一致性与高并发性。如果应用对性能有高要求，则 NoSQL 数据库只能做到数据最终一致。</p><p><strong>4、数据的可用性要求</strong></p><p>考虑到数据不可用可能会造成风险，NoSQL 数据库提供了强大的数据可用性（在一些需要快速反馈信息给使用者的应用中，响应延迟也算某种程度的高可用）。</p><p><strong>一个项目并非只选择一种数据库，可以将其拆开设计，将需要 RDB 特性的放到 RDB 中管理，而其它数据放到 NoSQL 中管理。</strong></p>',44),a=[n];function r(s,d){return t(),l("div",null,a)}const h=e(i,[["render",r],["__file","04-NoSQL.html.vue"]]),u=JSON.parse('{"path":"/%E5%A4%A7%E5%89%8D%E7%AB%AF/Nodejs%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/04-NoSQL.html","title":"NoSQL","lang":"zh-CN","frontmatter":{"title":"NoSQL","icon":"list","order":4,"category":["前端"],"tag":["数据库","noSQL"],"description":"NoSQL 简介 诞生的背景 NoSQL是一种非关系型的数据库，它的出现是为了解决传统的关系型数据库在处理大规模、高并发、多样化的数据时遇到的一些问题。NoSQL的诞生背景有以下几个方面： 互联网的发展，导致了数据量的爆炸性增长，传统的关系型数据库在存储和处理海量数据时，面临着性能下降、扩展困难、成本高昂等挑战。 Web2.0的兴起，使得网站的交互性和...","head":[["meta",{"property":"og:url","content":"https://godx-18.github.io/%E5%A4%A7%E5%89%8D%E7%AB%AF/Nodejs%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/04-NoSQL.html"}],["meta",{"property":"og:site_name","content":"烜"}],["meta",{"property":"og:title","content":"NoSQL"}],["meta",{"property":"og:description","content":"NoSQL 简介 诞生的背景 NoSQL是一种非关系型的数据库，它的出现是为了解决传统的关系型数据库在处理大规模、高并发、多样化的数据时遇到的一些问题。NoSQL的诞生背景有以下几个方面： 互联网的发展，导致了数据量的爆炸性增长，传统的关系型数据库在存储和处理海量数据时，面临着性能下降、扩展困难、成本高昂等挑战。 Web2.0的兴起，使得网站的交互性和..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-11-22T00:58:07.000Z"}],["meta",{"property":"article:author","content":"GodX"}],["meta",{"property":"article:tag","content":"数据库"}],["meta",{"property":"article:tag","content":"noSQL"}],["meta",{"property":"article:modified_time","content":"2023-11-22T00:58:07.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"NoSQL\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-11-22T00:58:07.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"GodX\\",\\"url\\":\\"https://github.com/GodX-18\\"}]}"]]},"headers":[{"level":2,"title":"NoSQL 简介","slug":"nosql-简介","link":"#nosql-简介","children":[{"level":3,"title":"诞生的背景","slug":"诞生的背景","link":"#诞生的背景","children":[]}]},{"level":2,"title":"什么是 NoSQL 数据库","slug":"什么是-nosql-数据库","link":"#什么是-nosql-数据库","children":[]},{"level":2,"title":"NoSQL 的优点和缺点","slug":"nosql-的优点和缺点","link":"#nosql-的优点和缺点","children":[]},{"level":2,"title":"NoSQL 数据库有哪些类型？","slug":"nosql-数据库有哪些类型","link":"#nosql-数据库有哪些类型","children":[{"level":3,"title":"键值（Key-Value）数据库：","slug":"键值-key-value-数据库","link":"#键值-key-value-数据库","children":[]},{"level":3,"title":"文档（Document-Oriented）数据库：","slug":"文档-document-oriented-数据库","link":"#文档-document-oriented-数据库","children":[]},{"level":3,"title":"列族（Column-Family）数据库：","slug":"列族-column-family-数据库","link":"#列族-column-family-数据库","children":[]},{"level":3,"title":"图（Graph-Oriented）数据库：","slug":"图-graph-oriented-数据库","link":"#图-graph-oriented-数据库","children":[]}]},{"level":2,"title":"NoSQL 与 RDB 该怎么选择","slug":"nosql-与-rdb-该怎么选择","link":"#nosql-与-rdb-该怎么选择","children":[]}],"git":{"createdTime":1700614687000,"updatedTime":1700614687000,"contributors":[{"name":"GodX","email":"1046529973@qq.com","commits":1}]},"readingTime":{"minutes":12.62,"words":3785},"filePathRelative":"大前端/Nodejs全栈开发/04-NoSQL.md","localizedDate":"2023年11月22日","excerpt":"<h2>NoSQL 简介</h2>\\n<h3>诞生的背景</h3>\\n<p>NoSQL是一种非关系型的数据库，它的出现是为了解决传统的关系型数据库在处理大规模、高并发、多样化的数据时遇到的一些问题。NoSQL的诞生背景有以下几个方面：</p>\\n<ul>\\n<li>互联网的发展，导致了数据量的爆炸性增长，传统的关系型数据库在存储和处理海量数据时，面临着性能下降、扩展困难、成本高昂等挑战。</li>\\n<li>Web2.0的兴起，使得网站的交互性和动态性更强，用户的个人信息、社交网络、地理位置、操作日志等数据呈现出多样化和非结构化的特征，传统的关系型数据库在存储和查询这些数据时，需要复杂的模式设计和转换，效率低下。</li>\\n<li>云计算的普及，促进了分布式系统的发展，分布式系统要求数据库具有良好的水平扩展性和高可用性，传统的关系型数据库由于其固定的模式和强一致性的要求，难以满足分布式系统的需求。</li>\\n<li>业务的不确定性，使得数据库的存储模式需要频繁变更，传统的关系型数据库在修改表结构时，需要耗费大量的时间和资源，影响业务的快速迭代和创新。</li>\\n</ul>","autoDesc":true}');export{h as comp,u as data};
