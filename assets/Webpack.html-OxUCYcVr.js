import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as l,c as i,b as n,e as s,d as e,a as p}from"./app-oXp7PBbS.js";const c={},r=p(`<h3 id="为什么需要模块化打包" tabindex="-1"><a class="header-anchor" href="#为什么需要模块化打包"><span>为什么需要模块化打包</span></a></h3><ul><li>ES Modules 存在环境兼容问题</li><li>模块化文件过多，网络请求频繁</li><li>所有的前端资源都需要模块化（资源文件）</li></ul><h3 id="打包工具的作用" tabindex="-1"><a class="header-anchor" href="#打包工具的作用"><span>打包工具的作用</span></a></h3><ul><li>新特性的语法转换，例如 es6 编译成 es5</li><li>将散落的模块文件再次合并到一起（解决频繁请求模块文件的问题）</li><li>支持不同种类的前端资源类型</li></ul><h3 id="快速上手" tabindex="-1"><a class="header-anchor" href="#快速上手"><span>快速上手</span></a></h3><ol><li><p>初始化项目，安装 webpack、webpack-cli</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">yarn</span> init <span class="token parameter variable">--yes</span>
<span class="token function">yarn</span> <span class="token function">add</span> webpack webpack-cli <span class="token parameter variable">-D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>在根目录下新建一个 src/index.js 作为入口文件</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> createHeading <span class="token keyword">from</span> <span class="token string">&#39;./heading.js&#39;</span>

<span class="token keyword">const</span> heading <span class="token operator">=</span> <span class="token function">createHeading</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>heading<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em>heading.js</em></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;h2&#39;</span><span class="token punctuation">)</span>

  element<span class="token punctuation">.</span>textContent <span class="token operator">=</span> <span class="token string">&#39;Hello world&#39;</span>
  element<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;Hello webpack&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> element
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>使用 webpack-cli 进行初体验</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">yarn</span> webpack <span class="token parameter variable">--mode</span> production
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>Webpack4之后的版本支持零配置打包， 会默认使用 src 目录下的 index.js 文件作为入口文件进行打包，并输出到 <code>dist/main.js</code></p></div></li></ol><h3 id="配置文件" tabindex="-1"><a class="header-anchor" href="#配置文件"><span>配置文件</span></a></h3><p>在根目录下新建<code>webpack.config.js</code>文件，该文件是运行在<code>node</code>环境下的 js 文件，所以我们要使用<code>commonjs</code>规范来编写</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;path&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">&quot;./src/main.js&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 指定入口文件</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&quot;zx.js&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 定义输出文件的名称</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;output&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 输出目录</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>输出的路径必须定义为绝对路径</p></div><h3 id="工作模式" tabindex="-1"><a class="header-anchor" href="#工作模式"><span>工作模式</span></a></h3><p><strong>webpack一共有三种工作模式：</strong></p><ul><li>production：该模式下，会自动使用一些优化插件进行处理，比如压缩插件</li><li>development：该模式下，会自动优化打包速度，添加一些调试过程中辅助</li><li>none：最基本的模块打包功能，不做任何额外的处理</li></ul><p>**可以用配置文件中的<code>mode</code>属性来指定模式 **</p><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>webpack会默认使用 production模式</p></div><h3 id="资源模块加载" tabindex="-1"><a class="header-anchor" href="#资源模块加载"><span>资源模块加载</span></a></h3><p>loader 是 webpack 的核心特性，借助 Loader 就可以加载任何类型的资源</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;path&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
	<span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;style-loader&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;css-loader&quot;</span><span class="token punctuation">]</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>loader</strong> 有两个属性：</p><ol><li><code>test</code> 属性，识别出哪些文件会被转换。</li><li><code>use</code> 属性，定义出在进行转换时，应该使用哪个 loader。</li></ol><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>Webpack 会从后往前加载 loader编译</p></div><h3 id="导入资源模块" tabindex="-1"><a class="header-anchor" href="#导入资源模块"><span>导入资源模块</span></a></h3><p><em>webpack 推荐在 js 文件中引入资源文件，原因如下：</em></p><ul><li>逻辑合理，JS 确实需要这些资源文件</li><li>确保上线资源部缺失，都是必要的</li></ul><h3 id="文件资源加载器" tabindex="-1"><a class="header-anchor" href="#文件资源加载器"><span>文件资源加载器</span></a></h3><p><em>无法通过 js 来表示的资源文件，需要使用文件资源加载器</em></p><p><strong>入口文件使用 png 资源</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> icon <span class="token keyword">from</span> <span class="token string">&#39;../static/icon.png&#39;</span>
<span class="token keyword">const</span> img <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
img<span class="token punctuation">.</span>src <span class="token operator">=</span> icon<span class="token punctuation">;</span>

document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>添加 file-loader 配置</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;path&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&quot;none&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">&quot;./src/index.js&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&quot;bundle.js&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;dist&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">publicPath</span><span class="token operator">:</span> <span class="token string">&quot;dist/&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">.png$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token string">&quot;file-loader&quot;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>publicPath 属性默认为 “”，表示网站的根目录。该选项的值是以 runtime(运行时) 或 loader(载入时) 所创建的每个 URL 为前缀。因此，在多数情况下，<strong>此选项的值都会以 <code>/</code> 结束</strong>。</p></div><h3 id="data-urls-与-url-loader" tabindex="-1"><a class="header-anchor" href="#data-urls-与-url-loader"><span>Data URLs 与 url-loader</span></a></h3><p>Data URLs 是一种特殊的 url 协议。它能够直接表示一个文件，不需要发起 http 请求，可以通过代码的方式来表示任何文件</p><figure><img src="https://raw.githubusercontent.com/GodX-18/picBed/main/image-20221021172552294.png" alt="image-20221021172552294" tabindex="0" loading="lazy"><figcaption>image-20221021172552294</figcaption></figure><p>可以通过<code>url-loader</code>将文件转换成 data urls，比较适合体积比较小的文件，可以减少 http 请求的次数，如果体积过大会导致我们打包结果比较大，从而会影响我们的运行速度。</p><p><strong>最佳实践</strong></p><ul><li>小文件使用<code>Data URLs</code>,减少请求次数</li><li>大文件单独提取存放，提高加载速度</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">.png$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&quot;url-loader&quot;</span><span class="token punctuation">,</span>
          <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">limit</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token comment">// 只编译10 KB以下的文件，否则使用 file-loader</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>如果使用 <code>url-loader</code> 的 <code>limit</code> 选项必须要安装 <code>file-loader</code> 依赖，否则会报错</p></div><h3 id="webpack-常用的资源加载器分类" tabindex="-1"><a class="header-anchor" href="#webpack-常用的资源加载器分类"><span>Webpack 常用的资源加载器分类</span></a></h3><p><strong>编译转换类</strong></p><p><em>将加载的资源模块转换为 JS 代码，例如 css-loader</em></p><figure><img src="https://raw.githubusercontent.com/GodX-18/picBed/main/image-20221022083158717.png" alt="image-20221022083158717" tabindex="0" loading="lazy"><figcaption>image-20221022083158717</figcaption></figure><p><strong>文件操作类</strong></p><p><em>将加载的资源模块拷贝到输出目录，同时导出文件访问路径，例如 file-loader</em></p><figure><img src="https://raw.githubusercontent.com/GodX-18/picBed/main/image-20221022083414836.png" alt="image-20221022083414836" tabindex="0" loading="lazy"><figcaption>image-20221022083414836</figcaption></figure><p><strong>代码检查类</strong></p><p><em>统一代码风格，提高代码质量，例如 eslint-loader</em></p><figure><img src="https://raw.githubusercontent.com/GodX-18/picBed/main/image-20221022083510177.png" alt="image-20221022083510177" tabindex="0" loading="lazy"><figcaption>image-20221022083510177</figcaption></figure><h3 id="处理-es2015" tabindex="-1"><a class="header-anchor" href="#处理-es2015"><span>处理 ES2015</span></a></h3><p><em>因为模块打包需要，所以处理 import 和 export。并不能自动帮我们转换一些其他新特性的语法</em></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
       <span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&quot;babel-loader&quot;</span><span class="token punctuation">,</span>
          <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">presets</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;@babel/preset-env&quot;</span><span class="token punctuation">]</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">相关信息</p><ul><li>Webpack 只是打包工具</li><li>加载器可以用来编译转换代码</li></ul></div><h3 id="模块加载方式" tabindex="-1"><a class="header-anchor" href="#模块加载方式"><span>模块加载方式</span></a></h3><p><em>webpack 支持一下几种种模块加载方式</em></p><ul><li><p>遵循 ES Modules 标准的 import 声明</p><figure><img src="https://raw.githubusercontent.com/GodX-18/picBed/main/image-20221022085028091.png" alt="image-20221022085028091" tabindex="0" loading="lazy"><figcaption>image-20221022085028091</figcaption></figure></li><li><p>遵循 CommonJS 标准的 require 函数<br><img src="https://raw.githubusercontent.com/GodX-18/picBed/main/image-20221022085117754.png" alt="image-20221022085117754" loading="lazy"></p></li><li><p>遵循 AMD 标淮的 define 函数和 require 函数<br><img src="https://raw.githubusercontent.com/GodX-18/picBed/main/image-20221022085154242.png" alt="image-20221022085154242" loading="lazy"></p></li><li><p>Loader 加载的非 JavaScript 也会触发资源加载，例如：</p><ul><li>样式代码中的 @import 指令 和 url 函数</li><li>HTML 代码中图片标签的 src 属性</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 在 webpack5 中使用旧的 assets loader配置 </span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
     <span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">.png$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&quot;url-loader&quot;</span><span class="token punctuation">,</span>
          <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">limit</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">,</span> <span class="token comment">// 10 KB</span>
            <span class="token literal-property property">esModule</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token comment">// 采用 coomonjs 语法</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;javascript/auto&#39;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>url-loader默认采用ES模块语法，即import ‘…/aaa.png’；<br> 然而 css 、vue 生成的是CommonJS模块语法，即require(’…/image.png’)；二者不一致。<br> 要么让file-loader或url-loader采用CommonJS语法，要么让Vue采用ES语法。</p><p>url-loader中的属性esModule选项能调整，将其设置为false即可，就关闭了es模块语法</p></div><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>Webpack 5 中，资源模块(asset module)是一种模块类型，它允许使用资源文件（字体，图标等）而无需配置额外 loader。</p><p>如果需要在 webpack4 中正常使用 url-loader 需要一些额外的配置</p></div><h3 id="核心工作原理" tabindex="-1"><a class="header-anchor" href="#核心工作原理"><span>核心工作原理</span></a></h3><p><em>loader 机制是 webpack 的核心</em></p><figure><img src="https://raw.githubusercontent.com/GodX-18/picBed/main/image-20221022105853332.png" alt="image-20221022105853332" tabindex="0" loading="lazy"><figcaption>image-20221022105853332</figcaption></figure><ol><li>在我们的项目当中一般都会散落着各种各样的代码以及资源文件，webpack 会根据我们的配置，找到其中一个文件作为打包的入口，一般情况下，这个文件都会是一个js 文件，然后他会顺着入口文件中的代码，根据代码中的出现的 import 或者 require 之类的语句，然后解析推断出来这个文件所依赖的资源模块，然后分别去解析每个资源模块对应的依赖。最后形成整个项目中所有用到文件之间的一个依赖关系树。</li><li>有了这个依赖关系树之后，webpack 会递归这个依赖树，然后找到每个节点所对应的资源文件，最后再根据配置文件中的 rules 属性去找到这个模块所对应的加载器,然后交给对应的加载器去加载这个模块，最后会将加载后的结果放入打包结果当中，从而实现整个项目的打包</li></ol><h3 id="开发一个-loader" tabindex="-1"><a class="header-anchor" href="#开发一个-loader"><span>开发一个 Loader</span></a></h3><p><em>我们现在开发一个 markdown loader，更直观的帮助我们理解 loader 的原理</em></p><ol><li><p>首先在根目录下新建一个 maekdown-loader.js 文件</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> marked <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;marked&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 用来讲 md 转换成 html</span>

module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">source</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> html <span class="token operator">=</span> marked<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// return \`module.exports = &quot;\${html}&quot;\`</span>
  <span class="token comment">// return \`export default \${JSON.stringify(html)}\`</span>

  <span class="token comment">// 返回 html 字符串交给下一个 loader 处理</span>
  <span class="token keyword">return</span> html<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>如果当前 loader 没有下个 loader 处理，那当前 loader 最终返回的结果必须是一段 JS 代码，否则 webpack 会报错</p></div></li><li><p>使用 loader</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&#39;none&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">&#39;./src/main.js&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;bundle.js&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;dist&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">publicPath</span><span class="token operator">:</span> <span class="token string">&#39;dist/&#39;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">.md$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span>
          <span class="token string">&#39;html-loader&#39;</span><span class="token punctuation">,</span>
          <span class="token string">&#39;./markdown-loader&#39;</span>
        <span class="token punctuation">]</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="插件机制" tabindex="-1"><a class="header-anchor" href="#插件机制"><span>插件机制</span></a></h3><p><em>目的：增强 webpack 自动化的能力，例如：清除 dist 目录、代码的压缩、拷贝静态文件至输出目录</em></p><h3 id="clean-webpack-plugin" tabindex="-1"><a class="header-anchor" href="#clean-webpack-plugin"><span>Clean-webpack-plugin</span></a></h3><p><em>自动清除输出目录</em></p><ol><li><p>安装</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>yarn add clean<span class="token operator">-</span>webpack<span class="token operator">-</span>plugin <span class="token operator">-</span><span class="token constant">D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>使用</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> CleanWebpackPlugin <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;clean-webpack-plugin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">CleanWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="html-webpack-plugin" tabindex="-1"><a class="header-anchor" href="#html-webpack-plugin"><span>Html-webpack-plugin</span></a></h3><p><em>自动生成使用 bundle.js的 html</em></p><ol><li><p>安装</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>yarn add html<span class="token operator">-</span>webpack<span class="token operator">-</span>plugin <span class="token operator">-</span><span class="token constant">D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>使用</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;html-webpack-plugin&#39;</span><span class="token punctuation">)</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">&#39;index.js&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> __dirname <span class="token operator">+</span> <span class="token string">&#39;/dist&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;index_bundle.js&#39;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&#39;Webpack Plugin Sample&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 网页标题</span>
      <span class="token literal-property property">meta</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">viewport</span><span class="token operator">:</span> <span class="token string">&#39;width=device-width&#39;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">&#39;./src/index.html&#39;</span> <span class="token comment">// 使用模版文件</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;about.html&#39;</span> 
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="copy-webpack-plugin" tabindex="-1"><a class="header-anchor" href="#copy-webpack-plugin"><span>Copy-webpack-plugin</span></a></h3><p><em>处理不需要处理的静态文件</em></p><ol><li><p>安装</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>yarn add copy<span class="token operator">-</span>webpack<span class="token operator">-</span>plugin <span class="token operator">-</span><span class="token constant">D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>使用</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;path&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> CopyPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;copy-webpack-plugin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&quot;development&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">&quot;./src/index.js&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token keyword">new</span> <span class="token class-name">CopyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">from</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;public/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token literal-property property">to</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;dist/public/&quot;</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="开发一个插件" tabindex="-1"><a class="header-anchor" href="#开发一个插件"><span>开发一个插件</span></a></h3><p>*loader 是在加载模块的时候去工作，而 plugin 拥有更宽的能力范围。*现在我们开发一个删除打包 bundle.js 中无用的注释，使其更加容易阅读</p><p><strong>原理</strong></p><p><em>通过在生命周期的钩子中挂载函数实现扩展，类似于 vue 的生命周期钩子函数</em></p><div class="hint-container info"><p class="hint-container-title">相关信息</p><p><code>webpack</code> 要求插件必须是一个函数或者是一个包含 <code>apply</code> 方法的对象</p></div><p><strong>实现</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">MyPlugin</span> <span class="token punctuation">{</span>
  <span class="token function">apply</span><span class="token punctuation">(</span><span class="token parameter">complier</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    complier<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>emit<span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token string">&quot;MyPlugin&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">compilation</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// compilation =&gt; 可以理解为此次打包的上下文，其中 assets 为输出目录下的所有文件</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> name <span class="token keyword">in</span> compilation<span class="token punctuation">.</span>assets<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&quot;.js&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>
          <span class="token keyword">const</span> contents <span class="token operator">=</span>  compilation<span class="token punctuation">.</span>assets<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取文件内容</span>
          <span class="token keyword">const</span> withoutComments <span class="token operator">=</span> contents<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\/\\*\\*+\\*\\/</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 去除注释</span>
          compilation<span class="token punctuation">.</span>assets<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
            <span class="token function-variable function">source</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> withoutComments<span class="token punctuation">,</span>
            <span class="token function-variable function">size</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> withoutComments<span class="token punctuation">.</span>length
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

modules<span class="token punctuation">.</span>export <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&#39;none&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token keyword">new</span> <span class="token class-name">MyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="优化开发体验" tabindex="-1"><a class="header-anchor" href="#优化开发体验"><span>优化开发体验</span></a></h3><p><strong>目前我们是通过以下方式来开发的</strong></p><figure><img src="https://raw.githubusercontent.com/GodX-18/picBed/main/image-20221108074901611.png" alt="image-20221108074901611" tabindex="0" loading="lazy"><figcaption>image-20221108074901611</figcaption></figure><p>这种方式过于原始，我们在实际的开发中不推荐使用这种方式</p><p><strong>理想的开发环境</strong></p><ul><li>以 http Server 运行 <ul><li>更加接近生产环境的状态</li><li>可以使用 ajax 这类 api，这些 api 不能以文件的形式去访问</li></ul></li><li>自动编译 + 自动构建 <ul><li>减少重复操作</li></ul></li><li>提供 Source Map 支持 <ul><li>方便定位错误</li></ul></li></ul><h3 id="webpack-实现自动编译" tabindex="-1"><a class="header-anchor" href="#webpack-实现自动编译"><span>webpack 实现自动编译</span></a></h3><p><strong>watch 工作模式</strong></p><p>Webpack 可以监听文件变化，当它们修改后会重新编译。</p><p><strong>使用方式</strong></p><ul><li><p>命令行参数</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>webpack <span class="token parameter variable">--watch</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>webpack.config.js 中配置</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">//...</span>
  <span class="token literal-property property">watch</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul>`,95),u={class:"hint-container info"},d=n("p",{class:"hint-container-title"},"相关信息",-1),k={href:"https://github.com/webpack/webpack-dev-server",target:"_blank",rel:"noopener noreferrer"},v={href:"https://github.com/webpack/webpack-dev-middleware",target:"_blank",rel:"noopener noreferrer"},m=p(`<h3 id="webpack-自动刷新浏览器" tabindex="-1"><a class="header-anchor" href="#webpack-自动刷新浏览器"><span>webpack 自动刷新浏览器</span></a></h3><p><strong>BrowserSync</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>browser<span class="token operator">-</span>sync dist <span class="token operator">--</span>files <span class="token string">&quot;**/*&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>缺点</p><ul><li>操作麻烦</li><li>磁盘读写，效率较低</li></ul><p><strong>Webpack Dev Server</strong></p><ul><li>提供用于开发的 HTTP Server</li><li>集成了自动编译和自动刷新浏览器等功能</li></ul><ol><li><p>安装</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">yarn</span> <span class="token function">add</span> webpack-dev-server <span class="token parameter variable">-D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>使用</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">yarn</span> webpack-dev-server <span class="token parameter variable">--open</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>或者在<code>pakage.json</code>中添加命令</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;serve&quot;</span><span class="token operator">:</span> <span class="token string">&quot;webpack-dev-server --open&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>Webpack Dev Server 为了提高工作效率，将打包结果暂时存放在内存当中，内部的 httpServer 也是从内存中取出打包结果通知浏览器更新</p></div><p><strong>静态资源访问</strong></p><ul><li>Dev Server 默认只会 serve 打包输出文件</li><li>只要是 webpack 输出的文件，都可以直接被访问</li><li>如果其他静态资源文件也需要 serve，就需要做一些额外的配置</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token literal-property property">devServer</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">contentBase</span><span class="token operator">:</span> <span class="token string">&#39;./public&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">相关信息</p><p><code>CopyWebpackPlugin</code> 插件不推荐在开发环境中使用，因为开发过程中我们频繁的执行打包任务，如果拷贝的文件比较多，会降低打包速度。所以我们需要以上配置。</p></div><h3 id="代理-api-服务" tabindex="-1"><a class="header-anchor" href="#代理-api-服务"><span>代理 API 服务</span></a></h3><figure><img src="https://raw.githubusercontent.com/GodX-18/picBed/main/image-20221110085724400.png" alt="image-20221110085724400" tabindex="0" loading="lazy"><figcaption>image-20221110085724400</figcaption></figure><ul><li>跨域资源共享 （CORS）可以解决跨域问题，但并不适用于开发环境</li></ul><figure><img src="https://raw.githubusercontent.com/GodX-18/picBed/main/image-20221110085751328.png" alt="image-20221110085751328" tabindex="0" loading="lazy"><figcaption>image-20221110085751328</figcaption></figure><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>  <span class="token literal-property property">devServer</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">proxy</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token string-property property">&quot;/api&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token comment">// http://localhost:8080/api/users -&gt; https://api.github.com/api/users</span>
        <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">&quot;https://api.github.com&quot;</span><span class="token punctuation">,</span>
        <span class="token comment">// http://localhost:8080/api/users -&gt; https://api.github.com/users</span>
        <span class="token literal-property property">pathRewrite</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token string-property property">&quot;^/api&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token comment">// 不能使用 localhost:8080 作为请求 GitHub 的主机名</span>
        <span class="token literal-property property">changeOrigin</span><span class="token operator">:</span> <span class="token boolean">true</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>服务器会根据主机名去判断属于哪个网站，因为默认是使用当前的主机名（localhost:8080），服务器并不认识。所以需要 changeOrigin 去配置主机名</p></div><h3 id="source-map" tabindex="-1"><a class="header-anchor" href="#source-map"><span>Source Map</span></a></h3><p><strong>帮助开发者调试和定位错误，解决了源代码与运行代码不一致所产生的问题</strong></p><figure><img src="https://raw.githubusercontent.com/GodX-18/picBed/main/image-20221110090102052.png" alt="image-20221110090102052" tabindex="0" loading="lazy"><figcaption>image-20221110090102052</figcaption></figure><p><strong>现有问题</strong></p><ul><li>运行代码与源代码之间完成不同</li><li>如果需要调试应用，错误信息无法定位</li><li>调试和报错都是基于运行代码</li></ul><p><strong>使用</strong></p><p>首先添加<code>source map</code>文件，定义压缩文件与源代码之间的映射。接着在压缩代码中添加注释使用，例如下面的例子：</p><figure><img src="https://raw.githubusercontent.com/GodX-18/picBed/main/image-20221110091201803.png" alt="image-20221110091201803" tabindex="0" loading="lazy"><figcaption>image-20221110091201803</figcaption></figure><p>这样，我们就可以在控制台直接调试源码，而不是编译后的代码</p><figure><img src="https://raw.githubusercontent.com/GodX-18/picBed/main/image-20221110091304578.png" alt="image-20221110091304578" tabindex="0" loading="lazy"><figcaption>image-20221110091304578</figcaption></figure><h3 id="webpack-配置-source-map" tabindex="-1"><a class="header-anchor" href="#webpack-配置-source-map"><span>Webpack 配置 Source Map</span></a></h3><ul><li>webpack 支持 12 种不同的方式</li><li>每种方式的效率和效果各不相同，效果越好，效率越慢</li></ul><figure><img src="https://raw.githubusercontent.com/GodX-18/picBed/main/image-20221110131346590.png" alt="image-20221110131346590" tabindex="0" loading="lazy"><figcaption>image-20221110131346590</figcaption></figure><p><strong>使用</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span><span class="token punctuation">{</span>
   <span class="token literal-property property">devtool</span><span class="token operator">:</span> <span class="token string">&quot;source-map&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="eval-模式下的-source-map" tabindex="-1"><a class="header-anchor" href="#eval-模式下的-source-map"><span>eval 模式下的 Source Map</span></a></h4><h4 id="原理" tabindex="-1"><a class="header-anchor" href="#原理"><span>原理</span></a></h4><p>通过 JS 的 <code>eval</code>api 注释中的<code>sourceURL</code>属性找到文件所在的目录</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">&#39;console.log(123) //# sourceURL=./foo/b&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="不同-devtool-之间的差异" tabindex="-1"><a class="header-anchor" href="#不同-devtool-之间的差异"><span>不同 devtool 之间的差异</span></a></h4><p><strong>eval</strong></p><p>只能用来定位源代码所在的文件名称</p><p><strong>eval-source-map</strong></p><p>同样使用<code>eval</code>函数去执行模块代码，但是它不仅能定位源代码所在的文件名称，还可以定位报错的行列信息。相比于 eval 模式，它生产了 source map 文件</p><p><strong>eval-cheap-source-map</strong></p><p>阉割版的 eval-source-map，只能定位到行，不能定位到列，效率比 eval-source-map 要快</p><p><strong>cheap-module-eval-source-map</strong></p><p>相比于上一个模式，定位的源码是没有经过 loader 加工的代码，也就是我们手写的源代码</p><div class="hint-container info"><p class="hint-container-title">相关信息</p><ul><li>eval 是否使用 eval 执行模块代码</li><li>cheap Source Map 是否包含行信息</li><li>module是否能够得到 Loader 处理之前的源代码</li></ul></div><p><strong>cheap-source-map</strong></p><p>没有用 eval</p><p><strong>inline-source-map</strong></p><p>和普通的 source-map 效果是一样的，只是引入 source-map 的方式不同，它将 source-map 文件以 data-url 嵌入到源代码当中，这会导致代码文件会很大，不推荐使用</p><p><strong>hidden-source-map</strong></p><p>隐藏了 source-map 文件，使用一些第三方包的时候经常会使用</p><p><strong>nosources-source-map</strong></p><p>能看到出现问题的位置，但是点击看不见源代码。通常使用在生产环境，不想暴露源码的情况下</p><h3 id="选择合适的-source-map" tabindex="-1"><a class="header-anchor" href="#选择合适的-source-map"><span>选择合适的 source map</span></a></h3><h4 id="开发环境" tabindex="-1"><a class="header-anchor" href="#开发环境"><span>开发环境</span></a></h4><p>cheap-module-eval-source-map</p><p><strong>原因：</strong></p><ul><li>我的代码每行不会超过80个字符</li><li>我的代码经过 Loader 转换过后的差异较大</li><li>首次打包速度慢无所谓，重写打包相对较快</li></ul><h4 id="生产环境" tabindex="-1"><a class="header-anchor" href="#生产环境"><span>生产环境</span></a></h4><p>none</p><ul><li>Source Map 会暴露源代码</li><li>调试是开发阶段的事情</li></ul><h3 id="自动刷新的问题" tabindex="-1"><a class="header-anchor" href="#自动刷新的问题"><span>自动刷新的问题</span></a></h3><p><strong>问题</strong></p><p>自动刷新导致的页面状态丢失，例如：在视图中在输入框中输入文本，编辑代码查看效果时，输入的文本丢失，无法及时看到效果</p><p><strong>方案</strong></p><ul><li>代码中写死编辑器中的内容</li><li>额外代码实现刷新前保存，刷新后读取</li></ul><p><strong>预想</strong></p><p>在页面不刷新的前提下，模块也可以及时更新</p><h3 id="hmr-模块热更新" tabindex="-1"><a class="header-anchor" href="#hmr-模块热更新"><span>HMR-模块热更新</span></a></h3><ul><li>在应用程序运行的过程中实时替换某个模块，而且应用的运行状态不受影响</li><li>热替换只将修改的模块实时替换至应用中，不会完全刷新应用</li></ul><p><strong>使用</strong></p><p>HMR 集成在 webpack-dev-server 中，通过以下两种方式使用：</p><p>命令行</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>webpack-dev-server <span class="token parameter variable">--hot</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>或者配置文件</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;webpack&#39;</span><span class="token punctuation">)</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">devServer</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">hot</span><span class="token operator">:</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span>，
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
  <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>HotModuleReplacementPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>Weboack 中的 HMR 并不可以开箱即用，需要手动处理模块热替换的逻辑</p></div><p><strong>为什么样式文件的热更新开箱即用？</strong></p><p>因为样式文件时通过<code>loader</code>处理的，在 style-loader 当中就已经自动处理了样式文件的热更新，所以不需要我们自己去手动配置</p><figure><img src="https://raw.githubusercontent.com/GodX-18/picBed/main/image-20221111145435273.png" alt="image-20221111145435273" tabindex="0" loading="lazy"><figcaption>image-20221111145435273</figcaption></figure><p><strong>凭什么样式可以自动处理？</strong></p><p>因为在样式模块更新过后，把更新过后的 css 及时替换到页面当中，当就可以覆盖掉之前的样式，从而实现样式文件的更新。</p><p>而我们所编写的 js 模块是没有任何规律的，你可能在一个模块当中导出的是一个对象，也可能导出的是一个字符串或者函数，导出成员的使用也各不相同，所以无法实现一个通用的模热更新方案。这就是为什么样式文件可以自动更新，而修改 js 代码页面自动刷新的原因。</p><p><strong>我的项目没有手动处理，JS 照样可以热替换</strong></p><p>因为你使用了框架，框架下的开发，每种文件都是有规律的。通过脚手架创建的项目内部都集成了 HMR 方案</p><h3 id="处理-js-模块热替换" tabindex="-1"><a class="header-anchor" href="#处理-js-模块热替换"><span>处理 JS 模块热替换</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> createEditor <span class="token keyword">from</span> <span class="token string">&#39;./editor&#39;</span>
<span class="token keyword">import</span> background <span class="token keyword">from</span> <span class="token string">&#39;./better.png&#39;</span>
<span class="token keyword">import</span> <span class="token string">&#39;./global.css&#39;</span>

<span class="token keyword">const</span> editor <span class="token operator">=</span> <span class="token function">createEditor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>editor<span class="token punctuation">)</span>

<span class="token keyword">const</span> img <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
img<span class="token punctuation">.</span>src <span class="token operator">=</span> background
document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>module<span class="token punctuation">.</span>hot<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> hotEditor <span class="token operator">=</span> editor
  module<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token string">&#39;./editor.js&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> value <span class="token operator">=</span> hotEditor<span class="token punctuation">.</span>innerHTML
    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>hotEditor<span class="token punctuation">)</span>
    hotEditor <span class="token operator">=</span> <span class="token function">createEditor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    hotEditor<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> value
    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>hotEditor<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>图片模块热替换</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> createEditor <span class="token keyword">from</span> <span class="token string">&#39;./editor&#39;</span>
<span class="token keyword">import</span> background <span class="token keyword">from</span> <span class="token string">&#39;./better.png&#39;</span>
<span class="token keyword">import</span> <span class="token string">&#39;./global.css&#39;</span>

<span class="token keyword">const</span> editor <span class="token operator">=</span> <span class="token function">createEditor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>editor<span class="token punctuation">)</span>

<span class="token keyword">const</span> img <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
img<span class="token punctuation">.</span>src <span class="token operator">=</span> background
document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>module<span class="token punctuation">.</span>hot<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  module<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token string">&#39;./better.png&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    img<span class="token punctuation">.</span>src <span class="token operator">=</span> background
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="hmr-注意事项" tabindex="-1"><a class="header-anchor" href="#hmr-注意事项"><span>HMR 注意事项</span></a></h3><ul><li><p>HMR 的代码报错会导致自动刷新</p><ul><li><p>问题：自动刷新将会报错信息覆盖</p></li><li><p>解决方案：使用 hotOnly</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token literal-property property">devServer</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">hotOnly</span><span class="token operator">:</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>没启用 HMR 的情况下，HMR API 报错</p></li><li><p>HMR 开发环境下的配置代码在打包后会自动去除，所以生产环境无需作额外的处理</p></li></ul><h3 id="生产环境优化" tabindex="-1"><a class="header-anchor" href="#生产环境优化"><span>生产环境优化</span></a></h3><p><strong>生产环境与开发环境有着很大的差异</strong></p><ul><li>生产环境注重运行效率</li><li>开发环境注重开发效率</li></ul><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>Webpack 也推荐我们为不同的工作环境创建不同的配置</p></div><h3 id="不同环境下的配置" tabindex="-1"><a class="header-anchor" href="#不同环境下的配置"><span>不同环境下的配置</span></a></h3><p><strong>有两种配置方式</strong></p><ol><li><p>配置文件根据环境不同导出不同配置（配置文件中添加判断）</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 命令行指定运行环境</span>
<span class="token function">yarn</span> webpack <span class="token parameter variable">--env</span> production
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;webpack&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> CleanWebpackPlugin <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;clean-webpack-plugin&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;html-webpack-plugin&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> CopyWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;copy-webpack-plugin&#39;</span><span class="token punctuation">)</span>

module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">env<span class="token punctuation">,</span> argv</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&#39;development&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">&#39;./src/main.js&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;js/bundle.js&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">devtool</span><span class="token operator">:</span> <span class="token string">&#39;cheap-eval-module-source-map&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">devServer</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">hot</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      <span class="token literal-property property">contentBase</span><span class="token operator">:</span> <span class="token string">&#39;public&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
          <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
          <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span>
            <span class="token string">&#39;style-loader&#39;</span><span class="token punctuation">,</span>
            <span class="token string">&#39;css-loader&#39;</span>
          <span class="token punctuation">]</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span>
          <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.(png|jpe?g|gif)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
          <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&#39;file-loader&#39;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>
              <span class="token literal-property property">outputPath</span><span class="token operator">:</span> <span class="token string">&#39;img&#39;</span><span class="token punctuation">,</span>
              <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;[name].[ext]&#39;</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">]</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&#39;Webpack Tutorial&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">&#39;./src/index.html&#39;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>HotModuleReplacementPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
	<span class="token comment">// 条件判断</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>env <span class="token operator">===</span> <span class="token string">&#39;production&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    config<span class="token punctuation">.</span>mode <span class="token operator">=</span> <span class="token string">&#39;production&#39;</span>
    config<span class="token punctuation">.</span>devtool <span class="token operator">=</span> <span class="token boolean">false</span>
    config<span class="token punctuation">.</span>plugins <span class="token operator">=</span> <span class="token punctuation">[</span>
      <span class="token operator">...</span>config<span class="token punctuation">.</span>plugins<span class="token punctuation">,</span>
      <span class="token keyword">new</span> <span class="token class-name">CleanWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token keyword">new</span> <span class="token class-name">CopyWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;public&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> config
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>一个环境对应一个配置文件<br><strong>一般有三个配置文件，其中一个是公用配置</strong></p><figure><img src="https://raw.githubusercontent.com/GodX-18/picBed/main/image-20221111160124716.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li><p>通用配置</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;html-webpack-plugin&#39;</span><span class="token punctuation">)</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">&#39;./src/main.js&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;js/bundle.js&#39;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span>
          <span class="token string">&#39;style-loader&#39;</span><span class="token punctuation">,</span>
          <span class="token string">&#39;css-loader&#39;</span>
        <span class="token punctuation">]</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.(png|jpe?g|gif)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&#39;file-loader&#39;</span><span class="token punctuation">,</span>
          <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">outputPath</span><span class="token operator">:</span> <span class="token string">&#39;img&#39;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;[name].[ext]&#39;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&#39;Webpack Tutorial&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">&#39;./src/index.html&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>开发环境的配置</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;webpack&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> merge <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;webpack-merge&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> common <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./webpack.common&#39;</span><span class="token punctuation">)</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span>common<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&#39;development&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">devtool</span><span class="token operator">:</span> <span class="token string">&#39;cheap-eval-module-source-map&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">devServer</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">hot</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">contentBase</span><span class="token operator">:</span> <span class="token string">&#39;public&#39;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>HotModuleReplacementPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>生产环境的配置</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> merge <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;webpack-merge&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> CleanWebpackPlugin <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;clean-webpack-plugin&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> CopyWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;copy-webpack-plugin&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> common <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./webpack.common&#39;</span><span class="token punctuation">)</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span>common<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&#39;production&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token keyword">new</span> <span class="token class-name">CleanWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token class-name">CopyWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;public&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><div class="hint-container warning"><p class="hint-container-title">注意</p><p>不推荐使用 Object.assign() 去合并配置，会覆盖公用配置中所有的配置</p></div><p><strong>使用对应的配置文件进行打包</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">yarn</span> webpack <span class="token parameter variable">--config</span> webpack.prod.js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>也可以定义到 npm scripts 中，更加方便我们使用</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token string-property property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;build&quot;</span><span class="token operator">:</span> <span class="token string">&quot;webpack --config webpack.prod.js&quot;</span>
 <span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>第一种方式只适用于中小型项目，如果项目较大，推荐使用第二种方式。因为项目越复杂，配置文件也就越复杂，分开编写，更加方便维护</p></div><h3 id="defineplugin" tabindex="-1"><a class="header-anchor" href="#defineplugin"><span>DefinePlugin</span></a></h3><p><strong>内置插件，为代码注入全局成员</strong></p><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>在 production 模式下，DefinePlugin插件默认启用，并且在我们的代码当中注入一个 <code>process.env.NODE_ENV</code>这个常量，很多第三方模块都会通过这个常量去判断当前的运行环境</p></div><p><strong>定义全局成员</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
   <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>DefinePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token comment">// 值要求的是一个代码片段</span>
      <span class="token constant">API_BASE_URL</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token string">&#39;https://api.example.com&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>使用全局成员</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">API_BASE_URL</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>DefinePlugin 的值要求是一个代码片段，如果写成字符串，打包结果会有问题，如下图</p><figure><img src="https://raw.githubusercontent.com/GodX-18/picBed/main/image-20221111163253519.png" alt="image-20221111163253519" tabindex="0" loading="lazy"><figcaption>image-20221111163253519</figcaption></figure></div><h3 id="tree-shaking" tabindex="-1"><a class="header-anchor" href="#tree-shaking"><span>Tree-shaking</span></a></h3><p><strong>打包过程去除项目中未引用的代码，生产环境下会自动开启</strong></p><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>Tree-shaking 不是指某个配置选项，而是一组功能搭配使用后的优化效果，production 模式下自动开启</p></div><p><strong>开发模式下使用</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code> <span class="token literal-property property">optimization</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// 模块只导出被使用的成员</span>
    <span class="token literal-property property">usedExports</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token comment">// 压缩输出结果</span>
     <span class="token literal-property property">minimize</span><span class="token operator">:</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>原理</strong></p><ul><li>usedExports 负责标记用不到的代码</li><li>Minimize 负责去除被标记的代码</li></ul><p><strong>webpack 合并模块（Scope Hoisting - 作用域提升）</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code> <span class="token literal-property property">optimization</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// 模块只导出被使用的成员</span>
    <span class="token literal-property property">usedExports</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token comment">// 尽可能合并每一个模块到一个函数中</span>
    <span class="token literal-property property">concatenateModules</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>合并每一个模块到一个函数中，既提升了运行效率，又减少了代码的体积</p></div><h3 id="tree-shaking-babel" tabindex="-1"><a class="header-anchor" href="#tree-shaking-babel"><span>Tree-shaking &amp; Babel</span></a></h3><p><strong>使用 babel-loader 会导致 tree-shaking 失效的问题</strong></p><ul><li>tree-shaking 前提是不需要使用 ES Modules</li><li>由 Webpack 打包的代码必须要使用 ESM</li></ul><p>原因</p><p>因为打包过后的代码不是 ES Modules 格式的，所以导致 tree-shaking 无效</p><p>解决方案</p><p>通过配置，关闭转换 ES Modules即可</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&#39;babel-loader&#39;</span><span class="token punctuation">,</span>
          <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">presets</span><span class="token operator">:</span> <span class="token punctuation">[</span>
              <span class="token comment">// 如果 Babel 加载模块时已经转换了 ESM，则会导致 Tree Shaking 失效</span>
              <span class="token comment">// [&#39;@babel/preset-env&#39;, { modules: &#39;commonjs&#39; }]</span>
              <span class="token comment">// [&#39;@babel/preset-env&#39;, { modules: false }]</span>
              <span class="token comment">// 也可以使用默认配置，也就是 auto，这样 babel-loader 会自动关闭 ESM 转换</span>
              <span class="token punctuation">[</span><span class="token string">&#39;@babel/preset-env&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">modules</span><span class="token operator">:</span> <span class="token string">&#39;auto&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">]</span>
            <span class="token punctuation">]</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="sideeffects" tabindex="-1"><a class="header-anchor" href="#sideeffects"><span>sideEffects</span></a></h3><p><strong>简介</strong></p><p>允许我们通过配置的方式来标记我们的代码是否有副作用，从而为 tree-shaking 提供更大的压缩空间，production 模式下会自动开启</p><p><strong>副作用</strong></p><p>模块执行时除了导出成员之外所作的事情</p><p><strong>使用场景</strong></p><p>一般用于 npm 包标记是否有副作用</p><p><strong>使用方法</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code> <span class="token literal-property property">optimization</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token literal-property property">sideEffects</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>执行过程</strong></p><p>开启后，首先检查<code> pakage.json</code> 文件中的<code>sideEffects</code>标识，以此来判断这个模块是否有副作用，如果没有副作用，这些没有的用到的模块就不会被打包</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>Webpack 中的 sideEffects 选项是用来开启这个功能，而 package.json 中的是标识作用，不要混淆</p></div><p><strong>注意事项</strong></p><ul><li><p>使用前，确保你的代码真的没有副作用，否则 webpack 会误删掉有副作用的代码，比如下面的代码：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 为 Number 的原型添加一个扩展方法</span>
<span class="token class-name">Number</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">pad</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">size</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 将数字转为字符串 =&gt; &#39;8&#39;</span>
  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">this</span> <span class="token operator">+</span> <span class="token string">&#39;&#39;</span>
  <span class="token comment">// 在数字前补指定个数的 0 =&gt; &#39;008&#39;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    result <span class="token operator">=</span> <span class="token string">&#39;0&#39;</span> <span class="token operator">+</span> result
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> result
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>可以在 package.json 中配置以标记有副作用的代码</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token string-property property">&quot;sideEffects&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">&quot;./src/extend.js&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;*.css&quot;</span>
 <span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="代码分包-代码分割" tabindex="-1"><a class="header-anchor" href="#代码分包-代码分割"><span>代码分包/代码分割</span></a></h3><p><strong>问题</strong></p><ul><li>如果应用很大，所有代码最终都被打包到一起，导致bundle 体积过大</li><li>并不是每个模块在启动时都是必要加载的，打包到一起会整体加载所有模块，这会浪费很多流量和带宽</li><li>Http 1.1本身有很多缺陷： <ul><li>同域并行请求限制</li><li>每次请求都会有一定的延迟</li><li>请求的 Header 浪费带宽流量</li></ul></li></ul><p><strong>解决方案</strong></p><p>分包的两种方式</p><ol><li><p>多入口打包</p><ul><li><p>适用于多页应用程序，一个页面对应一个打包入口，公共部分单独提取</p><ul><li>开启多入口打包</li><li>输出名称动态获取 <ul><li>输出的目录名称必须要区分</li></ul></li><li>使用 chunks 选项指定引入的模块 <ul><li>因为 HtmlWebpackPlugin 插件会默认加载所有的模块</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> CleanWebpackPlugin <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;clean-webpack-plugin&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;html-webpack-plugin&#39;</span><span class="token punctuation">)</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&#39;none&#39;</span><span class="token punctuation">,</span>
  <span class="token comment">// 开启多入口打包</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">index</span><span class="token operator">:</span> <span class="token string">&#39;./src/index.js&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">album</span><span class="token operator">:</span> <span class="token string">&#39;./src/album.js&#39;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// 输出名称动态获取</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;[name].bundle.js&#39;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span>
          <span class="token string">&#39;style-loader&#39;</span><span class="token punctuation">,</span>
          <span class="token string">&#39;css-loader&#39;</span>
        <span class="token punctuation">]</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token keyword">new</span> <span class="token class-name">CleanWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token comment">// 使用 chunks 选项指定引入的模块</span>
    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&#39;Multi Entry&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">&#39;./src/index.html&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;index.html&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">chunks</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;index&#39;</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&#39;Multi Entry&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">&#39;./src/album.html&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;album.html&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">chunks</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;album&#39;</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提取公共模块</strong></p><p>在 optimiztion 中配置 splitChunks 即可</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>  <span class="token literal-property property">optimization</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">splitChunks</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token comment">// 自动提取所有公共模块到单独 bundle</span>
      <span class="token literal-property property">chunks</span><span class="token operator">:</span> <span class="token string">&#39;all&#39;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>动态导入</p><ol><li><p>目的：实现按需加载<br> 按需加载：需要用到某个模块时，再加载这个模块</p></li><li><p>动态导入的模块会被自动分包</p></li><li><p>可以通过代码的逻辑来控制加载模块的时机</p></li><li><p>实现：无需配置，只需使用 ES modules 动态导入的语法即可，webpack 内部自动会帮我们处理分包和按需加载</p></li><li><p>代码示例</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// import posts from &#39;./posts/posts&#39;</span>
<span class="token comment">// import album from &#39;./album/album&#39;</span>

<span class="token keyword">const</span> <span class="token function-variable function">render</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> hash <span class="token operator">=</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>hash <span class="token operator">||</span> <span class="token string">&#39;#posts&#39;</span>

  <span class="token keyword">const</span> mainElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;.main&#39;</span><span class="token punctuation">)</span>

  mainElement<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>hash <span class="token operator">===</span> <span class="token string">&#39;#posts&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// mainElement.appendChild(posts())</span>
    <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;./posts/posts&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> <span class="token keyword">default</span><span class="token operator">:</span> posts <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      mainElement<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span><span class="token function">posts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>hash <span class="token operator">===</span> <span class="token string">&#39;#album&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// mainElement.appendChild(album())</span>
    <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;./album/album&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> <span class="token keyword">default</span><span class="token operator">:</span> album <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      mainElement<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span><span class="token function">album</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;hashchange&#39;</span><span class="token punctuation">,</span> render<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol></li></ol><h3 id="魔法注释" tabindex="-1"><a class="header-anchor" href="#魔法注释"><span>魔法注释</span></a></h3><p><strong>解决问题</strong></p><p>默认使用动态导入产生的 bundle 文件名称只是一个序号，如果你需要给 bundle 命名的话，可以使用 webpack 的魔法注释来去实现</p><p><strong>如何使用</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// import posts from &#39;./posts/posts&#39;</span>
<span class="token comment">// import album from &#39;./album/album&#39;</span>

<span class="token keyword">const</span> <span class="token function-variable function">render</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> hash <span class="token operator">=</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>hash <span class="token operator">||</span> <span class="token string">&#39;#posts&#39;</span>

  <span class="token keyword">const</span> mainElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;.main&#39;</span><span class="token punctuation">)</span>

  mainElement<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>hash <span class="token operator">===</span> <span class="token string">&#39;#posts&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// mainElement.appendChild(posts())</span>
    <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token comment">/* webpackChunkName: &#39;posts&#39; */</span><span class="token string">&#39;./posts/posts&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> <span class="token keyword">default</span><span class="token operator">:</span> posts <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      mainElement<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span><span class="token function">posts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>hash <span class="token operator">===</span> <span class="token string">&#39;#album&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// mainElement.appendChild(album())</span>
    <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token comment">/* webpackChunkName: &#39;album&#39; */</span><span class="token string">&#39;./album/album&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> <span class="token keyword">default</span><span class="token operator">:</span> album <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      mainElement<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span><span class="token function">album</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;hashchange&#39;</span><span class="token punctuation">,</span> render<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>小技巧</strong></p><p>如果魔法注释的名字起的是一样的，webpack 会将同名的模块打包到一起，可以根据这个特性，灵活组织动态加载的模块所输出的文件目录</p><h3 id="mincssextractplugin" tabindex="-1"><a class="header-anchor" href="#mincssextractplugin"><span>MinCssExtractPlugin</span></a></h3><p><strong>作用</strong></p><p>可以将 CSS 代码从打包结果中提取出来，可以更具这个插件来时 CSS 模块的按需加载</p><p><strong>使用场景</strong></p><p>CSS 文件超过 150 KB 时使用。因为小于 150 KB 时嵌入到代码当中，减少一次请求，效果可能会更好</p><p><strong>使用</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> CleanWebpackPlugin <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;clean-webpack-plugin&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;html-webpack-plugin&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> MiniCssExtractPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;mini-css-extract-plugin&#39;</span><span class="token punctuation">)</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span>
          <span class="token comment">// &#39;style-loader&#39;, // 将样式通过 style 标签注入</span>
          MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span> <span class="token comment">// 通过 link 的方式引入</span>
          <span class="token string">&#39;css-loader&#39;</span>
        <span class="token punctuation">]</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token keyword">new</span> <span class="token class-name">CleanWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&#39;Dynamic import&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">&#39;./src/index.html&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;index.html&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token class-name">MiniCssExtractPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>OptimizeCssAssetsWebpackPlugin</strong></p><p><strong>作用</strong></p><p>压缩输出的 CSS 文件</p><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>生产环境下，webpack只会压缩 JS 文件，其他的文件压缩需要额外的插件支持。</p></div><p><strong>使用</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> CleanWebpackPlugin <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;clean-webpack-plugin&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;html-webpack-plugin&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> MiniCssExtractPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;mini-css-extract-plugin&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> OptimizeCssAssetsWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;optimize-css-assets-webpack-plugin&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> TerserWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;terser-webpack-plugin&#39;</span><span class="token punctuation">)</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&#39;none&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">main</span><span class="token operator">:</span> <span class="token string">&#39;./src/index.js&#39;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;[name].bundle.js&#39;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">optimization</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// wenpack 推荐在 minimizer 中配置，只有在生产环境下才会启用</span>
    <span class="token literal-property property">minimizer</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token comment">// 不添加，生产环境下不会压缩 JS 代码</span>
      <span class="token keyword">new</span> <span class="token class-name">TerserWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token comment">// 压缩 CSS</span>
      <span class="token keyword">new</span> <span class="token class-name">OptimizeCssAssetsWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span>
          <span class="token comment">// &#39;style-loader&#39;, // 将样式通过 style 标签注入</span>
          MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span>
          <span class="token string">&#39;css-loader&#39;</span>
        <span class="token punctuation">]</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token keyword">new</span> <span class="token class-name">CleanWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&#39;Dynamic import&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">&#39;./src/index.html&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;index.html&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token class-name">MiniCssExtractPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="输出文件名-hash" tabindex="-1"><a class="header-anchor" href="#输出文件名-hash"><span>输出文件名 Hash</span></a></h3><p><strong>作用</strong></p><p>如果线上网页设置缓存的时间过长，项目重新发布依旧会使用缓存进行展示。生产模式下，文件名使用 Hash，一旦资源文件发生改变，Hash 值也会改变，文件名称也会改变。这样客户端的缓存时间就可以设置的非常长，也就不用担心文件更新过后的问题</p><p><strong>使用</strong></p><p>通过占位符的方式设置 hash</p><p>有三种 Hash</p><ul><li><p>整个项目级别</p><ul><li>项目中的代码只要有任何改动，hash 都会发生变化<div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;[name]-[hash:8].bundle.js&#39;</span>
 <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token keyword">new</span> <span class="token class-name">MiniCssExtractPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;[name]-[hash:8].bundle.css&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>chunk 级别</p><ul><li>同一个入口的 hash 是一样的，其他入口的 hash 不会受影响<div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;[name]-[chunkhash:8].bundle.js&#39;</span>
 <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token keyword">new</span> <span class="token class-name">MiniCssExtractPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;[name]-[chunkhash:8].bundle.css&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>文件级别</p><ul><li>根据文件的内容生产 Hash，只有文件内容改变时，才会改变 Hash<div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;[name]-[contenthash:8].bundle.js&#39;</span>
 <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token keyword">new</span> <span class="token class-name">MiniCssExtractPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;[name]-[contenthash:8].bundle.css&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>推荐使用 8 位的 文件级别 Hash</p></div>`,176);function b(g,h){const a=o("ExternalLinkIcon");return l(),i("div",null,[r,n("div",u,[d,n("p",null,[n("a",k,[s("webpack-dev-server"),e(a)]),s(" 和 "),n("a",v,[s("webpack-dev-middleware"),e(a)]),s(" 里 Watch 模式默认开启。")])]),m])}const f=t(c,[["render",b],["__file","Webpack.html.vue"]]),x=JSON.parse(`{"path":"/%E5%A4%A7%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96%E5%AE%9E%E6%88%98/Webpack.html","title":"Webpack 打包","lang":"zh-CN","frontmatter":{"title":"Webpack 打包","icon":"speed","order":5,"category":["前端"],"tag":["模块化"],"description":"为什么需要模块化打包 ES Modules 存在环境兼容问题 模块化文件过多，网络请求频繁 所有的前端资源都需要模块化（资源文件） 打包工具的作用 新特性的语法转换，例如 es6 编译成 es5 将散落的模块文件再次合并到一起（解决频繁请求模块文件的问题） 支持不同种类的前端资源类型 快速上手 初始化项目，安装 webpack、webpack-cli ...","head":[["meta",{"property":"og:url","content":"https://godx-18.github.io/%E5%A4%A7%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96%E5%AE%9E%E6%88%98/Webpack.html"}],["meta",{"property":"og:site_name","content":"烜"}],["meta",{"property":"og:title","content":"Webpack 打包"}],["meta",{"property":"og:description","content":"为什么需要模块化打包 ES Modules 存在环境兼容问题 模块化文件过多，网络请求频繁 所有的前端资源都需要模块化（资源文件） 打包工具的作用 新特性的语法转换，例如 es6 编译成 es5 将散落的模块文件再次合并到一起（解决频繁请求模块文件的问题） 支持不同种类的前端资源类型 快速上手 初始化项目，安装 webpack、webpack-cli ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.githubusercontent.com/GodX-18/picBed/main/image-20221021172552294.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-08-07T03:00:15.000Z"}],["meta",{"property":"article:author","content":"GodX"}],["meta",{"property":"article:tag","content":"模块化"}],["meta",{"property":"article:modified_time","content":"2023-08-07T03:00:15.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Webpack 打包\\",\\"image\\":[\\"https://raw.githubusercontent.com/GodX-18/picBed/main/image-20221021172552294.png\\",\\"https://raw.githubusercontent.com/GodX-18/picBed/main/image-20221022083158717.png\\",\\"https://raw.githubusercontent.com/GodX-18/picBed/main/image-20221022083414836.png\\",\\"https://raw.githubusercontent.com/GodX-18/picBed/main/image-20221022083510177.png\\",\\"https://raw.githubusercontent.com/GodX-18/picBed/main/image-20221022085028091.png\\",\\"https://raw.githubusercontent.com/GodX-18/picBed/main/image-20221022085117754.png\\",\\"https://raw.githubusercontent.com/GodX-18/picBed/main/image-20221022085154242.png\\",\\"https://raw.githubusercontent.com/GodX-18/picBed/main/image-20221022105853332.png\\",\\"https://raw.githubusercontent.com/GodX-18/picBed/main/image-20221108074901611.png\\",\\"https://raw.githubusercontent.com/GodX-18/picBed/main/image-20221110085724400.png\\",\\"https://raw.githubusercontent.com/GodX-18/picBed/main/image-20221110085751328.png\\",\\"https://raw.githubusercontent.com/GodX-18/picBed/main/image-20221110090102052.png\\",\\"https://raw.githubusercontent.com/GodX-18/picBed/main/image-20221110091201803.png\\",\\"https://raw.githubusercontent.com/GodX-18/picBed/main/image-20221110091304578.png\\",\\"https://raw.githubusercontent.com/GodX-18/picBed/main/image-20221110131346590.png\\",\\"https://raw.githubusercontent.com/GodX-18/picBed/main/image-20221111145435273.png\\",\\"https://raw.githubusercontent.com/GodX-18/picBed/main/image-20221111160124716.png\\",\\"https://raw.githubusercontent.com/GodX-18/picBed/main/image-20221111163253519.png\\"],\\"dateModified\\":\\"2023-08-07T03:00:15.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"GodX\\",\\"url\\":\\"https://github.com/GodX-18\\"}]}"]]},"headers":[{"level":3,"title":"为什么需要模块化打包","slug":"为什么需要模块化打包","link":"#为什么需要模块化打包","children":[]},{"level":3,"title":"打包工具的作用","slug":"打包工具的作用","link":"#打包工具的作用","children":[]},{"level":3,"title":"快速上手","slug":"快速上手","link":"#快速上手","children":[]},{"level":3,"title":"配置文件","slug":"配置文件","link":"#配置文件","children":[]},{"level":3,"title":"工作模式","slug":"工作模式","link":"#工作模式","children":[]},{"level":3,"title":"资源模块加载","slug":"资源模块加载","link":"#资源模块加载","children":[]},{"level":3,"title":"导入资源模块","slug":"导入资源模块","link":"#导入资源模块","children":[]},{"level":3,"title":"文件资源加载器","slug":"文件资源加载器","link":"#文件资源加载器","children":[]},{"level":3,"title":"Data URLs 与 url-loader","slug":"data-urls-与-url-loader","link":"#data-urls-与-url-loader","children":[]},{"level":3,"title":"Webpack 常用的资源加载器分类","slug":"webpack-常用的资源加载器分类","link":"#webpack-常用的资源加载器分类","children":[]},{"level":3,"title":"处理 ES2015","slug":"处理-es2015","link":"#处理-es2015","children":[]},{"level":3,"title":"模块加载方式","slug":"模块加载方式","link":"#模块加载方式","children":[]},{"level":3,"title":"核心工作原理","slug":"核心工作原理","link":"#核心工作原理","children":[]},{"level":3,"title":"开发一个 Loader","slug":"开发一个-loader","link":"#开发一个-loader","children":[]},{"level":3,"title":"插件机制","slug":"插件机制","link":"#插件机制","children":[]},{"level":3,"title":"Clean-webpack-plugin","slug":"clean-webpack-plugin","link":"#clean-webpack-plugin","children":[]},{"level":3,"title":"Html-webpack-plugin","slug":"html-webpack-plugin","link":"#html-webpack-plugin","children":[]},{"level":3,"title":"Copy-webpack-plugin","slug":"copy-webpack-plugin","link":"#copy-webpack-plugin","children":[]},{"level":3,"title":"开发一个插件","slug":"开发一个插件","link":"#开发一个插件","children":[]},{"level":3,"title":"优化开发体验","slug":"优化开发体验","link":"#优化开发体验","children":[]},{"level":3,"title":"webpack 实现自动编译","slug":"webpack-实现自动编译","link":"#webpack-实现自动编译","children":[]},{"level":3,"title":"webpack 自动刷新浏览器","slug":"webpack-自动刷新浏览器","link":"#webpack-自动刷新浏览器","children":[]},{"level":3,"title":"代理 API 服务","slug":"代理-api-服务","link":"#代理-api-服务","children":[]},{"level":3,"title":"Source Map","slug":"source-map","link":"#source-map","children":[]},{"level":3,"title":"Webpack 配置 Source Map","slug":"webpack-配置-source-map","link":"#webpack-配置-source-map","children":[]},{"level":3,"title":"选择合适的 source map","slug":"选择合适的-source-map","link":"#选择合适的-source-map","children":[]},{"level":3,"title":"自动刷新的问题","slug":"自动刷新的问题","link":"#自动刷新的问题","children":[]},{"level":3,"title":"HMR-模块热更新","slug":"hmr-模块热更新","link":"#hmr-模块热更新","children":[]},{"level":3,"title":"处理 JS 模块热替换","slug":"处理-js-模块热替换","link":"#处理-js-模块热替换","children":[]},{"level":3,"title":"HMR 注意事项","slug":"hmr-注意事项","link":"#hmr-注意事项","children":[]},{"level":3,"title":"生产环境优化","slug":"生产环境优化","link":"#生产环境优化","children":[]},{"level":3,"title":"不同环境下的配置","slug":"不同环境下的配置","link":"#不同环境下的配置","children":[]},{"level":3,"title":"DefinePlugin","slug":"defineplugin","link":"#defineplugin","children":[]},{"level":3,"title":"Tree-shaking","slug":"tree-shaking","link":"#tree-shaking","children":[]},{"level":3,"title":"Tree-shaking & Babel","slug":"tree-shaking-babel","link":"#tree-shaking-babel","children":[]},{"level":3,"title":"sideEffects","slug":"sideeffects","link":"#sideeffects","children":[]},{"level":3,"title":"代码分包/代码分割","slug":"代码分包-代码分割","link":"#代码分包-代码分割","children":[]},{"level":3,"title":"魔法注释","slug":"魔法注释","link":"#魔法注释","children":[]},{"level":3,"title":"MinCssExtractPlugin","slug":"mincssextractplugin","link":"#mincssextractplugin","children":[]},{"level":3,"title":"输出文件名 Hash","slug":"输出文件名-hash","link":"#输出文件名-hash","children":[]}],"git":{"createdTime":1678348093000,"updatedTime":1691377215000,"contributors":[{"name":"GodX","email":"1046529973@qq.com","commits":3}]},"readingTime":{"minutes":23.01,"words":6904},"filePathRelative":"大前端/前端工程化实战/Webpack.md","localizedDate":"2023年3月9日","excerpt":"<h3>为什么需要模块化打包</h3>\\n<ul>\\n<li>ES Modules 存在环境兼容问题</li>\\n<li>模块化文件过多，网络请求频繁</li>\\n<li>所有的前端资源都需要模块化（资源文件）</li>\\n</ul>\\n<h3>打包工具的作用</h3>\\n<ul>\\n<li>新特性的语法转换，例如 es6 编译成 es5</li>\\n<li>将散落的模块文件再次合并到一起（解决频繁请求模块文件的问题）</li>\\n<li>支持不同种类的前端资源类型</li>\\n</ul>\\n<h3>快速上手</h3>\\n<ol>\\n<li>\\n<p>初始化项目，安装 webpack、webpack-cli</p>\\n<div class=\\"language-bash\\" data-ext=\\"sh\\" data-title=\\"sh\\"><pre class=\\"language-bash\\"><code><span class=\\"token function\\">yarn</span> init <span class=\\"token parameter variable\\">--yes</span>\\n<span class=\\"token function\\">yarn</span> <span class=\\"token function\\">add</span> webpack webpack-cli <span class=\\"token parameter variable\\">-D</span>\\n</code></pre></div></li>\\n<li>\\n<p>在根目录下新建一个 src/index.js 作为入口文件</p>\\n<div class=\\"language-javascript\\" data-ext=\\"js\\" data-title=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">import</span> createHeading <span class=\\"token keyword\\">from</span> <span class=\\"token string\\">'./heading.js'</span>\\n\\n<span class=\\"token keyword\\">const</span> heading <span class=\\"token operator\\">=</span> <span class=\\"token function\\">createHeading</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n\\ndocument<span class=\\"token punctuation\\">.</span>body<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">append</span><span class=\\"token punctuation\\">(</span>heading<span class=\\"token punctuation\\">)</span>\\n</code></pre></div><p><em>heading.js</em></p>\\n<div class=\\"language-javascript\\" data-ext=\\"js\\" data-title=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">export</span> <span class=\\"token keyword\\">default</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">const</span> element <span class=\\"token operator\\">=</span> document<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">createElement</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'h2'</span><span class=\\"token punctuation\\">)</span>\\n\\n  element<span class=\\"token punctuation\\">.</span>textContent <span class=\\"token operator\\">=</span> <span class=\\"token string\\">'Hello world'</span>\\n  element<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">addEventListener</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'click'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token function\\">alert</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'Hello webpack'</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n\\n  <span class=\\"token keyword\\">return</span> element\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div></li>\\n<li>\\n<p>使用 webpack-cli 进行初体验</p>\\n<div class=\\"language-bash\\" data-ext=\\"sh\\" data-title=\\"sh\\"><pre class=\\"language-bash\\"><code><span class=\\"token function\\">yarn</span> webpack <span class=\\"token parameter variable\\">--mode</span> production\\n</code></pre></div><div class=\\"hint-container info\\">\\n<p class=\\"hint-container-title\\">相关信息</p>\\n<p>Webpack4之后的版本支持零配置打包， 会默认使用 src 目录下的 index.js 文件作为入口文件进行打包，并输出到 <code>dist/main.js</code></p>\\n</div>\\n</li>\\n</ol>","autoDesc":true}`);export{f as comp,x as data};
