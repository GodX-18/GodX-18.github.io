import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as c,c as l,b as n,e as s,d as t,a as p}from"./app-oXp7PBbS.js";const i={},u=p(`<h2 id="快速入门" tabindex="-1"><a class="header-anchor" href="#快速入门"><span>快速入门</span></a></h2><h3 id="安装-gulp-命令行工具" tabindex="-1"><a class="header-anchor" href="#安装-gulp-命令行工具"><span>安装 gulp 命令行工具</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> i gulp-cli <span class="token parameter variable">-g</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="在项目中使用-gulp" tabindex="-1"><a class="header-anchor" href="#在项目中使用-gulp"><span>在项目中使用 gulp</span></a></h3><ol><li><p>安装 gulp，作为开发时的依赖项</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> --save-dev gulp
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>检查 gulp 版本</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>gulp <span class="token parameter variable">--version</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>确保输出与下面的屏幕截图匹配，否则你可能需要执行本指南中的上述步骤。</p><figure><img src="https://raw.githubusercontent.com/GodX-18/picBed/main/image-20220907085306621.png" alt="image-20220907085306621" tabindex="0" loading="lazy"><figcaption>image-20220907085306621</figcaption></figure></li><li><p>在项目根目录下创建 gulpfile 文件</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">defaultTask</span><span class="token punctuation">(</span><span class="token parameter">cb</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// place code for your default task here</span>
  <span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

exports<span class="token punctuation">.</span>default <span class="token operator">=</span> defaultTask
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>在项目根目录下执行 gulp 命令</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">## exports.default 的命令</span>
gulp 
<span class="token comment">## 运行多个任务</span>
gulp <span class="token operator">&lt;</span>task<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>othertask<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>控制台输出一下结果，代表执行任务成功</p><figure><img src="https://raw.githubusercontent.com/GodX-18/picBed/main/image-20220907090250242.png" alt="image-20220907090250242" tabindex="0" loading="lazy"><figcaption>image-20220907090250242</figcaption></figure></li></ol><h2 id="javascript-和-gulpfile" tabindex="-1"><a class="header-anchor" href="#javascript-和-gulpfile"><span>JavaScript 和 Gulpfile</span></a></h2><h3 id="gulpfile-详解" tabindex="-1"><a class="header-anchor" href="#gulpfile-详解"><span>Gulpfile 详解</span></a></h3><ul><li>所编写的代码都是纯 JavaScript 代码</li><li>文件名可以为 <code>gulpfile.js</code> 或者 <code>Gulpfile.js</code></li><li>Gulpfile 文件在运行 <code>gulp</code> 命令时会被自动加载</li><li>纯 JavaScript 代码或 Node 模块也会被使用</li><li>任何导出（export）的函数都将注册到 gulp 的任务（task）系统中</li></ul><h3 id="gulpfile-转译" tabindex="-1"><a class="header-anchor" href="#gulpfile-转译"><span>Gulpfile 转译</span></a></h3>`,9),r=n("li",null,"可以使用其他语言来编写 gulpfile 文件，比如 ts、babel",-1),d=n("code",null,"gulpfile.js",-1),k=n("code",null,"gulpfile.ts",-1),v={href:"https://www.npmjs.com/package/ts-node",target:"_blank",rel:"noopener noreferrer"},m=n("code",null,"gulpfile.babel.js",-1),b={href:"https://www.npmjs.com/package/@babel/register",target:"_blank",rel:"noopener noreferrer"},g={href:"https://www.gulpjs.com.cn/docs/documentation-missing",target:"_blank",rel:"noopener noreferrer"},f=p('<h3 id="gulpfile-分割" tabindex="-1"><a class="header-anchor" href="#gulpfile-分割"><span>Gulpfile 分割</span></a></h3><ul><li>如果 gulpfile 文件过大，可以将其替换为名为 <code>gulpfile.js</code>的目录，该目录中包含了一个名为 <code>index.js</code> 的文件，该文件被当作 <code>gulpfile.js</code> 使用。并且，该目录中还可以包含各个独立的任务（task）模块。</li><li>每个任务（task）可以被分割为独立的文件，然后导入（import）到 gulpfile 文件中并组合。这不仅使事情变得井然有序，而且可以对每个任务（task）进行单独测试，或者根据条件改变组合。</li></ul><h2 id="创建任务" tabindex="-1"><a class="header-anchor" href="#创建任务"><span>创建任务</span></a></h2>',3),h=n("li",null,"每个 gulp 任务（task）都是一个异步的 JavaScript 函数",-1),y=n("li",null,"此函数是一个可以接收 callback 作为参数的函数，或者是一个返回 stream、promise、event emitter、child process 或 observable类型值的函数",-1),j={href:"https://www.gulpjs.com.cn/docs/getting-started/async-completion##using-async-await",target:"_blank",rel:"noopener noreferrer"},w=n("li",null,[n("em",null,"在以前的 gulp 版本中，"),n("code",null,"task()"),s(),n("em",null,"方法用来将函数注册为任务（task）。虽然这个 API 依旧是可以使用的，但是 导出（export）将会是主要的注册机制，除非遇到 export 不起作用的情况。")],-1),_=p(`<div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 新版</span>
exports<span class="token punctuation">.</span><span class="token function-variable function">build</span> <span class="token operator">=</span> <span class="token parameter">done</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;GodX&gt;loghello gulp&#39;</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 旧版</span>
<span class="token keyword">const</span> gulp <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;gulp&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">&#39;old&#39;</span><span class="token punctuation">,</span> <span class="token parameter">done</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;GodX&gt;logold&#39;</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="导出任务" tabindex="-1"><a class="header-anchor" href="#导出任务"><span>导出任务</span></a></h3><p><strong>任务分为公开任务或私有任务两种</strong></p><ul><li><strong>公开任务（Public tasks）</strong> 从 gulpfile 中被导出（export），可以通过 <code>gulp</code> 命令直接调用。</li><li><strong>私有任务（Private tasks）</strong> 被设计为在内部使用，通常作为 <code>series()</code> 或 <code>parallel()</code> 组合的组成部分。</li></ul><p><strong>两种异同</strong></p><ul><li>私有任务不能被 gulp 命令直接调用</li><li>私有任务只能在 gulpfile 文件内部使用</li><li>被 export 导出的函数为公开任务，反之为私有任务</li></ul><p><strong>示例</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> series <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;gulp&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// \`clean\` 函数并未被导出（export），因此被认为是私有任务（private task）。</span>
<span class="token comment">// 它仍然可以被用在 \`series()\` 组合中。</span>
<span class="token keyword">function</span> <span class="token function">clean</span><span class="token punctuation">(</span><span class="token parameter">cb</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// body omitted</span>
  <span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// \`build\` 函数被导出（export）了，因此它是一个公开任务（public task），并且可以被 \`gulp\` 命令直接调用。</span>
<span class="token comment">// 它也仍然可以被用在 \`series()\` 组合中。</span>
<span class="token keyword">function</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token parameter">cb</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// body omitted</span>
  <span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

exports<span class="token punctuation">.</span>build <span class="token operator">=</span> build<span class="token punctuation">;</span>
exports<span class="token punctuation">.</span>default <span class="token operator">=</span> <span class="token function">series</span><span class="token punctuation">(</span>clean<span class="token punctuation">,</span> build<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>使用 task 命令查看所有任务</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>gulp <span class="token parameter variable">--tasks</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/GodX-18/picBed/main/image-20220907093015657.png" alt="image-20220907093015657" tabindex="0" loading="lazy"><figcaption>image-20220907093015657</figcaption></figure><h3 id="组合任务" tabindex="-1"><a class="header-anchor" href="#组合任务"><span>组合任务</span></a></h3><p><strong>什么是组合任务</strong></p><ul><li>组合任务允许将多个组合的任务组合为一个更复杂的操作</li><li>在 gulp 中有两种组合任务的方法方法： <code>series()</code> 和 <code>parallel()</code></li></ul><p><strong>两种组合任务的异同</strong></p><ul><li><p>如果需要让任务（task）按顺序执行，请使用 <code>series()</code> 方法</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> series <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;gulp&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">transpile</span><span class="token punctuation">(</span><span class="token parameter">cb</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;GodX&gt;log&#39;</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">bundle</span><span class="token punctuation">(</span><span class="token parameter">cb</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;GodX&gt;log&#39;</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

exports<span class="token punctuation">.</span>default <span class="token operator">=</span> <span class="token function">series</span><span class="token punctuation">(</span>transpile<span class="token punctuation">,</span> bundle<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/GodX-18/picBed/main/image-20220907095505143.png" alt="image-20220907095505143" tabindex="0" loading="lazy"><figcaption>image-20220907095505143</figcaption></figure></li><li><p>对于希望以最大并发来运行的任务（tasks），可以使用 <code>parallel()</code> 方法将它们组合起来。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> parallel <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;gulp&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">javascript</span><span class="token punctuation">(</span><span class="token parameter">cb</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;GodX&gt;log&#39;</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span>
  <span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">css</span><span class="token punctuation">(</span><span class="token parameter">cb</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;GodX&gt;log&#39;</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

exports<span class="token punctuation">.</span>default <span class="token operator">=</span> <span class="token function">parallel</span><span class="token punctuation">(</span>javascript<span class="token punctuation">,</span> css<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/GodX-18/picBed/main/image-20220907095729071.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p>当 <code>series()</code> 或 <code>parallel()</code> 被调用时，任务（tasks）被立即组合在一起。这就允许在组合中进行改变，而不需要在单个任务（task）中进行条件判断。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> series <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;gulp&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">minify</span><span class="token punctuation">(</span><span class="token parameter">cb</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// body omitted</span>
  <span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token keyword">function</span> <span class="token function">transpile</span><span class="token punctuation">(</span><span class="token parameter">cb</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// body omitted</span>
  <span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">livereload</span><span class="token punctuation">(</span><span class="token parameter">cb</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// body omitted</span>
  <span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">&#39;production&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  exports<span class="token punctuation">.</span>build <span class="token operator">=</span> <span class="token function">series</span><span class="token punctuation">(</span>transpile<span class="token punctuation">,</span> minify<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  exports<span class="token punctuation">.</span>build <span class="token operator">=</span> <span class="token function">series</span><span class="token punctuation">(</span>transpile<span class="token punctuation">,</span> livereload<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>series()</code> 和 <code>parallel()</code> 可以被嵌套到任意深度。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> series<span class="token punctuation">,</span> parallel <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;gulp&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">clean</span><span class="token punctuation">(</span><span class="token parameter">cb</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// body omitted</span>
  <span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">cssTranspile</span><span class="token punctuation">(</span><span class="token parameter">cb</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// body omitted</span>
  <span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">cssMinify</span><span class="token punctuation">(</span><span class="token parameter">cb</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// body omitted</span>
  <span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">jsTranspile</span><span class="token punctuation">(</span><span class="token parameter">cb</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// body omitted</span>
  <span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">jsBundle</span><span class="token punctuation">(</span><span class="token parameter">cb</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// body omitted</span>
  <span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">jsMinify</span><span class="token punctuation">(</span><span class="token parameter">cb</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// body omitted</span>
  <span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">publish</span><span class="token punctuation">(</span><span class="token parameter">cb</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// body omitted</span>
  <span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

exports<span class="token punctuation">.</span>build <span class="token operator">=</span> <span class="token function">series</span><span class="token punctuation">(</span>
  clean<span class="token punctuation">,</span>
  <span class="token function">parallel</span><span class="token punctuation">(</span>
    cssTranspile<span class="token punctuation">,</span>
    <span class="token function">series</span><span class="token punctuation">(</span>jsTranspile<span class="token punctuation">,</span> jsBundle<span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">parallel</span><span class="token punctuation">(</span>cssMinify<span class="token punctuation">,</span> jsMinify<span class="token punctuation">)</span><span class="token punctuation">,</span>
  publish
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>当一个组合操作执行时，这个组合中的每一个任务每次被调用时都会被执行。例如，在两个不同的任务（task）之间调用的 <code>clean</code> 任务（task）将被执行两次，并且将导致不可预期的结果。因此，最好重构组合中的 <code>clean</code> 任务（task）。<br><strong>如果你有如下代码</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// This is INCORRECT</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> series<span class="token punctuation">,</span> parallel <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;gulp&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">clean</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">cb</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// body omitted</span>
  <span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> css <span class="token operator">=</span> <span class="token function">series</span><span class="token punctuation">(</span>clean<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">cb</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// body omitted</span>
  <span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> javascript <span class="token operator">=</span> <span class="token function">series</span><span class="token punctuation">(</span>clean<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">cb</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// body omitted</span>
  <span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

exports<span class="token punctuation">.</span>build <span class="token operator">=</span> <span class="token function">parallel</span><span class="token punctuation">(</span>css<span class="token punctuation">,</span> javascript<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>可以重构为：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> series<span class="token punctuation">,</span> parallel <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;gulp&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">clean</span><span class="token punctuation">(</span><span class="token parameter">cb</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// body omitted</span>
  <span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">css</span><span class="token punctuation">(</span><span class="token parameter">cb</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// body omitted</span>
  <span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">javascript</span><span class="token punctuation">(</span><span class="token parameter">cb</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// body omitted</span>
  <span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

exports<span class="token punctuation">.</span>build <span class="token operator">=</span> <span class="token function">series</span><span class="token punctuation">(</span>clean<span class="token punctuation">,</span> <span class="token function">parallel</span><span class="token punctuation">(</span>css<span class="token punctuation">,</span> javascript<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul>`,16),x={id:"异步执行",tabindex:"-1"},q={class:"header-anchor",href:"#异步执行"},G={href:"https://www.gulpjs.com.cn/docs/getting-started/async-completion/",target:"_blank",rel:"noopener noreferrer"},B=p(`<p>当从任务（task）中返回 stream、promise、event emitter、child process 或 observable 时，成功或错误值将通知 gulp 是否继续执行或结束。如果任务（task）出错，gulp 将立即结束执行并显示该错误</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>

exports<span class="token punctuation">.</span><span class="token function-variable function">callback</span> <span class="token operator">=</span> <span class="token parameter">done</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;callback task&#39;</span><span class="token punctuation">)</span>
  <span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

exports<span class="token punctuation">.</span><span class="token function-variable function">callback_error</span> <span class="token operator">=</span> <span class="token parameter">done</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;callback task&#39;</span><span class="token punctuation">)</span>
  <span class="token function">done</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;task failed&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

exports<span class="token punctuation">.</span><span class="token function-variable function">promise</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;promise task&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

exports<span class="token punctuation">.</span><span class="token function-variable function">promise_error</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;promise task&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;task failed&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token function-variable function">timeout</span> <span class="token operator">=</span> <span class="token parameter">time</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> time<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

exports<span class="token punctuation">.</span><span class="token function-variable function">async</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">await</span> <span class="token function">timeout</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;async task&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// exports.stream = () =&gt; {</span>
<span class="token comment">//   const read = fs.createReadStream(&#39;yarn.lock&#39;)</span>
<span class="token comment">//   const write = fs.createWriteStream(&#39;a.txt&#39;)</span>
<span class="token comment">//   read.pipe(write)</span>
<span class="token comment">//   return read</span>
<span class="token comment">// }</span>

exports<span class="token punctuation">.</span><span class="token function-variable function">stream</span> <span class="token operator">=</span> <span class="token parameter">done</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> read <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createReadStream</span><span class="token punctuation">(</span><span class="token string">&#39;yarn.lock&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> write <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createWriteStream</span><span class="token punctuation">(</span><span class="token string">&#39;a.txt&#39;</span><span class="token punctuation">)</span>
  read<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>write<span class="token punctuation">)</span> <span class="token comment">// 将 yarn.lock 文件中的内容复制到 a.txt 文件中</span>
  read<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="处理文件" tabindex="-1"><a class="header-anchor" href="#处理文件"><span>处理文件</span></a></h2>`,3),X=n("li",null,[s("gulp 暴露了 "),n("code",null,"src()"),s(" 和 "),n("code",null,"dest()"),s(" 方法用于处理计算机上存放的文件。 "),n("ul",null,[n("li",null,"src 用来找到你需要处理的流文件"),n("li",null,"dest 用来输出处理后的文件流到指定的目录下")])],-1),T=n("code",null,"src()",-1),E={href:"https://www.gulpjs.com.cn/docs/getting-started/explaining-globs",target:"_blank",rel:"noopener noreferrer"},A={href:"https://nodejs.org/api/stream.html",target:"_blank",rel:"noopener noreferrer"},S=n("li",null,"它将所有匹配的文件读取到内存中并通过流（stream）进行处理",-1),N=n("li",null,[s("流（stream）所提供的主要的 API 是 "),n("code",null,".pipe()"),s(" 方法，用于连接转换流（Transform streams）或可写流（Writable streams） "),n("ul",null,[n("li",null,"转换流：将流通过一些插件处理转换成你想要的格式"),n("li",null,"可写流：可以进行操作的流")])],-1),z=p(`<p><strong>示例</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> src<span class="token punctuation">,</span> dest <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;gulp&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> uglify <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;gulp-uglify&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 压缩js</span>
<span class="token keyword">const</span> babel <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;gulp-babel&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 语法转换</span>

exports<span class="token punctuation">.</span><span class="token function-variable function">default</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">src</span><span class="token punctuation">(</span><span class="token string">&quot;src/index.js&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>
            <span class="token function">babel</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
                <span class="token literal-property property">presets</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;@babel/preset-env&quot;</span><span class="token punctuation">]</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">uglify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">&quot;output/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="向流-stream-中添加文件" tabindex="-1"><a class="header-anchor" href="#向流-stream-中添加文件"><span>向流（stream）中添加文件</span></a></h3>`,3),P=n("code",null,"src()",-1),J={href:"https://www.gulpjs.com.cn/docs/getting-started/explaining-globs##overlapping-globs",target:"_blank",rel:"noopener noreferrer"},C=p(`<p>这对于在添加普通的 JavaScript 文件之前先转换部分文件的场景很有用，添加新的文件后可以对所有文件统一进行压缩并混淆（uglifying）。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> src<span class="token punctuation">,</span> dest <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;gulp&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> uglify <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;gulp-uglify&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> babel <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;gulp-babel&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

exports<span class="token punctuation">.</span><span class="token function-variable function">default</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">src</span><span class="token punctuation">(</span><span class="token string">&quot;src/index.js&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>
            <span class="token function">babel</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
                <span class="token literal-property property">presets</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;@babel/preset-env&quot;</span><span class="token punctuation">]</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token string">&quot;test/*.js&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">uglify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">&quot;output/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="分阶段输出" tabindex="-1"><a class="header-anchor" href="#分阶段输出"><span>分阶段输出</span></a></h3><ul><li>可以把 dest（）返回的文件流当作处理过的 src（）再做新一轮的处理</li><li>此功能可用于在同一个管道（pipeline）中创建未压缩（unminified）和已压缩（minified）的文件</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> src<span class="token punctuation">,</span> dest <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;gulp&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> uglify <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;gulp-uglify&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> babel <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;gulp-babel&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> rename <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;gulp-rename&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

exports<span class="token punctuation">.</span><span class="token function-variable function">default</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">src</span><span class="token punctuation">(</span><span class="token string">&quot;src/index.js&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>
            <span class="token function">babel</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
                <span class="token literal-property property">presets</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;@babel/preset-env&quot;</span><span class="token punctuation">]</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token string">&quot;test/*.js&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">&quot;dev/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">uglify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">rename</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">extname</span><span class="token operator">:</span> <span class="token string">&#39;.min.js&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">&quot;prod/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="模式-流动-streaming-、缓冲-buffered-和空-empty-模式" tabindex="-1"><a class="header-anchor" href="#模式-流动-streaming-、缓冲-buffered-和空-empty-模式"><span>模式：流动（streaming）、缓冲（buffered）和空（empty）模式</span></a></h3><ul><li></li></ul>`,7),D=n("code",null,"src()",-1),I=n("code",null,"src()",-1),M=n("code",null,"buffer",-1),R=n("code",null,"read",-1),V={href:"https://www.gulpjs.com.cn/docs/api/src##options",target:"_blank",rel:"noopener noreferrer"},F=p(`<ul><li>缓冲（Buffering）模式是默认模式，将文件内容加载内存中。插件通常运行在缓冲（buffering）模式下，并且许多插件不支持流动（streaming）模式。</li><li>流动（Streaming）模式的存在主要用于操作无法放入内存中的大文件，例如巨幅图像或电影。文件内容从文件系统中以小块的方式流式传输，而不是一次性全部加载。如果需要流动（streaming）模式，请查找支持此模式的插件或自己编写。</li><li>空（Empty）模式不包含任何内容，仅在处理文件元数据时有用。</li></ul><h2 id="glob-详解" tabindex="-1"><a class="header-anchor" href="#glob-详解"><span>Glob 详解</span></a></h2><ul><li>用于匹配文件路径</li><li>通常作为 scr 方法的参数传入，用于确定哪些文件需要被操作</li><li>glob 或 glob 数组必须至少匹配到一个匹配项，否则 <code>src()</code> 将报错</li><li>将按照每个 glob 在数组中的位置依次执行匹配 - 这尤其对于取反（negative） glob 有用</li></ul><h3 id="字符串片段与分隔符" tabindex="-1"><a class="header-anchor" href="#字符串片段与分隔符"><span>字符串片段与分隔符</span></a></h3><ul><li><p>在 glob 中，分隔符永远是 <code>/</code> 字符 - 不区分操作系统</p></li><li><p>在 glob 中，<code>\\\\</code> 字符被保留作为转义符使用</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// * 将被作为一个普通字符使用，而不再是通配符了</span>
<span class="token string">&#39;glob_with_uncommon_\\\\*_character.js&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>由于 Node 使用 <code>\\\\</code> 作为路径分隔符</p><ul><li>不能使用 node 中的 path 类方法来创建 glob</li><li>还要避免使用 <code>__dirname</code> 和 <code>__filename</code> 全局变量</li><li>由于同样的原因，<code>process.cwd()</code> 方法也要避免使用</li></ul></li></ul><h3 id="特殊字符-一个星号" tabindex="-1"><a class="header-anchor" href="#特殊字符-一个星号"><span>特殊字符： * (一个星号)</span></a></h3><ul><li>在一个字符串片段中匹配任意数量的字符，包括零个匹配。</li><li>对于匹配单级目录下的文件很有用</li></ul><p><strong>示例</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 匹配 scripts 目录下所有的 js 文件</span>
<span class="token string">&#39;scripts/*.js&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="特殊字符-两个星号" tabindex="-1"><a class="header-anchor" href="#特殊字符-两个星号"><span>特殊字符： ** (两个星号)</span></a></h3><ul><li>在多个字符串片段中匹配任意数量的字符，包括零个匹配。</li><li>对于匹配嵌套目录下的文件很有用</li></ul><p><strong>示例</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 匹配 scripts 目录下所有 js文件</span>
<span class="token string">&#39;scripts/**/*.js&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>** 会把目录也一起复制</p></blockquote><h3 id="特殊字符-取反" tabindex="-1"><a class="header-anchor" href="#特殊字符-取反"><span>特殊字符： ! (取反)</span></a></h3><ul><li></li></ul><ul><li><p>glob 数组中的取反（negative）glob 必须跟在一个非取反（non-negative）的 glob 后面</p></li><li><p>第一个 glob 匹配到一组匹配项，然后后面的取反 glob 删除这些匹配项中的一部分</p></li><li><p>如果取反 glob 只是由普通字符组成的字符串，则执行效率是最高的</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 排除 config 目录下的 js文件</span>
<span class="token function">src</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;src/**/*.js&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;!src/config/*.js&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>取反（negative） glob 可以作为对带有两个星号的 glob 的限制手段</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token punctuation">[</span><span class="token string">&#39;**/*.js&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;!node_modules/**/*&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul>`,17);function O(W,Z){const a=o("ExternalLinkIcon");return c(),l("div",null,[u,n("ul",null,[r,n("li",null,[s("通过修改 "),d,s(" 文件的扩展名来表明所用的编程语言并安装对应的转译模块 "),n("ul",null,[n("li",null,[s("对于 TypeScript，重命名为 "),k,s(" 并安装 "),n("a",v,[s("ts-node"),t(a)]),s(" 模块。")]),n("li",null,[s("对于 Babel，重命名为 "),m,s(" 并安装 "),n("a",b,[s("@babel/register"),t(a)]),s(" 模块")])])]),n("li",null,[s("针对此功能的高级知识和已支持的扩展名的完整列表，请参考 "),n("a",g,[s("gulpfile 转译"),t(a)]),s(" 文档。")])]),f,n("ul",null,[h,y,n("li",null,[s("由于某些平台的限制而不支持异步任务，因此 gulp 还提供了一个漂亮 "),n("a",j,[s("替代品"),t(a)])]),w]),_,n("h2",x,[n("a",q,[n("span",null,[n("a",G,[s("异步执行"),t(a)])])])]),B,n("ul",null,[X,n("li",null,[T,s(" 接受 "),n("a",E,[s("glob"),t(a)]),s(" 参数，并从文件系统中读取文件然后生成一个 "),n("a",A,[s("Node 流（stream)"),t(a)])]),S,N]),z,n("p",null,[P,s(" 也可以放在管道（pipeline）的中间，以根据给定的 glob 向流（stream）中添加文件。新加入的文件只对后续的转换可用。如果 "),n("a",J,[s("glob 匹配的文件与之前的有重复"),t(a)]),s("，仍然会再次添加文件。")]),C,n("p",null,[D,s(" 可以工作在三种模式下：缓冲（buffering）、流动（streaming）和空（empty）模式。这些模式可以通过对 "),I,s(" 的 "),M,s(" 和 "),R,s(),n("a",V,[s("参数"),t(a)]),s(" 进行设置。")]),F])}const K=e(i,[["render",O],["__file","gulp.html.vue"]]),Q=JSON.parse('{"path":"/%E5%A4%A7%E5%89%8D%E7%AB%AF/%E5%9F%BA%E7%A1%80/gulp.html","title":"Gulp","lang":"zh-CN","frontmatter":{"title":"Gulp","icon":"define","order":1,"category":["前端"],"tag":["模块化","Gulp"],"description":"快速入门 安装 gulp 命令行工具 在项目中使用 gulp 安装 gulp，作为开发时的依赖项 检查 gulp 版本 确保输出与下面的屏幕截图匹配，否则你可能需要执行本指南中的上述步骤。 image-20220907085306621image-20220907085306621 在项目根目录下创建 gulpfile 文件 在项目根目录下执行 gul...","head":[["meta",{"property":"og:url","content":"https://godx-18.github.io/%E5%A4%A7%E5%89%8D%E7%AB%AF/%E5%9F%BA%E7%A1%80/gulp.html"}],["meta",{"property":"og:site_name","content":"烜"}],["meta",{"property":"og:title","content":"Gulp"}],["meta",{"property":"og:description","content":"快速入门 安装 gulp 命令行工具 在项目中使用 gulp 安装 gulp，作为开发时的依赖项 检查 gulp 版本 确保输出与下面的屏幕截图匹配，否则你可能需要执行本指南中的上述步骤。 image-20220907085306621image-20220907085306621 在项目根目录下创建 gulpfile 文件 在项目根目录下执行 gul..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.githubusercontent.com/GodX-18/picBed/main/image-20220907085306621.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-24T09:13:37.000Z"}],["meta",{"property":"article:author","content":"GodX"}],["meta",{"property":"article:tag","content":"模块化"}],["meta",{"property":"article:tag","content":"Gulp"}],["meta",{"property":"article:modified_time","content":"2023-03-24T09:13:37.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Gulp\\",\\"image\\":[\\"https://raw.githubusercontent.com/GodX-18/picBed/main/image-20220907085306621.png\\",\\"https://raw.githubusercontent.com/GodX-18/picBed/main/image-20220907090250242.png\\",\\"https://raw.githubusercontent.com/GodX-18/picBed/main/image-20220907093015657.png\\",\\"https://raw.githubusercontent.com/GodX-18/picBed/main/image-20220907095505143.png\\",\\"https://raw.githubusercontent.com/GodX-18/picBed/main/image-20220907095729071.png\\"],\\"dateModified\\":\\"2023-03-24T09:13:37.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"GodX\\",\\"url\\":\\"https://github.com/GodX-18\\"}]}"]]},"headers":[{"level":2,"title":"快速入门","slug":"快速入门","link":"#快速入门","children":[{"level":3,"title":"安装 gulp 命令行工具","slug":"安装-gulp-命令行工具","link":"#安装-gulp-命令行工具","children":[]},{"level":3,"title":"在项目中使用 gulp","slug":"在项目中使用-gulp","link":"#在项目中使用-gulp","children":[]}]},{"level":2,"title":"JavaScript 和 Gulpfile","slug":"javascript-和-gulpfile","link":"#javascript-和-gulpfile","children":[{"level":3,"title":"Gulpfile 详解","slug":"gulpfile-详解","link":"#gulpfile-详解","children":[]},{"level":3,"title":"Gulpfile 转译","slug":"gulpfile-转译","link":"#gulpfile-转译","children":[]},{"level":3,"title":"Gulpfile 分割","slug":"gulpfile-分割","link":"#gulpfile-分割","children":[]}]},{"level":2,"title":"创建任务","slug":"创建任务","link":"#创建任务","children":[{"level":3,"title":"导出任务","slug":"导出任务","link":"#导出任务","children":[]},{"level":3,"title":"组合任务","slug":"组合任务","link":"#组合任务","children":[]}]},{"level":2,"title":"异步执行","slug":"异步执行","link":"#异步执行","children":[]},{"level":2,"title":"处理文件","slug":"处理文件","link":"#处理文件","children":[{"level":3,"title":"向流（stream）中添加文件","slug":"向流-stream-中添加文件","link":"#向流-stream-中添加文件","children":[]},{"level":3,"title":"分阶段输出","slug":"分阶段输出","link":"#分阶段输出","children":[]},{"level":3,"title":"模式：流动（streaming）、缓冲（buffered）和空（empty）模式","slug":"模式-流动-streaming-、缓冲-buffered-和空-empty-模式","link":"#模式-流动-streaming-、缓冲-buffered-和空-empty-模式","children":[]}]},{"level":2,"title":"Glob 详解","slug":"glob-详解","link":"#glob-详解","children":[{"level":3,"title":"字符串片段与分隔符","slug":"字符串片段与分隔符","link":"#字符串片段与分隔符","children":[]},{"level":3,"title":"特殊字符： * (一个星号)","slug":"特殊字符-一个星号","link":"#特殊字符-一个星号","children":[]},{"level":3,"title":"特殊字符： ** (两个星号)","slug":"特殊字符-两个星号","link":"#特殊字符-两个星号","children":[]},{"level":3,"title":"特殊字符： ! (取反)","slug":"特殊字符-取反","link":"#特殊字符-取反","children":[]}]}],"git":{"createdTime":1678348093000,"updatedTime":1679649217000,"contributors":[{"name":"GodX","email":"1046529973@qq.com","commits":2}]},"readingTime":{"minutes":9.41,"words":2824},"filePathRelative":"大前端/基础/gulp.md","localizedDate":"2023年3月9日","excerpt":"<h2>快速入门</h2>\\n<h3>安装 gulp 命令行工具</h3>\\n<div class=\\"language-bash\\" data-ext=\\"sh\\" data-title=\\"sh\\"><pre class=\\"language-bash\\"><code><span class=\\"token function\\">npm</span> i gulp-cli <span class=\\"token parameter variable\\">-g</span>\\n</code></pre></div><h3>在项目中使用 gulp</h3>\\n<ol>\\n<li>\\n<p>安装 gulp，作为开发时的依赖项</p>\\n<div class=\\"language-bash\\" data-ext=\\"sh\\" data-title=\\"sh\\"><pre class=\\"language-bash\\"><code><span class=\\"token function\\">npm</span> <span class=\\"token function\\">install</span> --save-dev gulp\\n</code></pre></div></li>\\n<li>\\n<p>检查 gulp 版本</p>\\n<div class=\\"language-bash\\" data-ext=\\"sh\\" data-title=\\"sh\\"><pre class=\\"language-bash\\"><code>gulp <span class=\\"token parameter variable\\">--version</span>\\n</code></pre></div><p>确保输出与下面的屏幕截图匹配，否则你可能需要执行本指南中的上述步骤。</p>\\n<figure><img src=\\"https://raw.githubusercontent.com/GodX-18/picBed/main/image-20220907085306621.png\\" alt=\\"image-20220907085306621\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>image-20220907085306621</figcaption></figure>\\n</li>\\n<li>\\n<p>在项目根目录下创建 gulpfile 文件</p>\\n<div class=\\"language-javascript\\" data-ext=\\"js\\" data-title=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">function</span> <span class=\\"token function\\">defaultTask</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">cb</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token comment\\">// place code for your default task here</span>\\n  <span class=\\"token function\\">cb</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\nexports<span class=\\"token punctuation\\">.</span>default <span class=\\"token operator\\">=</span> defaultTask\\n</code></pre></div></li>\\n<li>\\n<p>在项目根目录下执行 gulp 命令</p>\\n<div class=\\"language-bash\\" data-ext=\\"sh\\" data-title=\\"sh\\"><pre class=\\"language-bash\\"><code><span class=\\"token comment\\">## exports.default 的命令</span>\\ngulp \\n<span class=\\"token comment\\">## 运行多个任务</span>\\ngulp <span class=\\"token operator\\">&lt;</span>task<span class=\\"token operator\\">&gt;</span> <span class=\\"token operator\\">&lt;</span>othertask<span class=\\"token operator\\">&gt;</span>\\n</code></pre></div><p>控制台输出一下结果，代表执行任务成功</p>\\n<figure><img src=\\"https://raw.githubusercontent.com/GodX-18/picBed/main/image-20220907090250242.png\\" alt=\\"image-20220907090250242\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>image-20220907090250242</figcaption></figure>\\n</li>\\n</ol>","autoDesc":true}');export{K as comp,Q as data};
