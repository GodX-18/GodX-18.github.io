import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as l,c as i,b as n,e as s,d as e,a}from"./app-oXp7PBbS.js";const c={},u=a('<h2 id="脚手架工具" tabindex="-1"><a class="header-anchor" href="#脚手架工具"><span>脚手架工具</span></a></h2><h3 id="内容概要" tabindex="-1"><a class="header-anchor" href="#内容概要"><span>内容概要</span></a></h3><ul><li>脚手架的作用</li><li>常用的脚手架工具</li><li>通用脚手架工具解剖</li><li>开发一款脚手架</li></ul><h3 id="脚手架的作用" tabindex="-1"><a class="header-anchor" href="#脚手架的作用"><span>脚手架的作用</span></a></h3><ul><li>快速搭建项目</li><li>创建项目基础结构、提供项目规范和约定</li></ul><h3 id="常用的脚手架工具" tabindex="-1"><a class="header-anchor" href="#常用的脚手架工具"><span>常用的脚手架工具</span></a></h3><p><strong>服务于特定框架的脚手架工具</strong></p><ul><li>vue-cli</li><li>create-react-app</li><li>angular-cli</li></ul><p><strong>通用脚手架工具</strong></p><ul><li>Yeoman</li></ul><p><strong>创建特定类型的脚手架</strong></p><ul><li>Plop</li></ul><h2 id="yeoman" tabindex="-1"><a class="header-anchor" href="#yeoman"><span>Yeoman</span></a></h2><h3 id="基本介绍" tabindex="-1"><a class="header-anchor" href="#基本介绍"><span>基本介绍</span></a></h3><p>是一个通用的脚手架系统，允许创建任何类型的应用程序。它允许快速启动新项目并简化现有项目的维护。</p><h3 id="基本使用" tabindex="-1"><a class="header-anchor" href="#基本使用"><span>基本使用</span></a></h3>',16),r=a(`<li><p>在全局范围安装 yo</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> i yo <span class="token parameter variable">-g</span> <span class="token comment">## yarn add yo global</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li>`,1),d=n("br",null,null,-1),k={href:"https://yeoman.io/generators/",target:"_blank",rel:"noopener noreferrer"},m=n("code",null,"yo",-1),v=n("code",null,"webapp",-1),g=a(`<div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> i generator-node <span class="token parameter variable">-g</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,1),b=a(`<li><p>通过 yo 运行 generator</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>yo <span class="token function">node</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li>`,1),h=a(`<h3 id="通过-yeoman-的-sub-generator-生成一些配置文件" tabindex="-1"><a class="header-anchor" href="#通过-yeoman-的-sub-generator-生成一些配置文件"><span>通过 Yeoman 的 sub-generator 生成一些配置文件</span></a></h3><ul><li>使用场景：在现有的项目中，安装一些配置文件</li><li>如何使用：查看对应 generator 文档中 的 sub-generator 选项，例如 generator-node 中：</li></ul><figure><img src="https://raw.githubusercontent.com/GodX-18/picBed/main/image-20220912215159752.png" alt="image-20220912215159752" tabindex="0" loading="lazy"><figcaption>image-20220912215159752</figcaption></figure><p>运行对应的 sub-generator 生产你需要的配置文件，例如：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>yo node:cli
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="常规使用步骤" tabindex="-1"><a class="header-anchor" href="#常规使用步骤"><span>常规使用步骤</span></a></h3><ol><li>明确你的需求</li><li>找到合适的 Generator</li><li>全局范围安装找到的 Generator</li><li>通过 Yo 运行对应的 Generator</li><li>通过 Yo 运行 对应的 Generator</li><li>通过命令行交互填写选项</li><li>生产你所需要的项目结构</li></ol><h3 id="自定义-generator" tabindex="-1"><a class="header-anchor" href="#自定义-generator"><span>自定义 Generator</span></a></h3><p><strong>使用场景</strong></p><ul><li>市面上的 Generator 是比较通用的，不包含一些业务代码</li><li>基于现有的 Generator 进行二次封装，例如：基于 vue-cli 上加上 axios</li></ul><p><strong>创建 Generator 模块</strong></p><ul><li>基于 Yeoman 搭建自己的脚手架</li><li>Generator 本质上就是一个 NPM 模块</li></ul><p><strong>Generator 的基本结构</strong></p><p>标绿色的就代表是 sub-generator 存放的位置</p><figure><img src="https://raw.githubusercontent.com/GodX-18/picBed/main/image-20220912223252131.png" alt="image-20220912223252131" tabindex="0" loading="lazy"><figcaption>image-20220912223252131</figcaption></figure><p><strong>具体实现</strong></p><ol><li><p>新建一个目录 generator-sample</p></li><li><p>在目录下初始化项目</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">yarn</span> init
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>安装一个用于创建自定义 Generator 的 工具包</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">yarn</span> <span class="token function">add</span> yeoman-generator
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>在根目录下新建 generator/app/index.js 中写入以下代码</p><ul><li>此文件作为 Generator 的核心入口</li><li>需要导出一个继承自 Yeoman Generator 的类型</li><li>Yeoman Generator 在工作时会自动调用我们在此类型中定义的一些生命周期方法</li><li>我们在这些方法中可以通过调用父类提供的一些工具方法实现一些功能，例如文件写入</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">extends</span> Generator <span class="token punctuation">{</span>
    <span class="token function">writing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      	<span class="token comment">// Yeoman 自动在生成文件阶段调用此方法</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>fs<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">destinationPath</span><span class="token punctuation">(</span><span class="token string">&quot;temp.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 				Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>通过 yarn link 将 自定义 generator 暴露到全局环境中</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">yarn</span> <span class="token function">link</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>测试：新建一个目录，在目录下运行以下命令</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>yo sample
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>你会发现，目录下多了一个 <code>temp.txt</code>文件，到此一个基本的自定义 Generator 流程已实现</p></li></ol><p><strong>根据模版创建文件</strong></p><p>这里接着上面创建的自定义 Generator 目录继续开发</p><ol><li>在 generators/app/templates 目录下定义你的模版文件，例如新建一个 foo.txt 文件<div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>这是一个模板文件
内部可以使用 EJS 模板标记输出数据
例如：&lt;%= title %&gt;

其他的 EJS 语法也支持

&lt;% if (success) { %&gt;
哈哈哈
&lt;% }%&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol>`,20),y={href:"https://ejs.bootcss.com/",target:"_blank",rel:"noopener noreferrer"},q=n("li",null,"使用模版语法可以代替 fs.write 语法向项目写入文件",-1),f=n("li",null,"相对于手动创建每一个文件，模版的方式大大提高了效率",-1),w=a(`<ol start="2"><li>修改 generators/app/index.js 文件</li></ol><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> Generator <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;yeoman-generator&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">extends</span> Generator <span class="token punctuation">{</span>
    <span class="token function">writing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// fs.write 写入文件 ----------------------------------------------------------------</span>
        <span class="token comment">// this.fs.write(this.destinationPath(&quot;temp.txt&quot;), Math.random().toString());</span>

        <span class="token comment">// 通过模板方式写入文件到目标目录 ----------------------------------------------------------------</span>
        <span class="token comment">// 模板文件路径</span>
        <span class="token keyword">const</span> tmpl <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">templatePath</span><span class="token punctuation">(</span><span class="token string">&quot;foo.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 输出目标路径</span>
        <span class="token keyword">const</span> output <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">destinationPath</span><span class="token punctuation">(</span><span class="token string">&quot;foo.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 模板数据上下文</span>
        <span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&quot;Hello zce~&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">success</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

        <span class="token keyword">this</span><span class="token punctuation">.</span>fs<span class="token punctuation">.</span><span class="token function">copyTpl</span><span class="token punctuation">(</span>tmpl<span class="token punctuation">,</span> output<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>通过 yarn link 将 自定义 generator 暴露到全局环境中</li></ol><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">yarn</span> <span class="token function">link</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="4"><li>测试：新建一个目录，在目录下运行以下命令</li></ol><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>yo sample
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>你会发现，目录下多了一个 <code>foo.txt</code>文件，到此更具模版创建文件流程已实现<br><img src="https://raw.githubusercontent.com/GodX-18/picBed/main/image-20220913112812993.png" alt="image-20220913112812993" loading="lazy"></p><h3 id="接收用户输入" tabindex="-1"><a class="header-anchor" href="#接收用户输入"><span>接收用户输入</span></a></h3><ul><li>使用命令行交互功能，接收用户的输入，比如使用 vue-cli 时，会让你选择一些选项</li><li>使用 yeoman-generator 类提供的 prompt 方法来实现</li></ul><p>现在让我们来修改 generators/app/index.js 文件</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> Generator <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;yeoman-generator&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">extends</span> Generator <span class="token punctuation">{</span>
    <span class="token function">prompting</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Yeoman 在询问用户环节会自动调用此方法</span>
        <span class="token comment">// 在此方法中可以调用父类的 prompt() 方法发出对用户的命令行询问</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
            <span class="token punctuation">{</span>
                <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;input&quot;</span><span class="token punctuation">,</span>
                <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;title&quot;</span><span class="token punctuation">,</span>
                <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&quot;Your project name&quot;</span><span class="token punctuation">,</span>
                <span class="token keyword">default</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>appname <span class="token comment">// appname 为项目生成目录名称</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span>
                <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;input&quot;</span><span class="token punctuation">,</span>
                <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;success&quot;</span><span class="token punctuation">,</span>
                <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&quot;是否大笑？&quot;</span><span class="token punctuation">,</span>
                <span class="token keyword">default</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token comment">// appname 为项目生成目录名称</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">answers</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token comment">// answers =&gt; { name: &#39;user input value&#39; }</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>answers <span class="token operator">=</span> answers<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">writing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 模板文件路径</span>
        <span class="token keyword">const</span> tmpl <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">templatePath</span><span class="token punctuation">(</span><span class="token string">&quot;foo.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 输出目标路径</span>
        <span class="token keyword">const</span> output <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">destinationPath</span><span class="token punctuation">(</span><span class="token string">&quot;foo.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 模板数据上下文</span>
        <span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>answers<span class="token punctuation">;</span>

        <span class="token keyword">this</span><span class="token punctuation">.</span>fs<span class="token punctuation">.</span><span class="token function">copyTpl</span><span class="token punctuation">(</span>tmpl<span class="token punctuation">,</span> output<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在可以新建一个目录，在目录下运行以下命令来看一下效果</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>yo sample
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以看到控制台发出以下询问</p><figure><img src="https://raw.githubusercontent.com/GodX-18/picBed/main/image-20220913114348349.png" alt="image-20220913114348349" tabindex="0" loading="lazy"><figcaption>image-20220913114348349</figcaption></figure><h3 id="vue-generator-案例" tabindex="-1"><a class="header-anchor" href="#vue-generator-案例"><span>Vue Generator 案例</span></a></h3><ol><li><p>首先，定义一个你想要的 vue 项目结构，例如<br><img src="https://raw.githubusercontent.com/GodX-18/picBed/main/image-20220913115212163.png" alt="image-20220913115212163" loading="lazy"></p></li><li><p>接着我们新建一个 Generator 用来生成你想要的项目结构</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">## 生成一个新的目录</span>
<span class="token function">mkdir</span> generator-zx-vue
<span class="token comment">## 进入到目录下</span>
<span class="token builtin class-name">cd</span> generator-zx-vue<span class="token punctuation">\\</span>
<span class="token comment">## 初始化 pacakge.json 文件</span>
<span class="token function">yarn</span> init
<span class="token comment">## 安装 yeoman 依赖</span>
<span class="token function">yarn</span> <span class="token function">add</span> yeoman-generator
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>将你提前准备的模版代码复制到根目录下的 generators/app/templates 目录下</p></li><li><p>接着编写根目录下的 generators/app/index.js 文件</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> Generator <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;yeoman-generator&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">extends</span> Generator <span class="token punctuation">{</span>
    <span class="token function">prompting</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
            <span class="token punctuation">{</span>
                <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;input&quot;</span><span class="token punctuation">,</span>
                <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span>
                <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&quot;Your project name&quot;</span><span class="token punctuation">,</span>
                <span class="token keyword">default</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>appname <span class="token comment">// appname 为项目生成目录名称</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">answers</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>answers <span class="token operator">=</span> answers<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">writing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 把每一个文件都通过模板转换到目标路径</span>
        <span class="token keyword">const</span> templates <span class="token operator">=</span> <span class="token punctuation">[</span>
            <span class="token string">&quot;.browserslistrc&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;.editorconfig&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;.env.development&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;.env.production&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;.eslintrc.js&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;.gitignore&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;babel.config.js&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;package.json&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;postcss.config.js&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;README.md&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;public/favicon.ico&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;public/index.html&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;src/App.vue&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;src/main.js&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;src/router.js&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;src/assets/logo.png&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;src/components/HelloWorld.vue&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;src/store/actions.js&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;src/store/getters.js&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;src/store/index.js&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;src/store/mutations.js&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;src/store/state.js&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;src/utils/request.js&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;src/views/About.vue&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;src/views/Home.vue&quot;</span>
        <span class="token punctuation">]</span><span class="token punctuation">;</span>
        templates<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>fs<span class="token punctuation">.</span><span class="token function">copyTpl</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">templatePath</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">destinationPath</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>answers<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>修改模版代码中的需要用变量替换的插槽，例如 public/index.html 文件中的 title：</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>utf-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>X-UA-Compatible<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>IE=edge<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width,initial-scale=1.0<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>icon<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>&lt;%%= BASE_URL %&gt;favicon.ico<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>&lt;%= name %&gt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>noscript</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">&gt;</span></span>We&#39;re sorry but my-vue-project doesn&#39;t work properly without JavaScript enabled. Please enable it to continue.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>noscript</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- built files will be auto injected --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>EJS 语法中 &lt;%%= xxx %&gt; 生成后转义为 &lt;%= x x x%&gt;，不进行变量替换</p></blockquote></li><li><p>通过 yarn link 将 自定义 generator 暴露到全局环境中</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">yarn</span> <span class="token function">link</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>现在可以新建一个目录，在目录下运行以下命令来看一下效果</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">## 新建目录</span>
<span class="token function">mkdir</span> project

<span class="token comment">## 通过 yeoman 运行我们的脚手架，这边的脚手架名称根据你新建Generator 的目录来决定，例如 generator-zx-vue 就是 zx-vue</span>
yo zx-vue
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>运行后，如果不出意外的话，你会发现目录下多了我们之前定义的模版代码，并且 index.html 中的 title 也被替换成我们输入的名称</p></li></ol><h3 id="发布-generator" tabindex="-1"><a class="header-anchor" href="#发布-generator"><span>发布 Generator</span></a></h3><p>因为 generator 本质上就是一个 npm 模块，所以我们可以通过 <code>npm publish</code>命令将我们的 generator 发布到 npm 平台上</p><ol><li><p>首先，初始化项目仓库</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> init
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>接着，添加 .gitignore</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> <span class="token string">&#39;node_modules&#39;</span> <span class="token operator">&gt;</span> .gitignore
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>然后将本地仓库提交到远程仓库</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">## 存储变动</span>
<span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>
<span class="token comment">## 提交变动</span>
<span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&#39;init&#39;</span>
<span class="token comment">## 链接到远程仓库</span>
<span class="token function">git</span> remote <span class="token function">add</span> origin 你的仓库地址
<span class="token comment">## 同步到远程仓库</span>
<span class="token function">git</span> push <span class="token parameter variable">-u</span> origin master  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>发布到 npmjs 平台</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> publish
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>发布过程可能会报错，更据报错信息自行搜索解决</p></blockquote></li></ol><h2 id="plop" tabindex="-1"><a class="header-anchor" href="#plop"><span>Plop</span></a></h2><ul><li>一个小而美的脚手架工具</li><li>类似于 yeoman 中 sub-generator</li></ul><p><strong>使用场景</strong></p><ul><li>自动化地生成一些通用的模版代码，不需要手动创建</li></ul><p><strong>具体使用</strong></p><ol><li><p>首先安装 plop 到项目的开发依赖中：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">yarn</span> <span class="token function">add</span> plop <span class="token parameter variable">--dev</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>在项目根目录下新建 plopfile.js 文件，在 plopfile.js 文件中定义脚手架任务</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// Plop 入口文件，需要导出一个函数</span>
<span class="token comment">// 此函数接收一个 plop 对象，用于创建生成器任务</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">plop</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  plop<span class="token punctuation">.</span><span class="token function">setGenerator</span><span class="token punctuation">(</span><span class="token string">&#39;component&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">description</span><span class="token operator">:</span> <span class="token string">&#39;create a component&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">prompts</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;input&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&#39;component name&#39;</span><span class="token punctuation">,</span>
        <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">&#39;MyComponent&#39;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token literal-property property">actions</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;add&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 代表添加文件</span>
        <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;src/components/{{name}}/{{name}}.js&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">templateFile</span><span class="token operator">:</span> <span class="token string">&#39;plop-templates/component.hbs&#39;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;add&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 代表添加文件</span>
        <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;src/components/{{name}}/{{name}}.css&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">templateFile</span><span class="token operator">:</span> <span class="token string">&#39;plop-templates/component.css.hbs&#39;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;add&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 代表添加文件</span>
        <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;src/components/{{name}}/{{name}}.test.js&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">templateFile</span><span class="token operator">:</span> <span class="token string">&#39;plop-templates/component.test.hbs&#39;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>在根目录下新建 <code>plop-templates</code> 目录，在目录下编写用于生成特定类型文件的模版<br><img src="https://raw.githubusercontent.com/GodX-18/picBed/main/image-20220913171410415.png" alt="image-20220913171410415" loading="lazy"></p><div class="language-handlebars line-numbers-mode" data-ext="handlebars" data-title="handlebars"><pre class="language-handlebars"><code>// component.css
.<span class="token handlebars language-handlebars"><span class="token delimiter punctuation">{{</span><span class="token variable">name</span><span class="token delimiter punctuation">}}</span></span> {
  
}
// component.js
import React from &#39;react&#39;;

export default () =&gt; (
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token handlebars language-handlebars"><span class="token delimiter punctuation">{{</span><span class="token variable">name</span><span class="token delimiter punctuation">}}</span></span><span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token handlebars language-handlebars"><span class="token delimiter punctuation">{{</span><span class="token variable">name</span><span class="token delimiter punctuation">}}</span></span> Component<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
)

// component.test.js
import React from &#39;react&#39;;
import ReactDOM from &#39;react-dom&#39;;
import <span class="token handlebars language-handlebars"><span class="token delimiter punctuation">{{</span><span class="token variable">name</span><span class="token delimiter punctuation">}}</span></span> from &#39;./<span class="token handlebars language-handlebars"><span class="token delimiter punctuation">{{</span><span class="token variable">name</span><span class="token delimiter punctuation">}}</span></span>&#39;;

it(&#39;renders without crashing&#39;, () =&gt; {
  const div = document.createElement(&#39;div&#39;);
  ReactDOM.render(<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token handlebars language-handlebars"><span class="token delimiter punctuation">{{</span><span class="token variable">name</span><span class="token delimiter punctuation">}}</span></span></span> <span class="token punctuation">/&gt;</span></span>, div);
  ReactDOM.unmountComponentAtNode(div);
});
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>通过 Plop 提供的 CLI 运行脚手架任务</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">yarn</span> plop component
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>更具提示输入组件名称<br><img src="https://raw.githubusercontent.com/GodX-18/picBed/main/image-20220913172517912.png" alt="image-20220913172517912" loading="lazy"></p></li></ol><h2 id="脚手架的工作原理" tabindex="-1"><a class="header-anchor" href="#脚手架的工作原理"><span>脚手架的工作原理</span></a></h2><ul><li><p>脚手架其实就是一个 node-cli 应用</p></li><li><p><em>脚手架的工作过程：</em></p><p><em>1. 通过命令行交互询问用户问题</em></p><p><em>2. 根据用户回答的结果生成文件</em></p></li><li><p>接下来让我们来手写一个脚手架</p></li></ul><ol><li><p>初始化一个项目</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">mkdir</span> cli-self
<span class="token function">yarn</span> init
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>修改 package.json 文件</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;cli-study&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1.0.0&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;main&quot;</span><span class="token operator">:</span> <span class="token string">&quot;index.js&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;bin&quot;</span><span class="token operator">:</span> <span class="token string">&quot;cli.js&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;license&quot;</span><span class="token operator">:</span> <span class="token string">&quot;MIT&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;module&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;dependencies&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;ejs&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^3.1.8&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;inquirer&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^9.1.1&quot;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>在更目录下新建 templates 目录，在目录下新建一个 index.html 文件</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1.0<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>X-UA-Compatible<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ie=edge<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>&lt;%= name %&gt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
  
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>在根目录下新建 <code>cli.js</code> 文件</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>##<span class="token operator">!</span><span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>env node

<span class="token comment">// Node CLI 应用入口文件必须要有这样的文件头</span>
<span class="token comment">// 如果是 Linux 或者 macOS 系统下还需要修改此文件的读写权限为 755</span>
<span class="token comment">// 具体就是通过 chmod 755 cli.js 实现修改</span>

<span class="token comment">// 脚手架的工作过程：</span>
<span class="token comment">// 1. 通过命令行交互询问用户问题</span>
<span class="token comment">// 2. 根据用户回答的结果生成文件</span>

<span class="token keyword">import</span> path <span class="token keyword">from</span> <span class="token string">&quot;path&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> fileURLToPath <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;url&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> fs <span class="token keyword">from</span> <span class="token string">&quot;fs&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> inquirer <span class="token keyword">from</span> <span class="token string">&quot;inquirer&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> ejs <span class="token keyword">from</span> <span class="token string">&quot;ejs&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> __filename <span class="token operator">=</span> <span class="token function">fileURLToPath</span><span class="token punctuation">(</span><span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> __dirname <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">dirname</span><span class="token punctuation">(</span>__filename<span class="token punctuation">)</span><span class="token punctuation">;</span>

inquirer
    <span class="token punctuation">.</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
            <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;input&quot;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&quot;你的项目名称?&quot;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">answers</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// 模版文件的目录地址</span>
        <span class="token keyword">const</span> tempDir <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;templates&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 目标目录地址</span>
        <span class="token keyword">const</span> destDir <span class="token operator">=</span> process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 将模板下的文件全部转换到目标目录</span>
        fs<span class="token punctuation">.</span><span class="token function">readdir</span><span class="token punctuation">(</span>tempDir<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> files</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> err<span class="token punctuation">;</span>
            files<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">file</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                <span class="token comment">// 通过模板引擎渲染文件</span>
                ejs<span class="token punctuation">.</span><span class="token function">renderFile</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>tempDir<span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">,</span> answers<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> result</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> err<span class="token punctuation">;</span>

                    <span class="token comment">// 将结果写入目标文件路径</span>
                    fs<span class="token punctuation">.</span><span class="token function">writeFileSync</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>destDir<span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>在终端中输入以下命令暴露当前模块</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">yarn</span> <span class="token function">link</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>新建一个目录，输入脚手架名称进行测试</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>cli-self
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol>`,29);function x(j,_){const t=o("ExternalLinkIcon");return l(),i("div",null,[u,n("ol",null,[r,n("li",null,[n("p",null,[s("安装对应的 generator"),d,n("a",k,[s("在Yeoman的网站"),e(t)]),s("上搜索它们或在运行时选择“安装生成器”菜单选项"),m,s("。要安装"),v,s("生成器，例如：")]),g]),b]),h,n("ul",null,[n("li",null,[s("模版文件内部可以使用 EJS 模板标记输出数据，具体语法查看 "),n("a",y,[s("https://ejs.bootcss.com/"),e(t)])]),q,f]),w])}const B=p(c,[["render",x],["__file","脚手架工具.html.vue"]]),A=JSON.parse('{"path":"/%E5%A4%A7%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96%E5%AE%9E%E6%88%98/%E8%84%9A%E6%89%8B%E6%9E%B6%E5%B7%A5%E5%85%B7.html","title":"脚手架工具","lang":"zh-CN","frontmatter":{"title":"脚手架工具","icon":"edit","date":"2022-09-28T00:00:00.000Z","order":2,"category":["前端"],"tag":["前端工程化"],"description":"脚手架工具 内容概要 脚手架的作用 常用的脚手架工具 通用脚手架工具解剖 开发一款脚手架 脚手架的作用 快速搭建项目 创建项目基础结构、提供项目规范和约定 常用的脚手架工具 服务于特定框架的脚手架工具 vue-cli create-react-app angular-cli 通用脚手架工具 Yeoman 创建特定类型的脚手架 Plop Yeoman 基...","head":[["meta",{"property":"og:url","content":"https://godx-18.github.io/%E5%A4%A7%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96%E5%AE%9E%E6%88%98/%E8%84%9A%E6%89%8B%E6%9E%B6%E5%B7%A5%E5%85%B7.html"}],["meta",{"property":"og:site_name","content":"烜"}],["meta",{"property":"og:title","content":"脚手架工具"}],["meta",{"property":"og:description","content":"脚手架工具 内容概要 脚手架的作用 常用的脚手架工具 通用脚手架工具解剖 开发一款脚手架 脚手架的作用 快速搭建项目 创建项目基础结构、提供项目规范和约定 常用的脚手架工具 服务于特定框架的脚手架工具 vue-cli create-react-app angular-cli 通用脚手架工具 Yeoman 创建特定类型的脚手架 Plop Yeoman 基..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.githubusercontent.com/GodX-18/picBed/main/image-20220912215159752.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-09T07:48:13.000Z"}],["meta",{"property":"article:author","content":"GodX"}],["meta",{"property":"article:tag","content":"前端工程化"}],["meta",{"property":"article:published_time","content":"2022-09-28T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-03-09T07:48:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"脚手架工具\\",\\"image\\":[\\"https://raw.githubusercontent.com/GodX-18/picBed/main/image-20220912215159752.png\\",\\"https://raw.githubusercontent.com/GodX-18/picBed/main/image-20220912223252131.png\\",\\"https://raw.githubusercontent.com/GodX-18/picBed/main/image-20220913112812993.png\\",\\"https://raw.githubusercontent.com/GodX-18/picBed/main/image-20220913114348349.png\\",\\"https://raw.githubusercontent.com/GodX-18/picBed/main/image-20220913115212163.png\\",\\"https://raw.githubusercontent.com/GodX-18/picBed/main/image-20220913171410415.png\\",\\"https://raw.githubusercontent.com/GodX-18/picBed/main/image-20220913172517912.png\\"],\\"datePublished\\":\\"2022-09-28T00:00:00.000Z\\",\\"dateModified\\":\\"2023-03-09T07:48:13.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"GodX\\",\\"url\\":\\"https://github.com/GodX-18\\"}]}"]]},"headers":[{"level":2,"title":"脚手架工具","slug":"脚手架工具","link":"#脚手架工具","children":[{"level":3,"title":"内容概要","slug":"内容概要","link":"#内容概要","children":[]},{"level":3,"title":"脚手架的作用","slug":"脚手架的作用","link":"#脚手架的作用","children":[]},{"level":3,"title":"常用的脚手架工具","slug":"常用的脚手架工具","link":"#常用的脚手架工具","children":[]}]},{"level":2,"title":"Yeoman","slug":"yeoman","link":"#yeoman","children":[{"level":3,"title":"基本介绍","slug":"基本介绍","link":"#基本介绍","children":[]},{"level":3,"title":"基本使用","slug":"基本使用","link":"#基本使用","children":[]},{"level":3,"title":"通过 Yeoman 的 sub-generator 生成一些配置文件","slug":"通过-yeoman-的-sub-generator-生成一些配置文件","link":"#通过-yeoman-的-sub-generator-生成一些配置文件","children":[]},{"level":3,"title":"常规使用步骤","slug":"常规使用步骤","link":"#常规使用步骤","children":[]},{"level":3,"title":"自定义 Generator","slug":"自定义-generator","link":"#自定义-generator","children":[]},{"level":3,"title":"接收用户输入","slug":"接收用户输入","link":"#接收用户输入","children":[]},{"level":3,"title":"Vue Generator 案例","slug":"vue-generator-案例","link":"#vue-generator-案例","children":[]},{"level":3,"title":"发布 Generator","slug":"发布-generator","link":"#发布-generator","children":[]}]},{"level":2,"title":"Plop","slug":"plop","link":"#plop","children":[]},{"level":2,"title":"脚手架的工作原理","slug":"脚手架的工作原理","link":"#脚手架的工作原理","children":[]}],"git":{"createdTime":1678348093000,"updatedTime":1678348093000,"contributors":[{"name":"GodX","email":"1046529973@qq.com","commits":1}]},"readingTime":{"minutes":9.34,"words":2803},"filePathRelative":"大前端/前端工程化实战/脚手架工具.md","localizedDate":"2022年9月28日","excerpt":"<h2>脚手架工具</h2>\\n<h3>内容概要</h3>\\n<ul>\\n<li>脚手架的作用</li>\\n<li>常用的脚手架工具</li>\\n<li>通用脚手架工具解剖</li>\\n<li>开发一款脚手架</li>\\n</ul>\\n<h3>脚手架的作用</h3>\\n<ul>\\n<li>快速搭建项目</li>\\n<li>创建项目基础结构、提供项目规范和约定</li>\\n</ul>\\n<h3>常用的脚手架工具</h3>\\n<p><strong>服务于特定框架的脚手架工具</strong></p>\\n<ul>\\n<li>vue-cli</li>\\n<li>create-react-app</li>\\n<li>angular-cli</li>\\n</ul>","autoDesc":true}');export{B as comp,A as data};
