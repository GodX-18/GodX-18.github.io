import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as p,c as t,a as i}from"./app-oXp7PBbS.js";const a={},r=i(`<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p>TypeScript（简称 TS）是微软公司开发的一种基于 JavaScript （简称 JS）语言的编程语言。</p><p>它的目的并不是创造一种全新语言，而是增强 JavaScript 的功能，使其更适合多人合作的企业级项目。</p><p>TypeScript 可以看成是 JavaScript 的超集（superset），即它继承了后者的全部语法，所有 JavaScript 脚本都可以当作 TypeScript 脚本（但是可能会报错），此外它再增加了一些自己的语法。</p><p>TypeScript 对 JavaScript 添加的最主要部分，就是一个独立的类型系统。</p><h2 id="类型的概念" tabindex="-1"><a class="header-anchor" href="#类型的概念"><span>类型的概念</span></a></h2><p>类型（type）指的是一组具有相同特征的值。如果两个值具有某种共同的特征，就可以说，它们属于同一种类型。</p><h2 id="动态类型与静态类型" tabindex="-1"><a class="header-anchor" href="#动态类型与静态类型"><span>动态类型与静态类型</span></a></h2><p><strong>什么是动态类型</strong></p><p>可以随意改变变量类型就是动态类型</p><p><strong>什么是静态类型</strong></p><p>什么变量的类型后，类型不可以改变</p><h2 id="静态类型的优点" tabindex="-1"><a class="header-anchor" href="#静态类型的优点"><span>静态类型的优点</span></a></h2><ol><li><p>有利于代码的静态分析</p><ul><li>有了静态类型，不必运行代码，就可以确定变量的类型，从而推断代码有没有错误。这就叫做代码的静态分析。</li><li>这对于大型项目非常重要，单单在开发阶段运行静态检查，就可以发现很多问题，避免交付有问题的代码，大大降低了线上风险</li></ul></li><li><p>有利于发现错误。</p><p>由于每个值、每个变量、每个运算符都有严格的类型约束，TypeScript 就能轻松发现拼写错误、语义错误和方法调用错误，节省程序员的时间。</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>let obj = { message: &#39;&#39; };
console.log(obj.messege); // 报错
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>上面示例中，不小心把<code>message</code>拼错了，写成<code>messege</code>。TypeScript 就会报错，指出没有定义过这个属性。JavaScript 遇到这种情况是不报错的。</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>const a = 0;
const b = true;
const result = a + b; // 报错
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面示例是合法的 JavaScript 代码，但是没有意义，不应该将数值<code>a</code>与布尔值<code>b</code>相加。TypeScript 就会直接报错，提示运算符<code>+</code>不能用于数值和布尔值的相加。</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>function hello() {
  return &#39;hello world&#39;;
}

hello().find(&#39;hello&#39;); // 报错
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面示例中，<code>hello()</code>返回的是一个字符串，TypeScript 发现字符串没有<code>find()</code>方法，所以报错了。如果是 JavaScript，只有到运行阶段才会报错。</p></li><li><p>更好的 IDE 支持，做到语法提示和自动补全。</p><p>IDE（集成开发环境，比如 VSCode）一般都会利用类型信息，提供语法提示功能（编辑器自动提示函数用法、参数等）和自动补全功能（只键入一部分的变量名或函数名，编辑器补全后面的部分）。</p></li><li><p>提供了代码文档</p><p>类型信息可以部分替代代码文档，解释应该如何使用这些代码，熟练的开发者往往只看类型，就能大致推断代码的作用。借助类型信息，很多工具能够直接生成文档。</p></li><li><p>有助于代码重构</p><p>修改他人的 JavaScript 代码，往往非常痛苦，项目越大越痛苦，因为不确定修改后是否会影响到其他部分的代码。</p><p>类型信息大大减轻了重构的成本。一般来说，只要函数或对象的参数和返回值保持类型不变，就能基本确定，重构后的代码也能正常运行。如果还有配套的单元测试，就完全可以放心重构。越是大型的、多人合作的项目，类型信息能够提供的帮助越大。</p><p>综上所述，TypeScript 有助于提高代码质量，保证代码安全，更适合用在大型的企业级项目。这就是为什么大量 JavaScript 项目转成 TypeScript 的原因。</p></li></ol><h2 id="静态类型的缺点" tabindex="-1"><a class="header-anchor" href="#静态类型的缺点"><span>静态类型的缺点</span></a></h2><p>静态类型也存在一些缺点。</p><ol><li><p>丧失了动态类型的代码灵活性。</p><p>动态类型有非常高的灵活性，给予程序员很大的自由，静态类型将这些灵活性都剥夺了。</p></li><li><p>增加了编程工作量。</p><p>有了类型之后，程序员不仅需要编写功能，还需要编写类型声明，确保类型正确。这增加了不少工作量，有时会显著拖长项目的开发时间。</p></li><li><p>更高的学习成本。</p><p>类型系统通常比较复杂，要学习的东西更多，要求开发者付出更高的学习成本。</p></li><li><p>引入了独立的编译步骤。</p><p>原生的 JavaScript 代码，可以直接在 JavaScript 引擎运行。添加类型系统以后，就多出了一个单独的编译步骤，检查类型是否正确，并将 TypeScript 代码转成 JavaScript 代码，这样才能运行。</p></li><li><p>兼容性问题。</p><p>TypeScript 依赖 JavaScript 生态，需要用到很多外部模块。但是，过去大部分 JavaScript 项目都没有做 TypeScript 适配，虽然可以自己动手做适配，不过使用时难免还是会有一些兼容性问题。</p></li></ol><p>总的来说，这些缺点使得 TypeScript 不一定适合那些小型的、短期的个人项目。</p><h2 id="typescript-的历史" tabindex="-1"><a class="header-anchor" href="#typescript-的历史"><span>TypeScript 的历史</span></a></h2><p>下面简要介绍 TypeScript 的发展历史。</p><p>2012年，微软公司宣布推出 TypeScript 语言，设计者是著名的编程语言设计大师 Anders Hejlsberg，他也是 C# 和 .NET 的设计师。</p><p>微软推出这门语言的主要目的，是让 JavaScript 程序员可以参与 Windows 8 应用程序的开发。</p><p>当时，Windows 8 即将发布，它的应用程序开发除了使用 C# 和 Visual Basic，还可以使用 HTML + JavaScript。微软希望，TypeScript 既能让 JavaScript 程序员快速上手，也能让 .Net 程序员感到熟悉。</p><p>这就是说，TypeScript 的最初动机是减少 .NET 程序员的转移和学习成本。所以，它的很多语法概念跟 .NET 很类似。</p><p>另外，TypeScript 是一个开源项目，接受社区的参与，核心的编译器采用 Apache 2.0 许可证。微软希望通过这种做法，迅速提高这门语言在社区的接受度。</p><p>2013年，微软的 Visual Studio 2013 开始内置支持 TypeScript 语言。</p><p>2014年，TypeScript 1.0 版本发布。同年，代码仓库搬到了 GitHub。</p><p>2016年，TypeScript 2.0 版本发布，引入了很多重大的语法功能。</p><p>2018年，TypeScript 3.0 版本发布。</p><p>2020年，TypeScript 4.0 版本发布。</p><p>2023年，TypeScript 5.0 版本发布。</p>`,31),c=[r];function l(n,s){return p(),t("div",null,c)}const S=e(a,[["render",l],["__file","01-简介.html.vue"]]),v=JSON.parse('{"path":"/%E8%AF%AD%E8%A8%80/TypeScript/01-%E7%AE%80%E4%BB%8B.html","title":"简介","lang":"zh-CN","frontmatter":{"title":"简介","date":"2023-11-21T00:00:00.000Z","order":1,"category":["语言"],"tag":["TypeScript"],"description":"概述 TypeScript（简称 TS）是微软公司开发的一种基于 JavaScript （简称 JS）语言的编程语言。 它的目的并不是创造一种全新语言，而是增强 JavaScript 的功能，使其更适合多人合作的企业级项目。 TypeScript 可以看成是 JavaScript 的超集（superset），即它继承了后者的全部语法，所有 JavaSc...","head":[["meta",{"property":"og:url","content":"https://godx-18.github.io/%E8%AF%AD%E8%A8%80/TypeScript/01-%E7%AE%80%E4%BB%8B.html"}],["meta",{"property":"og:site_name","content":"烜"}],["meta",{"property":"og:title","content":"简介"}],["meta",{"property":"og:description","content":"概述 TypeScript（简称 TS）是微软公司开发的一种基于 JavaScript （简称 JS）语言的编程语言。 它的目的并不是创造一种全新语言，而是增强 JavaScript 的功能，使其更适合多人合作的企业级项目。 TypeScript 可以看成是 JavaScript 的超集（superset），即它继承了后者的全部语法，所有 JavaSc..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-11-22T00:58:07.000Z"}],["meta",{"property":"article:author","content":"GodX"}],["meta",{"property":"article:tag","content":"TypeScript"}],["meta",{"property":"article:published_time","content":"2023-11-21T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-11-22T00:58:07.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"简介\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-11-21T00:00:00.000Z\\",\\"dateModified\\":\\"2023-11-22T00:58:07.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"GodX\\",\\"url\\":\\"https://github.com/GodX-18\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"类型的概念","slug":"类型的概念","link":"#类型的概念","children":[]},{"level":2,"title":"动态类型与静态类型","slug":"动态类型与静态类型","link":"#动态类型与静态类型","children":[]},{"level":2,"title":"静态类型的优点","slug":"静态类型的优点","link":"#静态类型的优点","children":[]},{"level":2,"title":"静态类型的缺点","slug":"静态类型的缺点","link":"#静态类型的缺点","children":[]},{"level":2,"title":"TypeScript 的历史","slug":"typescript-的历史","link":"#typescript-的历史","children":[]}],"git":{"createdTime":1700614687000,"updatedTime":1700614687000,"contributors":[{"name":"GodX","email":"1046529973@qq.com","commits":1}]},"readingTime":{"minutes":5.47,"words":1642},"filePathRelative":"语言/TypeScript/01-简介.md","localizedDate":"2023年11月21日","excerpt":"<h2>概述</h2>\\n<p>TypeScript（简称 TS）是微软公司开发的一种基于 JavaScript （简称 JS）语言的编程语言。</p>\\n<p>它的目的并不是创造一种全新语言，而是增强 JavaScript 的功能，使其更适合多人合作的企业级项目。</p>\\n<p>TypeScript 可以看成是 JavaScript 的超集（superset），即它继承了后者的全部语法，所有 JavaScript 脚本都可以当作 TypeScript 脚本（但是可能会报错），此外它再增加了一些自己的语法。</p>\\n<p>TypeScript 对 JavaScript 添加的最主要部分，就是一个独立的类型系统。</p>","autoDesc":true}');export{S as comp,v as data};
