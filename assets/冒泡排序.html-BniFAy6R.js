import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as p,c as u,d as i,w as t,b as n,e as a,a as d}from"./app-oXp7PBbS.js";const m={},g=d('<h2 id="总览" tabindex="-1"><a class="header-anchor" href="#总览"><span>总览</span></a></h2><figure><img src="https://raw.githubusercontent.com/GodX-18/picBed/main/image-20230514145515237.png" alt="image-20230514145515237" tabindex="0" loading="lazy"><figcaption>image-20230514145515237</figcaption></figure><figure><img src="https://raw.githubusercontent.com/GodX-18/picBed/main/image-20230514145444586.png" alt="image-20230514145444586" tabindex="0" loading="lazy"><figcaption>image-20230514145444586</figcaption></figure><p><strong>名词解释</strong></p><ul><li>n：数据规模</li><li>k：&quot;桶&quot;的个数</li><li>In-place：占用常数内存，不占用额外内存</li><li>Out-place：占用额外内存</li><li>稳定性：排序后 2 个相等键值的顺序和排序之前它们的顺序相同</li></ul><h2 id="冒泡排序" tabindex="-1"><a class="header-anchor" href="#冒泡排序"><span>冒泡排序</span></a></h2><h3 id="算法步骤" tabindex="-1"><a class="header-anchor" href="#算法步骤"><span>算法步骤</span></a></h3><ul><li>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</li><li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。</li><li>针对所有的元素重复以上的步骤，除了最后一个。</li><li>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</li></ul><h3 id="动图展示" tabindex="-1"><a class="header-anchor" href="#动图展示"><span>动图展示</span></a></h3><figure><img src="https://www.runoob.com/wp-content/uploads/2019/03/bubbleSort.gif" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="最快情况" tabindex="-1"><a class="header-anchor" href="#最快情况"><span>最快情况</span></a></h3><p>当输入的数据已经是正序时</p><h3 id="最慢情况" tabindex="-1"><a class="header-anchor" href="#最慢情况"><span>最慢情况</span></a></h3><p>当输入的数据是反序时</p><h3 id="代码实现" tabindex="-1"><a class="header-anchor" href="#代码实现"><span>代码实现</span></a></h3>',15),k=n("div",{class:"language-bash line-numbers-mode","data-ext":"sh","data-title":"sh"},[n("pre",{class:"language-bash"},[n("code",null,[n("span",{class:"token keyword"},"function"),a(" bubbleSort"),n("span",{class:"token punctuation"},"("),a("arr"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"{"),a(`
    var len `),n("span",{class:"token operator"},"="),a(" arr.length"),n("span",{class:"token punctuation"},";"),a(`
    // 每次遍历确定一位最大值，所以最后一位不用操作
    `),n("span",{class:"token keyword"},"for"),a(),n("span",{class:"token punctuation"},"("),a("var i "),n("span",{class:"token operator"},"="),a(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),a(" i "),n("span",{class:"token operator"},"<"),a(" len - "),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),a(" i++"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"{"),a(`
        `),n("span",{class:"token keyword"},"for"),a(),n("span",{class:"token punctuation"},"("),a("var j "),n("span",{class:"token operator"},"="),a(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),a(" j "),n("span",{class:"token operator"},"<"),a(" len - "),n("span",{class:"token number"},"1"),a(" - i"),n("span",{class:"token punctuation"},";"),a(" j++"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"{"),a(`
         		// 相邻元素两两对比
            `),n("span",{class:"token keyword"},"if"),a(),n("span",{class:"token punctuation"},"("),a("arr"),n("span",{class:"token punctuation"},"["),a("j"),n("span",{class:"token punctuation"},"]"),a(),n("span",{class:"token operator"},">"),a(" arr"),n("span",{class:"token punctuation"},"["),a("j+1"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"{"),a(`   
            		// 元素交换
                var temp `),n("span",{class:"token operator"},"="),a(" arr"),n("span",{class:"token punctuation"},"["),a("j+1"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),a(`        
                arr`),n("span",{class:"token punctuation"},"["),a("j+1"),n("span",{class:"token punctuation"},"]"),a(),n("span",{class:"token operator"},"="),a(" arr"),n("span",{class:"token punctuation"},"["),a("j"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),a(`
                arr`),n("span",{class:"token punctuation"},"["),a("j"),n("span",{class:"token punctuation"},"]"),a(),n("span",{class:"token operator"},"="),a(" temp"),n("span",{class:"token punctuation"},";"),a(`
            `),n("span",{class:"token punctuation"},"}"),a(`
        `),n("span",{class:"token punctuation"},"}"),a(`
    `),n("span",{class:"token punctuation"},"}"),a(`
    `),n("span",{class:"token builtin class-name"},"return"),a(" arr"),n("span",{class:"token punctuation"},";"),a(`
`),n("span",{class:"token punctuation"},"}"),a(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),h=n("div",{class:"language-bash line-numbers-mode","data-ext":"sh","data-title":"sh"},[n("pre",{class:"language-bash"},[n("code",null,[a("def bubbleSort"),n("span",{class:"token punctuation"},"("),a("arr"),n("span",{class:"token punctuation"},")"),a(`:
    `),n("span",{class:"token keyword"},"for"),a(),n("span",{class:"token for-or-select variable"},"i"),a(),n("span",{class:"token keyword"},"in"),a(" range"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"1"),a(", len"),n("span",{class:"token punctuation"},"("),a("arr"),n("span",{class:"token punctuation"},"))"),a(`:
        `),n("span",{class:"token keyword"},"for"),a(),n("span",{class:"token for-or-select variable"},"j"),a(),n("span",{class:"token keyword"},"in"),a(" range"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"0"),a(", len"),n("span",{class:"token punctuation"},"("),a("arr"),n("span",{class:"token punctuation"},")"),a("-i"),n("span",{class:"token punctuation"},")"),a(`:
            `),n("span",{class:"token keyword"},"if"),a(" arr"),n("span",{class:"token punctuation"},"["),a("j"),n("span",{class:"token punctuation"},"]"),a(),n("span",{class:"token operator"},">"),a(" arr"),n("span",{class:"token punctuation"},"["),a("j+1"),n("span",{class:"token punctuation"},"]"),a(`:
                arr`),n("span",{class:"token punctuation"},"["),a("j"),n("span",{class:"token punctuation"},"]"),a(", arr"),n("span",{class:"token punctuation"},"["),a("j + "),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"]"),a(),n("span",{class:"token operator"},"="),a(" arr"),n("span",{class:"token punctuation"},"["),a("j + "),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"]"),a(", arr"),n("span",{class:"token punctuation"},"["),a("j"),n("span",{class:"token punctuation"},"]"),a(`
    `),n("span",{class:"token builtin class-name"},"return"),a(` arr
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),b=n("h2",{id:"参考链接",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#参考链接"},[n("span",null,"参考链接")])],-1),v={href:"https://www.runoob.com/w3cnote/ten-sorting-algorithm.html",target:"_blank",rel:"noopener noreferrer"};function f(_,y){const l=o("CodeTabs"),c=o("ExternalLinkIcon");return p(),u("div",null,[g,i(l,{id:"88",data:[{id:"JavaScript"},{id:"Python"}],active:0,"tab-id":"shell"},{title0:t(({value:e,isActive:s})=>[a("JavaScript")]),title1:t(({value:e,isActive:s})=>[a("Python")]),tab0:t(({value:e,isActive:s})=>[k]),tab1:t(({value:e,isActive:s})=>[h]),_:1}),b,n("ul",null,[n("li",null,[n("a",v,[a("十大经典排序算法"),i(c)])])])])}const B=r(m,[["render",f],["__file","冒泡排序.html.vue"]]),x=JSON.parse('{"path":"/%E7%AE%97%E6%B3%95/%E9%80%9A%E7%94%A8%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F.html","title":"十大经典排序算法","lang":"zh-CN","frontmatter":{"title":"十大经典排序算法","icon":"alias","date":"2023-03-09T00:00:00.000Z","order":4,"category":["算法"],"tag":["数组"],"description":"总览 image-20230514145515237image-20230514145515237 image-20230514145444586image-20230514145444586 名词解释 n：数据规模 k：\\"桶\\"的个数 In-place：占用常数内存，不占用额外内存 Out-place：占用额外内存 稳定性：排序后 2 个相等键值的顺序...","head":[["meta",{"property":"og:url","content":"https://godx-18.github.io/%E7%AE%97%E6%B3%95/%E9%80%9A%E7%94%A8%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F.html"}],["meta",{"property":"og:site_name","content":"烜"}],["meta",{"property":"og:title","content":"十大经典排序算法"}],["meta",{"property":"og:description","content":"总览 image-20230514145515237image-20230514145515237 image-20230514145444586image-20230514145444586 名词解释 n：数据规模 k：\\"桶\\"的个数 In-place：占用常数内存，不占用额外内存 Out-place：占用额外内存 稳定性：排序后 2 个相等键值的顺序..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.githubusercontent.com/GodX-18/picBed/main/image-20230514145515237.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-11-22T00:58:07.000Z"}],["meta",{"property":"article:author","content":"GodX"}],["meta",{"property":"article:tag","content":"数组"}],["meta",{"property":"article:published_time","content":"2023-03-09T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-11-22T00:58:07.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"十大经典排序算法\\",\\"image\\":[\\"https://raw.githubusercontent.com/GodX-18/picBed/main/image-20230514145515237.png\\",\\"https://raw.githubusercontent.com/GodX-18/picBed/main/image-20230514145444586.png\\",\\"https://www.runoob.com/wp-content/uploads/2019/03/bubbleSort.gif\\"],\\"datePublished\\":\\"2023-03-09T00:00:00.000Z\\",\\"dateModified\\":\\"2023-11-22T00:58:07.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"GodX\\",\\"url\\":\\"https://github.com/GodX-18\\"}]}"]]},"headers":[{"level":2,"title":"总览","slug":"总览","link":"#总览","children":[]},{"level":2,"title":"冒泡排序","slug":"冒泡排序","link":"#冒泡排序","children":[{"level":3,"title":"算法步骤","slug":"算法步骤","link":"#算法步骤","children":[]},{"level":3,"title":"动图展示","slug":"动图展示","link":"#动图展示","children":[]},{"level":3,"title":"最快情况","slug":"最快情况","link":"#最快情况","children":[]},{"level":3,"title":"最慢情况","slug":"最慢情况","link":"#最慢情况","children":[]},{"level":3,"title":"代码实现","slug":"代码实现","link":"#代码实现","children":[]}]},{"level":2,"title":"参考链接","slug":"参考链接","link":"#参考链接","children":[]}],"git":{"createdTime":1700614687000,"updatedTime":1700614687000,"contributors":[{"name":"GodX","email":"1046529973@qq.com","commits":1}]},"readingTime":{"minutes":1.38,"words":414},"filePathRelative":"算法/通用算法总结/冒泡排序.md","localizedDate":"2023年3月9日","excerpt":"<h2>总览</h2>\\n<figure><img src=\\"https://raw.githubusercontent.com/GodX-18/picBed/main/image-20230514145515237.png\\" alt=\\"image-20230514145515237\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>image-20230514145515237</figcaption></figure>\\n<figure><img src=\\"https://raw.githubusercontent.com/GodX-18/picBed/main/image-20230514145444586.png\\" alt=\\"image-20230514145444586\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>image-20230514145444586</figcaption></figure>","autoDesc":true}');export{B as comp,x as data};
