import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as s,a as t}from"./app-oXp7PBbS.js";const i={},n=t(`<p>我们在之前介绍过可以通过 redis-server 的启动参数 port 设置了 Redis 服务的端口号，除此之外 Redis 还支持其他配置选项，如是否开启持久化、日志级别等。</p><h2 id="通过命令行传递参数" tabindex="-1"><a class="header-anchor" href="#通过命令行传递参数"><span>通过命令行传递参数</span></a></h2><p>最简单的方式就是在启动 redis-server 的时候直接传递命令参数。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>redis-server <span class="token parameter variable">--port</span> <span class="token number">6380</span> <span class="token parameter variable">--host</span> <span class="token number">127.0</span>.0.1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="配置文件" tabindex="-1"><a class="header-anchor" href="#配置文件"><span>配置文件</span></a></h2><div class="hint-container tip"><p class="hint-container-title">提示</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 查看redis安装的位置</span>
brew list redis
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/GodX-18/picBed/main/image-20231017102632704.png" alt="image-20231017102632704" tabindex="0" loading="lazy"><figcaption>image-20231017102632704</figcaption></figure><figure><img src="https://raw.githubusercontent.com/GodX-18/picBed/main/image-20231017102724553.png" alt="image-20231017102724553" tabindex="0" loading="lazy"><figcaption>image-20231017102724553</figcaption></figure></div><p>由于可以配置的选项较多，通过启动参数设置这些选项并不方便，所以 Redis 支持通过配置文件来设置这些选项。</p><p>Redis 提供了一个配置文件的模板 redis.conf，位于源代码目录的根目录中。</p><p>我们建议把该文件放到 <code>/etc/redis</code> 目录中（该目录需要手动创建），以端口号命令，例如 <code>6379.conf</code>。</p><p>启用配置文件的方法是在启动时将配置文件的路径作为启动参数传递给 redis-server：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>redis-server 配置文件路径
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>通过启动参数传递同名的配置选项会覆盖配置文件中的相应的参数，就像这样：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>redis-server 配置文件路径 <span class="token parameter variable">--port</span> <span class="token number">3000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="在服务器运行时更改-redis-配置" tabindex="-1"><a class="header-anchor" href="#在服务器运行时更改-redis-配置"><span>在服务器运行时更改 Redis 配置</span></a></h2><p>还可以在 Redis 运行时通过 CONFIG SET 命令在不重新启动 Redis 的清空下动态修改部分 Redis 配置。就像这样：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>CONFIG SET logLevel warning
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>同样在运行的时候也可以使用 CONFIG GET 命令获得 Redis 当前的配置情况：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>CONFIG GET logLevel
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,18),r=[n];function d(o,l){return a(),s("div",null,r)}const m=e(i,[["render",d],["__file","03-配置.html.vue"]]),g=JSON.parse('{"path":"/%E5%A4%A7%E5%89%8D%E7%AB%AF/Nodejs%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/Redis/03-%E9%85%8D%E7%BD%AE.html","title":"配置","lang":"zh-CN","frontmatter":{"title":"配置","order":3,"category":["前端"],"tag":["nodejs","Redis"],"description":"我们在之前介绍过可以通过 redis-server 的启动参数 port 设置了 Redis 服务的端口号，除此之外 Redis 还支持其他配置选项，如是否开启持久化、日志级别等。 通过命令行传递参数 最简单的方式就是在启动 redis-server 的时候直接传递命令参数。 配置文件 提示 image-20231017102632704image-2...","head":[["meta",{"property":"og:url","content":"https://godx-18.github.io/%E5%A4%A7%E5%89%8D%E7%AB%AF/Nodejs%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/Redis/03-%E9%85%8D%E7%BD%AE.html"}],["meta",{"property":"og:site_name","content":"烜"}],["meta",{"property":"og:title","content":"配置"}],["meta",{"property":"og:description","content":"我们在之前介绍过可以通过 redis-server 的启动参数 port 设置了 Redis 服务的端口号，除此之外 Redis 还支持其他配置选项，如是否开启持久化、日志级别等。 通过命令行传递参数 最简单的方式就是在启动 redis-server 的时候直接传递命令参数。 配置文件 提示 image-20231017102632704image-2..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.githubusercontent.com/GodX-18/picBed/main/image-20231017102632704.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-11-22T00:58:07.000Z"}],["meta",{"property":"article:author","content":"GodX"}],["meta",{"property":"article:tag","content":"nodejs"}],["meta",{"property":"article:tag","content":"Redis"}],["meta",{"property":"article:modified_time","content":"2023-11-22T00:58:07.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"配置\\",\\"image\\":[\\"https://raw.githubusercontent.com/GodX-18/picBed/main/image-20231017102632704.png\\",\\"https://raw.githubusercontent.com/GodX-18/picBed/main/image-20231017102724553.png\\"],\\"dateModified\\":\\"2023-11-22T00:58:07.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"GodX\\",\\"url\\":\\"https://github.com/GodX-18\\"}]}"]]},"headers":[{"level":2,"title":"通过命令行传递参数","slug":"通过命令行传递参数","link":"#通过命令行传递参数","children":[]},{"level":2,"title":"配置文件","slug":"配置文件","link":"#配置文件","children":[]},{"level":2,"title":"在服务器运行时更改 Redis 配置","slug":"在服务器运行时更改-redis-配置","link":"#在服务器运行时更改-redis-配置","children":[]}],"git":{"createdTime":1700614687000,"updatedTime":1700614687000,"contributors":[{"name":"GodX","email":"1046529973@qq.com","commits":1}]},"readingTime":{"minutes":1.37,"words":412},"filePathRelative":"大前端/Nodejs全栈开发/Redis/03-配置.md","localizedDate":"2023年11月22日","excerpt":"<p>我们在之前介绍过可以通过 redis-server 的启动参数 port 设置了 Redis 服务的端口号，除此之外 Redis 还支持其他配置选项，如是否开启持久化、日志级别等。</p>\\n<h2>通过命令行传递参数</h2>\\n<p>最简单的方式就是在启动 redis-server 的时候直接传递命令参数。</p>\\n<div class=\\"language-bash\\" data-ext=\\"sh\\" data-title=\\"sh\\"><pre class=\\"language-bash\\"><code>redis-server <span class=\\"token parameter variable\\">--port</span> <span class=\\"token number\\">6380</span> <span class=\\"token parameter variable\\">--host</span> <span class=\\"token number\\">127.0</span>.0.1\\n</code></pre></div>","autoDesc":true}');export{m as comp,g as data};
