import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as c,c as i,b as s,e as n,d as t,a as p}from"./app-oXp7PBbS.js";const l={},u=s("h2",{id:"安装",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#安装"},[s("span",null,"安装")])],-1),r={href:"https://nodejs.cn/",target:"_blank",rel:"noopener noreferrer"},d=p(`<div class="language-console line-numbers-mode" data-ext="console" data-title="console"><pre class="language-console"><code>$ mkdir myapp
$ cd myapp
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,1),k=s("code",null,"npm init",-1),v=s("code",null,"package.json",-1),m=s("code",null,"package.json",-1),g={href:"https://npm.nodejs.cn/files/package.json",target:"_blank",rel:"noopener noreferrer"},b=p(`<div class="language-console line-numbers-mode" data-ext="console" data-title="console"><pre class="language-console"><code>$ npm init
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此命令会提示你输入许多信息，例如应用的名称和版本。 现在，你只需点击 RETURN 即可接受其中大多数的默认值，但以下情况除外：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>entry point: (index.js)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输入 <code>app.js</code>，或任何你想要的主文件名称。 如果你希望它是 <code>index.js</code>，请按 RETURN 以接受建议的默认文件名。</p><p>现在在 <code>myapp</code> 目录中安装 Express 并将其保存在依赖列表中。 例如：</p><div class="language-console line-numbers-mode" data-ext="console" data-title="console"><pre class="language-console"><code>$ npm install express
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>临时安装 Express 并且不将其添加到依赖列表中：</p><div class="language-console line-numbers-mode" data-ext="console" data-title="console"><pre class="language-console"><code>$ npm install express --no-save
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="hello-world" tabindex="-1"><a class="header-anchor" href="#hello-world"><span>Hello World</span></a></h2><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;express&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> port <span class="token operator">=</span> <span class="token number">3000</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;GodX------&gt;log服务已经启动。。。&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此应用启动一个服务器并在端口 3000 上监听连接。 应用以 “你好世界！” 响应对根 URL (<code>/</code>) 或路由的请求。 对于其他所有路径，它将以 <strong>404 未找到</strong> 响应。</p>`,11),h={href:"https://runkit.com/",target:"_blank",rel:"noopener noreferrer"},f=p(`<p>RunKit 是不隶属于 Express 项目的第三方服务。</p><h3 id="本地运行" tabindex="-1"><a class="header-anchor" href="#本地运行"><span>本地运行</span></a></h3><p>首先创建一个名为 <code>myapp</code> 的目录，切换到它并运行 <code>npm init</code>。 然后按照安装指南安装 <code>express</code> 作为依赖。</p><p>在 <code>myapp</code> 目录中，创建一个名为 <code>app.js</code> 的文件并复制上面示例中的代码。</p><p><code>req</code>（请求）和 <code>res</code>（响应）是 Node 提供的完全相同的对象，所以你可以调用 <code>req.pipe()</code>、<code>req.on(&#39;data&#39;, callback)</code> 以及任何你在没有 Express 参与的情况下会做的事情。</p><p>使用以下命令运行应用：</p><div class="language-console line-numbers-mode" data-ext="console" data-title="console"><pre class="language-console"><code>$ node app.js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后，在浏览器中加载 <code>http://localhost:3000/</code> 以查看输出。</p><h2 id="路由基础" tabindex="-1"><a class="header-anchor" href="#路由基础"><span>路由基础</span></a></h2><p>路由是指确定应用如何响应客户端对特定端点的请求，该端点是 URI（或路径）和特定的 HTTP 请求方法（GET、POST 等）。</p><p>每个路由可以有一个或多个处理函数，当路由匹配时执行。</p><p>路由定义采用以下结构：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">(</span><span class="token constant">PATH</span><span class="token punctuation">,</span> <span class="token constant">HANDLER</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中：</p><ul><li><code>app</code> 是 <code>express</code> 的一个实例。</li><li><code>METHOD</code> 是小写的 HTTP 请求方法。</li><li><code>PATH</code> 是服务器上的路径。</li><li><code>HANDLER</code> 是路由匹配时执行的函数。</li></ul><p>以下示例说明了定义简单路由。</p><p>在首页响应 <code>Hello World!</code>：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;Hello World!&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>响应根路由（<code>/</code>）上的 POST 请求，应用的主页：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;Got a POST request&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>响应对 <code>/user</code> 路由的 PUT 请求：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&#39;/user&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;Got a PUT request at /user&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>响应对 <code>/user</code> 路由的 DELETE 请求：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">&#39;/user&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;Got a DELETE request at /user&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,24),x={href:"https://express.nodejs.cn/en/guide/routing.html",target:"_blank",rel:"noopener noreferrer"},q=p(`<h2 id="中间件简介" tabindex="-1"><a class="header-anchor" href="#中间件简介"><span>中间件简介</span></a></h2><p>Express 的最大特色，也是最重要的一个设计，就是中间件。一个 Express 应用，就是由许许多多的中间件来完成的。</p><p>为了理解中间件，我们先来看一下我们现实生活中的自来水厂的净水流程。</p><figure><img src="https://raw.githubusercontent.com/GodX-18/picBed/main/image-20231019135147034.png" alt="image-20231019135147034" tabindex="0" loading="lazy"><figcaption>image-20231019135147034</figcaption></figure><p>在上图中，自来水厂从获取水源到净化处理交给用户，中间经历了一系列的处理环节，我们称其中的每一个处理环节就是一个中间件。这样做的目的既提高了生产效率也保证了可维护性。</p><p>在我理解 Express 中间件和 AOP 面向切面编程就是一个意思，就是都需要经过经过的一些步骤，<strong>不去修改自己的代码，以此来扩展或者处理一些功能。</strong></p><p>什么是AOP？中文意思是面向切面编程，听起来感觉很模糊。先举个生产的例子。<br> 农场的水果包装流水线一开始只有：采摘-清洗-贴标签。</p><figure><img src="https://raw.githubusercontent.com/GodX-18/picBed/main/image-20231019135536985.png" alt="image-20231019135536985" tabindex="0" loading="lazy"><figcaption>image-20231019135536985</figcaption></figure><p>为了提高销量，想加上两道工序 分类和 包装 但又不能干扰原有的流程，同时如果没增加收益可以随时撤销新增工序。</p><figure><img src="https://raw.githubusercontent.com/GodX-18/picBed/main/image-20231019140030426.png" alt="image-20231019140030426" tabindex="0" loading="lazy"><figcaption>image-20231019140030426</figcaption></figure><p>最后在流水线中的空隙插上两个工人去处理，形成 采摘。分类—清洗—包装 —- 贴标签 的新流程，而且工人可以随时撤回。</p><p>AOP （Aspect Oriented Programming）面向切面编程：</p><ul><li>将日志记录，性能统计，安全控制，事务处理，异常处理等代码从业务逻辑代码中划分出来，通过对这些行为的分离，我们希望可以<strong>将它们独立到非指导业务逻辑的方法中，进而改变这些行为的时候不影响业务逻辑的代码</strong>。</li><li>利用 AOP 可以对业务逻辑的各个部分进行隔离，从而使得<strong>业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率和可维护性</strong>。</li></ul><figure><img src="https://raw.githubusercontent.com/GodX-18/picBed/main/image-20231019140359993.png" alt="image-20231019140359993" tabindex="0" loading="lazy"><figcaption>image-20231019140359993</figcaption></figure><p>总结：就是在现有代码程序中，在程序生命周期或者横向流程中 <strong>加入/减去</strong> 一个或多个功能， 不影响原有功能。</p><h2 id="应用级别中间件" tabindex="-1"><a class="header-anchor" href="#应用级别中间件"><span>应用级别中间件</span></a></h2><h3 id="不做任何限定的中间件" tabindex="-1"><a class="header-anchor" href="#不做任何限定的中间件"><span>不做任何限定的中间件</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;GodX------&gt;log不做任何限定的中间件&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="限定请求路径" tabindex="-1"><a class="header-anchor" href="#限定请求路径"><span>限定请求路径</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">&quot;/condition&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;GodX------&gt;log限定请求路径&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="限定请求路径和请求方法" tabindex="-1"><a class="header-anchor" href="#限定请求路径和请求方法"><span>限定请求路径和请求方法</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;GodX------&gt;log限定请求路径和请求方法&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;ok&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="配置多个处理函数" tabindex="-1"><a class="header-anchor" href="#配置多个处理函数"><span>配置多个处理函数</span></a></h3><div class="hint-container tip"><p class="hint-container-title">提示</p><p>当有多个处理函数时，可以使用 next(&#39;route&#39;) 跳出当前中间件。</p><p>next(&#39;route&#39;) 将仅在使用 app.METHOD() 或 router.METHOD() 函数加载的中间件函数中工作</p></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>
  <span class="token string">&quot;/user&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;GodX------&gt;log配置多个处理函数1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 执行下一个处理函数</span>
    <span class="token comment">// next();</span>
    <span class="token comment">// 不执行下面的处理函数，直接跳出当前处理栈</span>
    <span class="token function">next</span><span class="token punctuation">(</span><span class="token string">&quot;route&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;GodX------&gt;log配置多个处理函数2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 最后一个 next 会脱离当前处理栈</span>
    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>可以将多个中间件写出数组形式</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">a</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;GodX------&gt;loga&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">b</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;GodX------&gt;logb&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/arr&quot;</span><span class="token punctuation">,</span> arr<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;arr ok&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="为同一个路径定义多个处理中间件" tabindex="-1"><a class="header-anchor" href="#为同一个路径定义多个处理中间件"><span>为同一个路径定义多个处理中间件</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/user&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;GodX------&gt;log配置多个处理函数3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;ok&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="错误处理中间件" tabindex="-1"><a class="header-anchor" href="#错误处理中间件"><span>错误处理中间件</span></a></h2><div class="hint-container tip"><p class="hint-container-title">提示</p><p>错误处理中间件始终带有四个参数。您必须提供四个参数以将其标识为错误处理中间件函数。即使不需要使用该 next对象，也必须指定它以维护签名。否则，该 next 对象将被解释为常规中间件，并且将无法处理错误。<br> 如果将任何内容传递给该next（函数（字符串除外&#39;route’），Express都会将当前请求视为错误，并且将跳过所有剩余的非错误处理路由和中间件函数。</p></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;express&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/err&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;ok&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 统一处理错误</span>
    <span class="token function">next</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/err2&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    cons<span class="token punctuation">.</span><span class="token function">lof</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 统一处理错误</span>
    <span class="token function">next</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//todo 在所有的中间件之后挂载错误处理中间件</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">code</span><span class="token operator">:</span> <span class="token number">500</span><span class="token punctuation">,</span>
    <span class="token literal-property property">message</span><span class="token operator">:</span> err<span class="token punctuation">.</span>message
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;服务已启动！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="路由级别中间件" tabindex="-1"><a class="header-anchor" href="#路由级别中间件"><span>路由级别中间件</span></a></h2><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">//? 路由器级别中间件</span>
<span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;express&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;./router&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//todo 挂载路由</span>
<span class="token comment">// app.use(router);</span>

<span class="token comment">//todo 给路由限定访问前缀</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">&quot;/abc&quot;</span><span class="token punctuation">,</span> router<span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;服务已启动！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>router.js</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;express&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//* 1. 创建路由实例</span>
<span class="token keyword">const</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//* 2. 配置路由</span>
router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/test&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;ok&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//* 3. 导出路由实例</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> router<span class="token punctuation">;</span>

<span class="token comment">//* 4. 将路由挂载</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_404-中间件" tabindex="-1"><a class="header-anchor" href="#_404-中间件"><span>404 中间件</span></a></h2><div class="hint-container tip"><p class="hint-container-title">提示</p><p>在所有的路由之后挂载404中间件</p></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">//? 404 中间件</span>
<span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;express&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/a&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;ok&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 统一处理错误</span>
    <span class="token function">next</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/b&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 统一处理错误</span>
    <span class="token function">next</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//todo 在所有的路由之后挂载404中间件</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">404</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;Not Found&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;服务已启动！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="内置中间件" tabindex="-1"><a class="header-anchor" href="#内置中间件"><span>内置中间件</span></a></h2><figure><img src="https://raw.githubusercontent.com/GodX-18/picBed/main/image-20231020090151164.png" alt="image-20231020090151164" tabindex="0" loading="lazy"><figcaption>image-20231020090151164</figcaption></figure><h2 id="第三方中间件" tabindex="-1"><a class="header-anchor" href="#第三方中间件"><span>第三方中间件</span></a></h2>`,42),j={href:"https://express.nodejs.cn/en/resources/middleware.html",target:"_blank",rel:"noopener noreferrer"},y=p(`<div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;express&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> morgan <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;morgan&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">morgan</span><span class="token punctuation">(</span><span class="token string">&quot;tiny&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1);function _(E,w){const a=o("ExternalLinkIcon");return c(),i("div",null,[u,s("p",null,[n("假设你已经安装了 "),s("a",r,[n("Node.js"),t(a)]),n("，创建一个目录来保存你的应用，并将其设为你的工作目录。")]),d,s("p",null,[n("使用 "),k,n(" 命令为你的应用创建一个 "),v,n(" 文件。 有关 "),m,n(" 如何工作的更多信息，请参阅 "),s("a",g,[n("npm 的 package.json 处理细节"),t(a)]),n("。")]),b,s("p",null,[n("上面的例子实际上是一个工作服务器： 继续并单击显示的 URL。 你会收到响应，页面上会显示实时日志，并且你所做的任何更改都会实时反映。 这由 "),s("a",h,[n("RunKit"),t(a)]),n(" 提供支持，它提供了一个交互式 JavaScript 在线运行，连接到在你的 Web 浏览器中运行的完整 Node 环境。 以下是在本地计算机上运行相同应用的说明。")]),f,s("p",null,[n("有关路由的更多详细信息，请参阅 "),s("a",x,[n("路由指南"),t(a)]),n("。")]),q,s("p",null,[s("a",j,[n("https://express.nodejs.cn/en/resources/middleware.html"),t(a)])]),y])}const T=e(l,[["render",_],["__file","02-快速入门.html.vue"]]),X=JSON.parse('{"path":"/%E5%A4%A7%E5%89%8D%E7%AB%AF/Nodejs%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/Expressjs/02-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8.html","title":"快速入门","lang":"zh-CN","frontmatter":{"title":"快速入门","order":2,"category":["前端"],"tag":["nodejs","Express"],"description":"安装 假设你已经安装了 Node.js，创建一个目录来保存你的应用，并将其设为你的工作目录。 使用 npm init 命令为你的应用创建一个 package.json 文件。 有关 package.json 如何工作的更多信息，请参阅 npm 的 package.json 处理细节。 此命令会提示你输入许多信息，例如应用的名称和版本。 现在，你只需点击...","head":[["meta",{"property":"og:url","content":"https://godx-18.github.io/%E5%A4%A7%E5%89%8D%E7%AB%AF/Nodejs%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/Expressjs/02-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8.html"}],["meta",{"property":"og:site_name","content":"烜"}],["meta",{"property":"og:title","content":"快速入门"}],["meta",{"property":"og:description","content":"安装 假设你已经安装了 Node.js，创建一个目录来保存你的应用，并将其设为你的工作目录。 使用 npm init 命令为你的应用创建一个 package.json 文件。 有关 package.json 如何工作的更多信息，请参阅 npm 的 package.json 处理细节。 此命令会提示你输入许多信息，例如应用的名称和版本。 现在，你只需点击..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.githubusercontent.com/GodX-18/picBed/main/image-20231019135147034.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-11-22T00:58:07.000Z"}],["meta",{"property":"article:author","content":"GodX"}],["meta",{"property":"article:tag","content":"nodejs"}],["meta",{"property":"article:tag","content":"Express"}],["meta",{"property":"article:modified_time","content":"2023-11-22T00:58:07.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"快速入门\\",\\"image\\":[\\"https://raw.githubusercontent.com/GodX-18/picBed/main/image-20231019135147034.png\\",\\"https://raw.githubusercontent.com/GodX-18/picBed/main/image-20231019135536985.png\\",\\"https://raw.githubusercontent.com/GodX-18/picBed/main/image-20231019140030426.png\\",\\"https://raw.githubusercontent.com/GodX-18/picBed/main/image-20231019140359993.png\\",\\"https://raw.githubusercontent.com/GodX-18/picBed/main/image-20231020090151164.png\\"],\\"dateModified\\":\\"2023-11-22T00:58:07.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"GodX\\",\\"url\\":\\"https://github.com/GodX-18\\"}]}"]]},"headers":[{"level":2,"title":"安装","slug":"安装","link":"#安装","children":[]},{"level":2,"title":"Hello World","slug":"hello-world","link":"#hello-world","children":[{"level":3,"title":"本地运行","slug":"本地运行","link":"#本地运行","children":[]}]},{"level":2,"title":"路由基础","slug":"路由基础","link":"#路由基础","children":[]},{"level":2,"title":"中间件简介","slug":"中间件简介","link":"#中间件简介","children":[]},{"level":2,"title":"应用级别中间件","slug":"应用级别中间件","link":"#应用级别中间件","children":[{"level":3,"title":"不做任何限定的中间件","slug":"不做任何限定的中间件","link":"#不做任何限定的中间件","children":[]},{"level":3,"title":"限定请求路径","slug":"限定请求路径","link":"#限定请求路径","children":[]},{"level":3,"title":"限定请求路径和请求方法","slug":"限定请求路径和请求方法","link":"#限定请求路径和请求方法","children":[]},{"level":3,"title":"配置多个处理函数","slug":"配置多个处理函数","link":"#配置多个处理函数","children":[]},{"level":3,"title":"为同一个路径定义多个处理中间件","slug":"为同一个路径定义多个处理中间件","link":"#为同一个路径定义多个处理中间件","children":[]}]},{"level":2,"title":"错误处理中间件","slug":"错误处理中间件","link":"#错误处理中间件","children":[]},{"level":2,"title":"路由级别中间件","slug":"路由级别中间件","link":"#路由级别中间件","children":[]},{"level":2,"title":"404 中间件","slug":"_404-中间件","link":"#_404-中间件","children":[]},{"level":2,"title":"内置中间件","slug":"内置中间件","link":"#内置中间件","children":[]},{"level":2,"title":"第三方中间件","slug":"第三方中间件","link":"#第三方中间件","children":[]}],"git":{"createdTime":1700614687000,"updatedTime":1700614687000,"contributors":[{"name":"GodX","email":"1046529973@qq.com","commits":1}]},"readingTime":{"minutes":7.41,"words":2224},"filePathRelative":"大前端/Nodejs全栈开发/Expressjs/02-快速入门.md","localizedDate":"2023年11月22日","excerpt":"<h2>安装</h2>\\n<p>假设你已经安装了 <a href=\\"https://nodejs.cn/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Node.js</a>，创建一个目录来保存你的应用，并将其设为你的工作目录。</p>\\n<div class=\\"language-console\\" data-ext=\\"console\\" data-title=\\"console\\"><pre class=\\"language-console\\"><code>$ mkdir myapp\\n$ cd myapp\\n</code></pre></div><p>使用 <code>npm init</code> 命令为你的应用创建一个 <code>package.json</code> 文件。 有关 <code>package.json</code> 如何工作的更多信息，请参阅 <a href=\\"https://npm.nodejs.cn/files/package.json\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">npm 的 package.json 处理细节</a>。</p>","autoDesc":true}');export{T as comp,X as data};
