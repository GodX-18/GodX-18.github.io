import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as a,o as l,c as i,b as e,e as o,d as n,a as s}from"./app-oXp7PBbS.js";const c={},p=s('<h2 id="什么是回溯" tabindex="-1"><a class="header-anchor" href="#什么是回溯"><span>什么是回溯</span></a></h2><p><strong>回溯算法</strong>实际上一个类似<strong>枚举</strong>的搜索尝试过程，主要是在搜索尝试过程中寻找问题的解，<strong>当发现已不满足求解条件时，就“回溯”返回，尝试别的路径</strong>。</p><p>回溯法是一种选优搜索法，按选优条件向前搜索，以达到目标。<strong>但当探索到某一步时，发现原先选择并不优或达不到目标，就退回一步重新选择，这种走不通就退回再走的技术为回溯法</strong>，而满足回溯条件的某个状态的点称为“回溯点”。</p><p>许多复杂的，规模较大的问题都可以使用回溯法，有“通用解题方法”的美称。</p><p>简单来说，回溯算法其实就是一个不断探索尝试的过程，探索成功了也就成功了，探索失败了就在退一步，继续尝试……</p><h2 id="应用场景" tabindex="-1"><a class="header-anchor" href="#应用场景"><span>应用场景</span></a></h2><h2 id="算法流程" tabindex="-1"><a class="header-anchor" href="#算法流程"><span>算法流程</span></a></h2><h2 id="算法模版" tabindex="-1"><a class="header-anchor" href="#算法模版"><span>算法模版</span></a></h2><h2 id="经典题目" tabindex="-1"><a class="header-anchor" href="#经典题目"><span>经典题目</span></a></h2><h2 id="参考链接" tabindex="-1"><a class="header-anchor" href="#参考链接"><span>参考链接</span></a></h2>',10),h={href:"https://zhuanlan.zhihu.com/p/243046630",target:"_blank",rel:"noopener noreferrer"},d={href:"https://leetcode-solution-leetcode-pp.gitbook.io/leetcode-solution/thinkings/backtrack",target:"_blank",rel:"noopener noreferrer"},m={href:"https://www.programmercarl.com/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80.html",target:"_blank",rel:"noopener noreferrer"};function g(E,u){const t=a("ExternalLinkIcon");return l(),i("div",null,[p,e("ul",null,[e("li",null,[e("a",h,[o("https://zhuanlan.zhihu.com/p/243046630"),n(t)])]),e("li",null,[e("a",d,[o("https://leetcode-solution-leetcode-pp.gitbook.io/leetcode-solution/thinkings/backtrack"),n(t)])]),e("li",null,[e("a",m,[o("https://www.programmercarl.com/回溯算法理论基础.html"),n(t)])])])])}const B=r(c,[["render",g],["__file","回溯.html.vue"]]),k=JSON.parse('{"path":"/%E7%AE%97%E6%B3%95/%E9%80%9A%E7%94%A8%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/%E5%9B%9E%E6%BA%AF.html","title":"回溯","lang":"zh-CN","frontmatter":{"title":"回溯","icon":"leaf","date":"2023-05-16T00:00:00.000Z","order":1,"category":["算法"],"tag":["回溯"],"description":"什么是回溯 回溯算法实际上一个类似枚举的搜索尝试过程，主要是在搜索尝试过程中寻找问题的解，当发现已不满足求解条件时，就“回溯”返回，尝试别的路径。 回溯法是一种选优搜索法，按选优条件向前搜索，以达到目标。但当探索到某一步时，发现原先选择并不优或达不到目标，就退回一步重新选择，这种走不通就退回再走的技术为回溯法，而满足回溯条件的某个状态的点称为“回溯点”...","head":[["meta",{"property":"og:url","content":"https://godx-18.github.io/%E7%AE%97%E6%B3%95/%E9%80%9A%E7%94%A8%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/%E5%9B%9E%E6%BA%AF.html"}],["meta",{"property":"og:site_name","content":"烜"}],["meta",{"property":"og:title","content":"回溯"}],["meta",{"property":"og:description","content":"什么是回溯 回溯算法实际上一个类似枚举的搜索尝试过程，主要是在搜索尝试过程中寻找问题的解，当发现已不满足求解条件时，就“回溯”返回，尝试别的路径。 回溯法是一种选优搜索法，按选优条件向前搜索，以达到目标。但当探索到某一步时，发现原先选择并不优或达不到目标，就退回一步重新选择，这种走不通就退回再走的技术为回溯法，而满足回溯条件的某个状态的点称为“回溯点”..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-22T06:04:23.000Z"}],["meta",{"property":"article:author","content":"GodX"}],["meta",{"property":"article:tag","content":"回溯"}],["meta",{"property":"article:published_time","content":"2023-05-16T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-05-22T06:04:23.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"回溯\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-05-16T00:00:00.000Z\\",\\"dateModified\\":\\"2023-05-22T06:04:23.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"GodX\\",\\"url\\":\\"https://github.com/GodX-18\\"}]}"]]},"headers":[{"level":2,"title":"什么是回溯","slug":"什么是回溯","link":"#什么是回溯","children":[]},{"level":2,"title":"应用场景","slug":"应用场景","link":"#应用场景","children":[]},{"level":2,"title":"算法流程","slug":"算法流程","link":"#算法流程","children":[]},{"level":2,"title":"算法模版","slug":"算法模版","link":"#算法模版","children":[]},{"level":2,"title":"经典题目","slug":"经典题目","link":"#经典题目","children":[]},{"level":2,"title":"参考链接","slug":"参考链接","link":"#参考链接","children":[]}],"git":{"createdTime":1684735463000,"updatedTime":1684735463000,"contributors":[{"name":"GodX","email":"1046529973@qq.com","commits":1}]},"readingTime":{"minutes":1.02,"words":307},"filePathRelative":"算法/通用算法总结/回溯.md","localizedDate":"2023年5月16日","excerpt":"<h2>什么是回溯</h2>\\n<p><strong>回溯算法</strong>实际上一个类似<strong>枚举</strong>的搜索尝试过程，主要是在搜索尝试过程中寻找问题的解，<strong>当发现已不满足求解条件时，就“回溯”返回，尝试别的路径</strong>。</p>\\n<p>回溯法是一种选优搜索法，按选优条件向前搜索，以达到目标。<strong>但当探索到某一步时，发现原先选择并不优或达不到目标，就退回一步重新选择，这种走不通就退回再走的技术为回溯法</strong>，而满足回溯条件的某个状态的点称为“回溯点”。</p>\\n<p>许多复杂的，规模较大的问题都可以使用回溯法，有“通用解题方法”的美称。</p>","autoDesc":true}');export{B as comp,k as data};
