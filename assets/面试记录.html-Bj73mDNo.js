import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o,c,b as n,e as s,d as l,w as i,a}from"./app-oXp7PBbS.js";const u={},r=a(`<h2 id="上海抱朴信息技术有限公司" tabindex="-1"><a class="header-anchor" href="#上海抱朴信息技术有限公司"><span>上海抱朴信息技术有限公司</span></a></h2><h3 id="_1-this-指向" tabindex="-1"><a class="header-anchor" href="#_1-this-指向"><span>1. this 指向</span></a></h3><figure><img src="https://raw.githubusercontent.com/GodX-18/picBed/main/img_v3_029r_669370be-e84b-4673-a7ab-f8ecd0d6cbdg.jpg" alt="img_v3_029r_669370be-e84b-4673-a7ab-f8ecd0d6cbdg" tabindex="0" loading="lazy"><figcaption>img_v3_029r_669370be-e84b-4673-a7ab-f8ecd0d6cbdg</figcaption></figure><p>答案<sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup></p><h3 id="_2-宏任务和微任务" tabindex="-1"><a class="header-anchor" href="#_2-宏任务和微任务"><span>2. 宏任务和微任务</span></a></h3><figure><img src="https://raw.githubusercontent.com/GodX-18/picBed/main/img_v3_029r_84bc2a0c-0b9c-4b6d-99a8-34e07e1ec2ag.jpg" alt="img_v3_029r_84bc2a0c-0b9c-4b6d-99a8-34e07e1ec2ag" tabindex="0" loading="lazy"><figcaption>img_v3_029r_84bc2a0c-0b9c-4b6d-99a8-34e07e1ec2ag</figcaption></figure><p>答案<sup class="footnote-ref"><a href="#footnote2">[2]</a><a class="footnote-anchor" id="footnote-ref2"></a></sup></p><h3 id="_3-settimeout-输出" tabindex="-1"><a class="header-anchor" href="#_3-settimeout-输出"><span>3. setTimeout 输出</span></a></h3><figure><img src="https://raw.githubusercontent.com/GodX-18/picBed/main/img_v3_029r_430979f4-251b-4137-9406-537e8999483g.jpg" alt="img_v3_029r_430979f4-251b-4137-9406-537e8999483g" tabindex="0" loading="lazy"><figcaption>img_v3_029r_430979f4-251b-4137-9406-537e8999483g</figcaption></figure><p>答案<sup class="footnote-ref"><a href="#footnote3">[3]</a><a class="footnote-anchor" id="footnote-ref3"></a></sup></p><h3 id="_4-打印棱形" tabindex="-1"><a class="header-anchor" href="#_4-打印棱形"><span>4. 打印棱形</span></a></h3><p>写一个函数，接受一个整数参数，在控制台打印棱形，例如输入为 6，控制台会打印一下图形</p><figure><img src="https://raw.githubusercontent.com/GodX-18/picBed/main/image-20240412105604510.png" alt="image-20240412105604510" tabindex="0" loading="lazy"><figcaption>image-20240412105604510</figcaption></figure><p>答案<sup class="footnote-ref"><a href="#footnote4">[4]</a><a class="footnote-anchor" id="footnote-ref4"></a></sup></p><h2 id="阿里巴巴" tabindex="-1"><a class="header-anchor" href="#阿里巴巴"><span>阿里巴巴</span></a></h2><h3 id="_1-算法" tabindex="-1"><a class="header-anchor" href="#_1-算法"><span>1. 算法</span></a></h3><p>提供了一个数组结构的 data，要求实现一个 <code>query</code> 方法，返回一个新的数组，query 方法内部有 <code>过滤</code>、<code>排序</code>、<code>分组</code>等操作，并且支持链式调用，调用最终的 <code>execute</code> 方法返回结果。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">query</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> item<span class="token punctuation">.</span>age <span class="token operator">&gt;</span> <span class="token number">18</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">sortBy</span><span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">groupBy</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>答案<sup class="footnote-ref"><a href="#footnote5">[5]</a><a class="footnote-anchor" id="footnote-ref5"></a></sup></p><h3 id="_2-业务" tabindex="-1"><a class="header-anchor" href="#_2-业务"><span>2. 业务</span></a></h3><p>要求用 vue 或者 react 实现一个倒计时抢券组件，页面加载时从 10s 开始倒计时，倒计时结束之后点击按钮请求接口进行抢券，同时更新文案等等功能。</p><p>答案<sup class="footnote-ref"><a href="#footnote6">[6]</a><a class="footnote-anchor" id="footnote-ref6"></a></sup></p><h3 id="_3-说一下你对七层网络模型和对dns的理解" tabindex="-1"><a class="header-anchor" href="#_3-说一下你对七层网络模型和对dns的理解"><span>3. 说一下你对七层网络模型和对DNS的理解</span></a></h3><p>答案<sup class="footnote-ref"><a href="#footnote7">[7]</a><a class="footnote-anchor" id="footnote-ref7"></a></sup></p><h3 id="_4-react-代码层的优化可以说一下么" tabindex="-1"><a class="header-anchor" href="#_4-react-代码层的优化可以说一下么"><span>4. React 代码层的优化可以说一下么？</span></a></h3><p>答案<sup class="footnote-ref"><a href="#footnote8">[8]</a><a class="footnote-anchor" id="footnote-ref8"></a></sup></p><h3 id="_5-说一下-usememo-和-usecallback-有什么区别" tabindex="-1"><a class="header-anchor" href="#_5-说一下-usememo-和-usecallback-有什么区别"><span>5. 说一下 <code>useMemo</code> 和 <code>useCallback</code> 有什么区别</span></a></h3><p>答案<sup class="footnote-ref"><a href="#footnote9">[9]</a><a class="footnote-anchor" id="footnote-ref9"></a></sup></p><h3 id="_6-说一下-useeffect-和-uselayouteffect-有什么区别" tabindex="-1"><a class="header-anchor" href="#_6-说一下-useeffect-和-uselayouteffect-有什么区别"><span>6.说一下 <code>useEffect</code> 和 <code>useLayoutEffect</code> 有什么区别</span></a></h3><p>答案<sup class="footnote-ref"><a href="#footnote10">[10]</a><a class="footnote-anchor" id="footnote-ref10"></a></sup></p><h3 id="_7-useeffect-对应在-class-中的生命周期怎么写" tabindex="-1"><a class="header-anchor" href="#_7-useeffect-对应在-class-中的生命周期怎么写"><span>7. <code>useEffect</code> 对应在 class 中的生命周期怎么写？</span></a></h3><p>答案[^2-7]</p><h3 id="_8-如果在-if-里面写-useeffect-会有什么表现" tabindex="-1"><a class="header-anchor" href="#_8-如果在-if-里面写-useeffect-会有什么表现"><span>8. 如果在 if 里面写 <code>useEffect</code> 会有什么表现？</span></a></h3><p>答案[^2-8]</p><h3 id="_9-说一下-react-的-fiber-架构是什么" tabindex="-1"><a class="header-anchor" href="#_9-说一下-react-的-fiber-架构是什么"><span>9. 说一下 React 的 <code>Fiber</code> 架构是什么</span></a></h3><p>答案[^2-9]</p><h3 id="_10-前面提到-在-if-语句里面写-hook-会报错-你可以用-fiber-架构来解释一下吗" tabindex="-1"><a class="header-anchor" href="#_10-前面提到-在-if-语句里面写-hook-会报错-你可以用-fiber-架构来解释一下吗"><span>10. 前面提到，在 if 语句里面写 hook 会报错，你可以用 fiber 架构来解释一下吗？</span></a></h3><p>答案[^2-10]</p><h3 id="_11-个人方面有什么规划吗" tabindex="-1"><a class="header-anchor" href="#_11-个人方面有什么规划吗"><span>11. 个人方面有什么规划吗？</span></a></h3><p>答案[^2-11]</p><h3 id="_12-对未来的技术上有什么规划呢" tabindex="-1"><a class="header-anchor" href="#_12-对未来的技术上有什么规划呢"><span>12. 对未来的技术上有什么规划呢？</span></a></h3><p>答案[^2-12]</p><h3 id="_13-能不能从技术的角度讲一下你工作中负责业务的复杂度" tabindex="-1"><a class="header-anchor" href="#_13-能不能从技术的角度讲一下你工作中负责业务的复杂度"><span>13. 能不能从技术的角度讲一下你工作中负责业务的复杂度？</span></a></h3><p>答案[^2-13]</p><h3 id="_14-可以讲一下你在工作中技术上的建设吗" tabindex="-1"><a class="header-anchor" href="#_14-可以讲一下你在工作中技术上的建设吗"><span>14. 可以讲一下你在工作中技术上的建设吗？</span></a></h3><p>答案[^2-14]</p><h3 id="_15-你有什么想问我的吗" tabindex="-1"><a class="header-anchor" href="#_15-你有什么想问我的吗"><span>15. 你有什么想问我的吗？</span></a></h3><p>答案[^2-15]</p><h3 id="_16-在-js-中原型链是一个很重要的概念-你能介绍一下它吗" tabindex="-1"><a class="header-anchor" href="#_16-在-js-中原型链是一个很重要的概念-你能介绍一下它吗"><span>16. 在 js 中原型链是一个很重要的概念，你能介绍一下它吗？</span></a></h3><p>答案[^2-16]</p><h3 id="_17-object-的原型指向谁" tabindex="-1"><a class="header-anchor" href="#_17-object-的原型指向谁"><span>17. object 的原型指向谁？</span></a></h3><p>答案[^2-17]</p><h3 id="_18-能说一下原型链的查找过程吗" tabindex="-1"><a class="header-anchor" href="#_18-能说一下原型链的查找过程吗"><span>18. 能说一下原型链的查找过程吗？</span></a></h3><p>答案[^2-18]</p><h3 id="_19-node-的内存管理跟垃圾回收机制有了解过吗" tabindex="-1"><a class="header-anchor" href="#_19-node-的内存管理跟垃圾回收机制有了解过吗"><span>19. node 的内存管理跟垃圾回收机制有了解过吗？</span></a></h3><p>答案[^2-19]</p><h3 id="_20-js-中的基础类型和对象类型有什么不一样" tabindex="-1"><a class="header-anchor" href="#_20-js-中的基础类型和对象类型有什么不一样"><span>20. js 中的基础类型和对象类型有什么不一样？</span></a></h3><p>答案[^2-20]</p><h3 id="_21-看你简历上是用-react-你能简单的介绍一下-hooks-吗" tabindex="-1"><a class="header-anchor" href="#_21-看你简历上是用-react-你能简单的介绍一下-hooks-吗"><span>21. 看你简历上是用 React，你能简单的介绍一下 hooks 吗？</span></a></h3><p>答案[^2-21]</p><h3 id="_22-简单说一下-useeffect-的用法" tabindex="-1"><a class="header-anchor" href="#_22-简单说一下-useeffect-的用法"><span>22.. 简单说一下 <code>useEffect</code> 的用法</span></a></h3><p>答案[^2-22]</p><h3 id="_23-说一下-useeffect-的返回值用来做什么" tabindex="-1"><a class="header-anchor" href="#_23-说一下-useeffect-的返回值用来做什么"><span>23. 说一下 <code>useEffect</code> 的返回值用来做什么？</span></a></h3><p>答案[^2-23]</p><h3 id="_24-你知道-useeffect-第二个参数内部是怎么比较的吗" tabindex="-1"><a class="header-anchor" href="#_24-你知道-useeffect-第二个参数内部是怎么比较的吗"><span>24. 你知道 <code>useEffect</code> 第二个参数内部是怎么比较的吗？</span></a></h3><p>答案[^2-24]</p><h3 id="_25-前端的话可能跟网络打交道比较多-网络你了解多少呢" tabindex="-1"><a class="header-anchor" href="#_25-前端的话可能跟网络打交道比较多-网络你了解多少呢"><span>25. 前端的话可能跟<code>网络</code>打交道比较多，网络你了解多少呢？</span></a></h3><p>答案[^2-25]</p><h3 id="_26-http-是在哪一层实现的" tabindex="-1"><a class="header-anchor" href="#_26-http-是在哪一层实现的"><span>26. <code>http</code> 是在哪一层实现的？</span></a></h3><p>答案[^2-26]</p><h3 id="_27-说一下-get-跟-post-有什么区别" tabindex="-1"><a class="header-anchor" href="#_27-说一下-get-跟-post-有什么区别"><span>27. 说一下 <code>get</code> 跟 <code>post</code> 有什么区别？</span></a></h3><p>答案[^2-27]</p><h3 id="_28-说一下浏览器输入-url-到页面加载的过程" tabindex="-1"><a class="header-anchor" href="#_28-说一下浏览器输入-url-到页面加载的过程"><span>28. 说一下浏览器输入 url 到页面加载的过程</span></a></h3><p>答案[^2-28]</p><h3 id="_29-菜单左中右布局-两边定宽-中间自适应-说一下有几种实现方式" tabindex="-1"><a class="header-anchor" href="#_29-菜单左中右布局-两边定宽-中间自适应-说一下有几种实现方式"><span>29. 菜单左中右布局，两边定宽，中间自适应，说一下有几种实现方式</span></a></h3><p>答案[^2-29]</p><h3 id="_30-项目难点" tabindex="-1"><a class="header-anchor" href="#_30-项目难点"><span>30. 项目难点</span></a></h3><hr class="footnotes-sep">`,78),k={class:"footnotes"},d={class:"footnotes-list"},f={id:"footnote1",class:"footnote-item"},v=n("a",{href:"#footnote-ref1",class:"footnote-backref"},"↩︎",-1),h=a(`<li id="footnote2" class="footnote-item"><p>1 2 5 3 <a href="#footnote-ref2" class="footnote-backref">↩︎</a></p></li><li id="footnote3" class="footnote-item"><p>4 5 6 。需要注意题目中的声明变量用的是 var 还是 let。 <a href="#footnote-ref3" class="footnote-backref">↩︎</a></p></li><li id="footnote4" class="footnote-item"><p>示例代码</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>   <span class="token keyword">function</span> <span class="token function">printDiamond</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token comment">// 打印上半部分的菱形</span>
       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> row <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> row <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> row<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
           <span class="token keyword">let</span> spaces <span class="token operator">=</span> <span class="token string">&#39; &#39;</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span>n <span class="token operator">-</span> row<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 计算空格数量</span>
           <span class="token keyword">let</span> stars <span class="token operator">=</span> <span class="token string">&#39;*&#39;</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> row <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 计算星号数量</span>
           console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>spaces <span class="token operator">+</span> stars<span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span>
   
       <span class="token comment">// 打印下半部分的菱形</span>
       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> row <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> row <span class="token operator">&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span> row<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
           <span class="token keyword">let</span> spaces <span class="token operator">=</span> <span class="token string">&#39; &#39;</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span>n <span class="token operator">-</span> row<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 计算空格数量</span>
           <span class="token keyword">let</span> stars <span class="token operator">=</span> <span class="token string">&#39;*&#39;</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> row <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 计算星号数量</span>
           console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>spaces <span class="token operator">+</span> stars<span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span>
   <span class="token punctuation">}</span>
   
   <span class="token comment">// 示例：打印高度为 5 的棱形</span>
   <span class="token function">printDiamond</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div> <a href="#footnote-ref4" class="footnote-backref">↩︎</a></li><li id="footnote5" class="footnote-item"><p>示例代码</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> _data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>data<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> _actions <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> operations <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token function">where</span><span class="token punctuation">(</span><span class="token parameter">predicate</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      _actions<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=&gt;</span> data<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>predicate<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">sortBy</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      _actions<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token operator">...</span>data<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">-</span> b<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">groupBy</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      _actions<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> data<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">group<span class="token punctuation">,</span> item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token keyword">const</span> groupKey <span class="token operator">=</span> item<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
          group<span class="token punctuation">[</span>groupKey<span class="token punctuation">]</span> <span class="token operator">=</span> group<span class="token punctuation">[</span>groupKey<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
          group<span class="token punctuation">[</span>groupKey<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">return</span> group<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> _actions<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">data<span class="token punctuation">,</span> action</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">action</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span> _data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> operations<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 使用示例</span>
<span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Alice&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">22</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Bob&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Charlie&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">23</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Alice&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">19</span> <span class="token punctuation">}</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">query</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> item<span class="token punctuation">.</span>age <span class="token operator">&gt;</span> <span class="token number">18</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">sortBy</span><span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">groupBy</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div> <a href="#footnote-ref5" class="footnote-backref">↩︎</a></li><li id="footnote6" class="footnote-item"><p>示例代码</p><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>coupon-timer<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>timeLeft &gt; 0<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>{{ timeLeft }}秒后开始抢券<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">v-else</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>grabCoupon<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:disabled</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>grabbed<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
      {{ buttonLabel }}
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">timeLeft</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
      <span class="token literal-property property">grabbed</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
      <span class="token literal-property property">buttonLabel</span><span class="token operator">:</span> <span class="token string">&#39;立即抢券&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">intervalId</span><span class="token operator">:</span> <span class="token keyword">null</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">countdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>intervalId <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>timeLeft <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>timeLeft<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">clearInterval</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">clearInterval</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>intervalId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">clearInterval</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>intervalId<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">grabCoupon</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 模拟请求接口进行抢券</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>buttonLabel <span class="token operator">=</span> <span class="token string">&#39;正在抢券...&#39;</span><span class="token punctuation">;</span>
      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>grabbed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>buttonLabel <span class="token operator">=</span> <span class="token string">&#39;已抢到&#39;</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">countdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">beforeDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">clearInterval</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
<span class="token selector">.coupon-timer</span> <span class="token punctuation">{</span>
  <span class="token comment">/* 样式代码 */</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div> <a href="#footnote-ref6" class="footnote-backref">↩︎</a></li><li id="footnote7" class="footnote-item"><p>以下是我对七层网络模型和DNS的一些理解：</p><p><strong>七层网络模型</strong>，也称为OSI模型，是一个国际标准化组织（ISO）制定的网络通信标准框架。它将网络通信分为七个层次，每个层次都有特定的功能。</p><ol><li><strong>物理层</strong>：负责传输原始比特流，即电信号的传输。</li><li><strong>数据链路层</strong>：在不可靠的物理信道上提供可靠的传输，主要负责建立、维护和终止物理连接。</li><li><strong>网络层</strong>：负责数据包从源到目的地的传输和路由选择。</li><li><strong>传输层</strong>：提供端到端的数据传输服务，并确保数据的正确性。</li><li><strong>会话层</strong>：负责建立、管理和终止会话。</li><li><strong>表示层</strong>：确保一个系统的应用层所发送的信息可以被另一个系统的应用层读取。</li><li><strong>应用层</strong>：为应用程序提供服务，是网络服务与用户的一个接口。</li></ol><p><strong>DNS（域名系统）</strong> 是一种用于将域名转换为IP地址的分布式数据库。当您尝试访问一个网站时，DNS服务器会将您输入的域名（如 <code>example.com</code>）转换为机器可以理解的IP地址（如 <code>192.0.2.1</code>），这个过程称为域名解析。DNS的工作原理类似于电话簿，它管理着名称和数字之间的映射关系，使得用户无需记住复杂的IP地址，只需记住容易记忆的域名即可访问互联网。</p><div class="hint-container info"><p class="hint-container-title">为什么要有网络模型，不能没有吗？</p><p>网络模型，特别是OSI的七层模型，是为了解决异种网络互连时所遇到的兼容性问题而设计的。它的主要目的是帮助不同类型的主机实现数据传输。网络模型的存在有几个关键的好处：</p><ul><li>易于实现和标准化：通过将复杂的网络通信过程分解成较小、更易管理的部分，每一层都可以独立地工作和标准化，这样就可以将大问题分割成多个小问题，利于实现。</li><li>灵活性好：如果某一层发生变化，只要接口不变，不会影响其他层。</li><li>分层后的复用性：用户只关心用到的应用层，其他层可以复用，不需要了解底层的具体实现。</li><li>各层之间相互独立：高层不需要知道底层的功能是采取硬件来实现的，只需要知道通过底层的接口来获得所需要的服务。</li></ul></div><div class="hint-container info"><p class="hint-container-title">为什么他是七层不是三层或者十层？</p><p>至于为什么是七层而不是三层或十层，这主要是基于实际需要和历史发展的结果。</p><ul><li>七层模型提供了足够的细分，以确保网络通信的各个方面都能被充分考虑和处理，同时也不至于过于复杂。</li><li>每一层都有其特定的功能和协议，这样的划分使得网络设计更加模块化，便于理解和开发。</li><li>如果层数更少，可能无法覆盖所有必要的功能；如果层数更多，则可能会导致不必要的复杂性和冗余。</li></ul><p>因此，七层模型被认为是一个在功能性和复杂性之间取得平衡的有效框架。</p></div><a href="#footnote-ref7" class="footnote-backref">↩︎</a></li><li id="footnote8" class="footnote-item"><p>React 代码层的优化主要集中在以下几个方面：</p><ol><li><p><strong>组件优化</strong>：</p><ul><li>使用 <code>React.PureComponent</code> 或 <code>React.memo</code> 来避免不必要的渲染。这些方法通过浅比较 props 和 state 来阻止组件的重复渲染。</li><li>利用 <code>shouldComponentUpdate</code> 生命周期方法来控制组件的更新逻辑。</li></ul></li><li><p><strong>Hooks 优化</strong>：</p><ul><li>使用 <code>useCallback</code> 和 <code>useMemo</code> 避免不必要的函数和值的重新创建，这样可以减少子组件的重复渲染。</li></ul></li><li><p><strong>状态管理优化</strong>：</p><ul><li>确保状态尽可能地局部化，避免全局状态导致的广泛重渲染。</li><li>使用 Context API 或 Redux 等状态管理库时，合理拆分状态，避免不相关组件的重渲染。</li></ul></li><li><p><strong>懒加载</strong>：</p><ul><li>对于大型组件或路由，使用 <code>React.lazy</code> 和 <code>Suspense</code> 实现代码分割和懒加载，以减少初始加载时间。</li></ul></li><li><p><strong>虚拟列表</strong>：</p><ul><li>当渲染大量列表数据时，使用虚拟列表（如 <code>react-window</code> 或 <code>react-virtualized</code>）来只渲染可视区域内的元素，从而提高性能。</li></ul></li><li><p><strong>避免内联函数和对象</strong>：</p><ul><li>尽量避免在渲染方法中使用内联函数和对象字面量，因为这会在每次渲染时创建新的引用，导致子组件不必要的重渲染。</li></ul></li><li><p><strong>使用不可变数据结构</strong>：</p><ul><li>使用不可变数据可以更容易地检测到数据变化，从而优化渲染性能。</li></ul></li><li><p><strong>性能监控和分析</strong>：</p><ul><li>利用 React DevTools 的 Profiler 来监控组件的渲染性能，并分析性能瓶颈。</li></ul></li></ol><p>这些是React代码优化的一些基本方法。根据应用的具体情况，可能还有更多的优化策略可以采用。 <a href="#footnote-ref8" class="footnote-backref">↩︎</a></p></li><li id="footnote9" class="footnote-item"><p><code>useMemo</code> 和 <code>useCallback</code> 都是 React 的钩子（Hooks），它们的主要目的是优化性能，但它们各自的用途和工作方式有所不同。</p><ul><li><p><strong>useMemo</strong>:<br><code>useMemo</code> 用于缓存计算结果。当你有一些复杂的计算或者生成的数据，这些数据只在依赖项改变时才需要重新计算时，你可以使用 <code>useMemo</code>。它会记住上一次计算的结果，只有当依赖项发生变化时，才会重新计算并返回新的值。这样可以避免在每次渲染时都进行重复的计算，从而提高性能。</p></li><li><p><strong>useCallback</strong>:<br><code>useCallback</code> 用于缓存函数本身。在将函数传递给子组件作为 props 时，如果你不希望子组件在父组件每次渲染时都重新渲染，你可以使用 <code>useCallback</code>。它会记住函数的引用，只有当依赖项发生变化时，才会返回新的函数引用。这对于配合 <code>React.memo</code> 来避免不必要的子组件渲染特别有用。</p></li></ul><p>简而言之，<code>useMemo</code> 是用来缓存值的，而 <code>useCallback</code> 是用来缓存函数引用的。两者都可以减少组件的重渲染次数，但它们缓存的内容不同。在实际使用中，应根据具体场景选择合适的钩子来优化性能。 <a href="#footnote-ref9" class="footnote-backref">↩︎</a></p></li><li id="footnote10" class="footnote-item"><p><code>useEffect</code> 和 <code>useLayoutEffect</code> 都是 React Hooks API 的一部分，用于处理副作用，但它们在执行时机和用途上有所区别。</p><ul><li><p><strong>useEffect</strong>:<br><code>useEffect</code> 是在组件渲染到屏幕之后异步执行的。这意味着它不会阻塞浏览器的绘制过程，适用于大多数副作用场景，如数据获取、订阅或手动更改 DOM。</p></li><li><p><strong>useLayoutEffect</strong>:<br><code>useLayoutEffect</code> 的执行时机更早，它在 DOM 更新完成后，但渲染到屏幕之前同步执行。这使得 <code>useLayoutEffect</code> 适用于需要同步执行的副作用，比如读取或修改 DOM，以避免可能的闪烁现象。</p></li></ul><p>简而言之，如果你的副作用是与 DOM 直接相关且可能影响到布局，那么应该使用 <code>useLayoutEffect</code>。如果副作用与布局无关，或者可以稍后执行而不影响用户体验，那么使用 <code>useEffect</code> 是更好的选择。通常情况下，推荐首先使用 <code>useEffect</code>，只有当你遇到需要同步执行副作用的情况时，才考虑使用 <code>useLayoutEffect</code>。 <a href="#footnote-ref10" class="footnote-backref">↩︎</a></p></li>`,9);function m(b,g){const t=p("RouteLink");return o(),c("div",null,[r,n("section",k,[n("ol",d,[n("li",f,[n("p",null,[s("a a 。"),l(t,{to:"/%E9%9D%A2%E8%AF%95/JavaScript.html#this-%E6%8C%87%E5%90%91"},{default:i(()=>[s("解析")]),_:1}),s(),v])]),h])])])}const w=e(u,[["render",m],["__file","面试记录.html.vue"]]),x=JSON.parse('{"path":"/%E9%9D%A2%E8%AF%95/%E9%9D%A2%E8%AF%95%E8%AE%B0%E5%BD%95.html","title":"面试记录","lang":"zh-CN","frontmatter":{"title":"面试记录","icon":"interview","date":"2024-04-12T00:00:00.000Z","order":13,"category":["面试"],"tag":["前端工程化"],"feed":false,"seo":false,"head":[]},"headers":[{"level":2,"title":"上海抱朴信息技术有限公司","slug":"上海抱朴信息技术有限公司","link":"#上海抱朴信息技术有限公司","children":[{"level":3,"title":"1. this 指向","slug":"_1-this-指向","link":"#_1-this-指向","children":[]},{"level":3,"title":"2. 宏任务和微任务","slug":"_2-宏任务和微任务","link":"#_2-宏任务和微任务","children":[]},{"level":3,"title":"3. setTimeout 输出","slug":"_3-settimeout-输出","link":"#_3-settimeout-输出","children":[]},{"level":3,"title":"4. 打印棱形","slug":"_4-打印棱形","link":"#_4-打印棱形","children":[]}]},{"level":2,"title":"阿里巴巴","slug":"阿里巴巴","link":"#阿里巴巴","children":[{"level":3,"title":"1. 算法","slug":"_1-算法","link":"#_1-算法","children":[]},{"level":3,"title":"2. 业务","slug":"_2-业务","link":"#_2-业务","children":[]},{"level":3,"title":"3. 说一下你对七层网络模型和对DNS的理解","slug":"_3-说一下你对七层网络模型和对dns的理解","link":"#_3-说一下你对七层网络模型和对dns的理解","children":[]},{"level":3,"title":"4. React 代码层的优化可以说一下么？","slug":"_4-react-代码层的优化可以说一下么","link":"#_4-react-代码层的优化可以说一下么","children":[]},{"level":3,"title":"5. 说一下 useMemo 和 useCallback 有什么区别","slug":"_5-说一下-usememo-和-usecallback-有什么区别","link":"#_5-说一下-usememo-和-usecallback-有什么区别","children":[]},{"level":3,"title":"6.说一下 useEffect 和 useLayoutEffect 有什么区别","slug":"_6-说一下-useeffect-和-uselayouteffect-有什么区别","link":"#_6-说一下-useeffect-和-uselayouteffect-有什么区别","children":[]},{"level":3,"title":"7. useEffect 对应在 class 中的生命周期怎么写？","slug":"_7-useeffect-对应在-class-中的生命周期怎么写","link":"#_7-useeffect-对应在-class-中的生命周期怎么写","children":[]},{"level":3,"title":"8. 如果在 if 里面写 useEffect 会有什么表现？","slug":"_8-如果在-if-里面写-useeffect-会有什么表现","link":"#_8-如果在-if-里面写-useeffect-会有什么表现","children":[]},{"level":3,"title":"9. 说一下 React 的 Fiber 架构是什么","slug":"_9-说一下-react-的-fiber-架构是什么","link":"#_9-说一下-react-的-fiber-架构是什么","children":[]},{"level":3,"title":"10. 前面提到，在 if 语句里面写 hook 会报错，你可以用 fiber 架构来解释一下吗？","slug":"_10-前面提到-在-if-语句里面写-hook-会报错-你可以用-fiber-架构来解释一下吗","link":"#_10-前面提到-在-if-语句里面写-hook-会报错-你可以用-fiber-架构来解释一下吗","children":[]},{"level":3,"title":"11. 个人方面有什么规划吗？","slug":"_11-个人方面有什么规划吗","link":"#_11-个人方面有什么规划吗","children":[]},{"level":3,"title":"12. 对未来的技术上有什么规划呢？","slug":"_12-对未来的技术上有什么规划呢","link":"#_12-对未来的技术上有什么规划呢","children":[]},{"level":3,"title":"13. 能不能从技术的角度讲一下你工作中负责业务的复杂度？","slug":"_13-能不能从技术的角度讲一下你工作中负责业务的复杂度","link":"#_13-能不能从技术的角度讲一下你工作中负责业务的复杂度","children":[]},{"level":3,"title":"14. 可以讲一下你在工作中技术上的建设吗？","slug":"_14-可以讲一下你在工作中技术上的建设吗","link":"#_14-可以讲一下你在工作中技术上的建设吗","children":[]},{"level":3,"title":"15.  你有什么想问我的吗？","slug":"_15-你有什么想问我的吗","link":"#_15-你有什么想问我的吗","children":[]},{"level":3,"title":"16.  在 js 中原型链是一个很重要的概念，你能介绍一下它吗？","slug":"_16-在-js-中原型链是一个很重要的概念-你能介绍一下它吗","link":"#_16-在-js-中原型链是一个很重要的概念-你能介绍一下它吗","children":[]},{"level":3,"title":"17.  object 的原型指向谁？","slug":"_17-object-的原型指向谁","link":"#_17-object-的原型指向谁","children":[]},{"level":3,"title":"18.  能说一下原型链的查找过程吗？","slug":"_18-能说一下原型链的查找过程吗","link":"#_18-能说一下原型链的查找过程吗","children":[]},{"level":3,"title":"19.  node 的内存管理跟垃圾回收机制有了解过吗？","slug":"_19-node-的内存管理跟垃圾回收机制有了解过吗","link":"#_19-node-的内存管理跟垃圾回收机制有了解过吗","children":[]},{"level":3,"title":"20.  js 中的基础类型和对象类型有什么不一样？","slug":"_20-js-中的基础类型和对象类型有什么不一样","link":"#_20-js-中的基础类型和对象类型有什么不一样","children":[]},{"level":3,"title":"21.  看你简历上是用 React，你能简单的介绍一下 hooks 吗？","slug":"_21-看你简历上是用-react-你能简单的介绍一下-hooks-吗","link":"#_21-看你简历上是用-react-你能简单的介绍一下-hooks-吗","children":[]},{"level":3,"title":"22..  简单说一下 useEffect 的用法","slug":"_22-简单说一下-useeffect-的用法","link":"#_22-简单说一下-useeffect-的用法","children":[]},{"level":3,"title":"23.  说一下 useEffect 的返回值用来做什么？","slug":"_23-说一下-useeffect-的返回值用来做什么","link":"#_23-说一下-useeffect-的返回值用来做什么","children":[]},{"level":3,"title":"24.  你知道 useEffect 第二个参数内部是怎么比较的吗？","slug":"_24-你知道-useeffect-第二个参数内部是怎么比较的吗","link":"#_24-你知道-useeffect-第二个参数内部是怎么比较的吗","children":[]},{"level":3,"title":"25.  前端的话可能跟网络打交道比较多，网络你了解多少呢？","slug":"_25-前端的话可能跟网络打交道比较多-网络你了解多少呢","link":"#_25-前端的话可能跟网络打交道比较多-网络你了解多少呢","children":[]},{"level":3,"title":"26.  http 是在哪一层实现的？","slug":"_26-http-是在哪一层实现的","link":"#_26-http-是在哪一层实现的","children":[]},{"level":3,"title":"27.  说一下 get 跟 post 有什么区别？","slug":"_27-说一下-get-跟-post-有什么区别","link":"#_27-说一下-get-跟-post-有什么区别","children":[]},{"level":3,"title":"28.  说一下浏览器输入 url 到页面加载的过程","slug":"_28-说一下浏览器输入-url-到页面加载的过程","link":"#_28-说一下浏览器输入-url-到页面加载的过程","children":[]},{"level":3,"title":"29.  菜单左中右布局，两边定宽，中间自适应，说一下有几种实现方式","slug":"_29-菜单左中右布局-两边定宽-中间自适应-说一下有几种实现方式","link":"#_29-菜单左中右布局-两边定宽-中间自适应-说一下有几种实现方式","children":[]},{"level":3,"title":"30.  项目难点","slug":"_30-项目难点","link":"#_30-项目难点","children":[]}]}],"git":{"createdTime":1713079098000,"updatedTime":1715148497000,"contributors":[{"name":"GodX","email":"1046529973@qq.com","commits":2}]},"readingTime":{"minutes":10.46,"words":3137},"filePathRelative":"面试/面试记录.md","localizedDate":"2024年4月12日"}');export{w as comp,x as data};
